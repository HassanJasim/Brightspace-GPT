
About Association Analytics

Association Analytics is the creator of Acumen, a cloud-based platform that is available as a Brightspace integration. The platform provides business intelligence and data analytics for associations, including course details, enrollment, course evaluation data, and holistic learning analytics based on both the courses offered and which learners are taking the courses. It is available as an add on purchase to D2L clients with the Brightspace Core package.
Note: Data for Acumen is hosted in the United States.
Using the Acumen D2L Learning module, associations can:
Leverage Brightspace data to provide insights that you can use to improve engagement
Track key performance indicators (KPIs)
Review and analyze enrollment and learner trends, and use that information to recommend learning paths.
Analyze course evaluation and testing data
Recommend or automatically enroll association members in courses
Use aggregated data across the course catalog to establish benchmarks
Use predictive analytics to determine what courses members are likely to attend.
For more information about Acumen, refer to Brightpace IntegrationHub > Acumen
 



--------------------------------------------------


About Banner Grades

Banner Grades is an add-on to the Grades tool and Brightspace Banner Adapter in Brightspace that enables instructors to export final grades from Brightspace to your organization's Banner Student Information System (SIS) in near real-time. Banner Grades includes the following key features:
Grade Exchange with Banner by Ellucian® with near real-time feedback
Consistent and familiar Brightspace user interface for grades export
Flexibility to submit letter or numeral grades
Option to restrict submitted grades to released grades only
Option to submit midterm grades
Option to set last date of attendance for learners with failing grades: Your D2L site administrator must set the d2l.Tools.Grades.ExportHandlerPage and d2l.Tools.Grades.ExportToSIS.LAExportHandlerPage configuration variables to enable this feature, and it requires Luminis Message Broker 4.2b or higher. Contact your Banner administrator or Ellucian Professional Services if you need assistance installing the correct version of Luminis Message Broker.
Submission of calculated or adjusted final grades
Ability to override Brightspace grade prior to submission
Section by section grade submissions
Configurable instructions and error messages
The acquisition, implementation, and configuration of Banner by Ellucian and the Brightspace Banner Adapter for eLearning must be done independently by your organization and is beyond the scope of this guide. Ellucian Services may also be required to configure the Learning Management Gateway and Luminis Message Broker to receive grades from this solution. 



--------------------------------------------------


Set up Banner Grades

Best practices for configuring Banner Grades
Define org level grade schemes
Defining org level grade schemes reduces the chance that an instructor will submit invalid symbols to Banner Grades. Although Banner Grades alerts instructors when a submitted grade symbol is not valid, it is better to reduce the chance of this occurrence.
Review language terms
Update references to "Banner" or "SIS" to match your organization's terminology. Review instructional and error language terms to include organization-specific instructions.
Review role settings
Decide if the Access all sections role setting is appropriate for all instructors. This setting allows access to the grade submission page for all sections in a course offering. It can also result in denied grade submissions in Banner Grades if instructors do not have correct permissions in the Banner Grades Student Information System (SIS).
Set appropriate default grade settings for the org
Select the most frequently used grade scheme as your default grade scheme for d2l.Tools.Grades.GradeSchemeId.
Turn the following configuration variables on or off as appropriate for your organization:
d2l.Tools.Grades.FinalGrade.ReleaseAdjustedGrade
d2l.Tools.Grades.HasAdjustedFinalGrade
d2l.Tools.Grades.ExportToSiS.GradeToSubmit
Set appropriate failing triggers for grades and do not change them
If your D2L site administrator enabled the ability to set last dates of attendance, the D2L site administrator should also set the following configuration variable values as appropriate for your organization:
d2l.Tools.Grades.ExportToSIS.LATriggerGrade
d2l.Tools.Grades.ExportToSIS.LATriggerPercentage
Set d2l.Tools.Grades.ExportToSIS.LATriggerPercentage if the final grade has a scheme that does not have one or more of the items defined in d2l.Tools.Grades.ExportToSIS.LATriggerGrade. Changing the values for either of these configuration variables may cause the Last Date of Attendance value to be null for any learners who are no longer failing according to the redefined triggers.
Provide tailored documentation
After configurations are validated, prepare documentation to communicate the process to your instructor users. Include your language terms and specific settings. You may find it useful to record a short video of submitting grades at the end of term.
Roles and Permissions
The following permissions and role settings are required to make full use of Banner Grades:

Access all course sections role setting: allows users to see  and export grades to the Banner Grades SIS for all sections within a course. 


Grades > Export Grades permission: allows users to see and export final and midterm grades to the Banner Grades SIS from the course offering.


Grades > Manage Final Grade Properties permission: allows users to see all grade values on the Export Grades to SIS page in the Grades tool.

Configuration Variables
The following configuration variables must be set to make full use of Banner Grades:

d2l.Tools.Grades.ExportHandlerPage


d2l.Tools.Grades.ExportToSIS.Banner.Destination 


d2l.Tools.Grades.ExportToSIS.Banner.ReplyTo


d2l.Tools.Grades.ExportToSIS.ExportMidtermGrades 


d2l.Tools.Grades.ExportToSIS.GradeMustBeReleased


d2l.Tools.Grades.ExportToSIS.GradeToSubmit


d2l.Tools.Grades.ExportToSIS.LAExportHandlerPage


d2l.Tools.Grades.ExportToSIS.LAMidtermRequired


d2l.Tools.Grades.ExportToSIS.LATriggerGrades


d2l.Tools.Grades.ExportToSIS.LATriggerPercentage


d2l.Tools.Grades.ExportToSIS.PollingFrequency	


d2l.Tools.Grades.ExportToSIS.SendSymbolOrValue


d2l.Tools.Grades.ExportToSIS.SISPassword


d2l.Tools.Grades.ExportToSIS.SISUri


d2l.Tools.Grades.ExportToSIS.SISUsername


d2l.Tools.Grades.ExportToSIS.TransactionTimeout 

Customize language terms
You can configure all text and messaging presented in the Brightspace user interface for Banner Grades through Language Management. Review the user interface and update entry points, instructions, and error messages to suit your organization's needs and expectations.
On the Language Management page, within the IPSISGrades tool package, you can customize language terms to provide additional instructions to instructors. For example, Export Grades to SIS may be more intuitive and meaningful to your instructors if you rename it Export Grades to Banner or Export Grades to Registrar. Likewise, your instructors may prefer Submit All Grades to Export All Grades.
Configure Ellucian® components
To correctly configure Ellucian® Learning Management Gateway (LMG) and Ellucian® Luminis Message Broker (LMB), your organization may require changes that are not listed. If you are unfamiliar with the necessary configurations for assigning learner grades in Ellucian components, consult Ellucian Professional Services before making any changes.
Deploy the LMB hotfix
LMB requires a hotfix to ensure that JMSCorrelationId correctly returns to the Banner Grades component after Banner processes the grades export. If you are using LMG version 4.0.x, you can get the hotfix from Ellucian's support website under "Banner-Integration Technologies" version 4.0.1 with the identifier P1_EMZJ9R_LMG_4000101.
LMB 4.2b or higher is required to enable the option to set the last date of attendance. Contact your Banner administrator or Ellucian Professional Services if you need assistance installing the correct version of LMB.
Set up the LMB user
Set the Authorization Username and Authorization Password to the same values entered in the d2l.Tools.Grades.ExportToSIS.SISUsername and d2l.Tools.Grades.ExportToSIS.SISPassword configuration variables.
Set up the HTTP Client on the LMB
Set the Post to HTTP URL value to the same value as the d2l.Tools.Grades.ExportHandlerPage configuration variable (for example, set it to http://hostname/d2l/im/GradesExport/BannerMessageQueue).
Test your Banner Grades configuration
When testing your Banner Grades configuration, keep the following prerequisites in mind:
The user who is currently logged into Brightspace is the user who submits the grades. Users cannot submit grades for other users. 
If the currently logged in user was not created using the Banner Integration and does not have an associated entry in the entity_identifiers table, an error appears saying the "Instructor does not exist on the SIS". The user must first have been sent through the Banner Integration to create a unique entry in the entity_identifiers table before they are able to submit grades. 
The course offering section must already exist for the grades to be submitted successfully.




--------------------------------------------------


Export grades to Banner Grades


When instructors use the Grades tool to submit grades to the Banner Grades Student Information System (SIS), the following interactions occur: 
Banner Grades packages and sends the grades to Luminis Message Broker (LMB). 
LMB pushes the grade exchange message to the grade adapter process in the Learning Management Gateway (LMG), which attempts to update Banner by Ellucian. 
LMB returns errors and successes to the HTTP Response Handler component of Banner Grades. 
The HTTP Response Handler processes the response and updates the instructor through the Banner Grades user interface with a summary and details of the transaction.
Troubleshoot grade exports
After you export grades, you can view the results on the Grades Export Status page. This is where you can see any errors that occurred during the export, which can assist you in troubleshooting. The following table includes the type of error and what it means:

Code


Error


Description


GE01


STUDENT_ID_NOT_FOUND


Student ID does not exist.


GE02


ORG_UNIT_DOES_NOT_EXIST


Section does not exist.


GE03


ORG_UNIT_IS_NOT_GRADEABLE


Section is not gradable.


GE04


STUDENT_NOT_ENROLLED


Student enrollment does not exist.


GE05


STUDENT_NOT_GRADEABLE


Student enrollment is not gradable.


GE06


MUST_GENERATE_MIDTERM


Gradable component records exist; must generate midterm grade through component marks.


GE07


MUST_GENERATE_FINAL


Gradable component records exist - must generate final grade through component marks.


GE08


INVALID_GRADE_FOR_ORG_UNIT


Grade not valid for section.


GE09


GRADE_FROZEN_ON_SIS


Grade already rolled to history.


GE10


GRADE_ALREADY_IN_SIS


Received grade already posted to student enrollment. No update performed.


GE11


INVALID_INSTRUCTOR_FOR_ORG_UNIT


Faculty ID is not assigned to section.


InstructorNotFound


INSTRUCTOR_NOT_FOUND


Instructor ID does not exist.


NoGradesFound


NO_GRADES_FOUND


Could not find grades.





--------------------------------------------------


About BizLibrary

On-demand course content is available for purchase from BizLibrary via D2L.  BizLibrary offers thousands of digital courses for corporate training. Thousands of courses are available in English, as well as a large collection of content in French, Spanish, German and Japanese languages.
BizLibrary course content is available as SCORM objects in SCORM 1.2 and SCORM 2004 formats. All BizLibrary SCORM objects are self-contained lessons that can be uploaded into courses or used as stand-alone courses within Brightspace. You can easily import BizLibrary content as a Course Package, or using Bulk Course Create if it is enabled for your organization.   Once the SCORM objects are uploaded into Content in Brightspace, the  content streams directly from the BizLibrary hosting service in AWS. 
Access BizLibrary content
A course administrator for your organization must be set up with an account in the BizLibrary Portal, which provides access to all available course content you have licensed. Courses are downloaded from the portal as SCORM objects and then imported into Brightspace.



--------------------------------------------------


Set up BizLibrary

Before you begin: Review BizLibrary's system requirements and recommendations for pop-up blockers. BizLibrary content opens in a new browser tab and cannot be configured to appear inline in Content. Review How do I turn off the pop-up blocker? on the BizLibrary Help site for more information. 
You must configure Brightspace for SCORM objects before adding your BizLibrary content: 
Ensure the New Content Experience configuration variables are ON. D2L strongly recommends using the new Content Experience (Lessons) with BizLibrary content for optimal viewing experience.
Enable SCORM in Brightspace:

Enable the Content Service by turning on the associated configuration variable and allowing the AWS region to be set based on the location.


Give users access to the Content Service under Organization Tools.


Grant the appropriate permissions for the Content Service and External Learning Tools.


Map roles in your organization to the appropriate IMS roles.

 



--------------------------------------------------


Add BizLibrary content to Brightspace

Before you begin
Ensure you have downloaded your content from BizLibrary Catalog. 
You can upload your BizLibrary SCORM content directly into Content in a course in Brightspace. You can add course content individually, or add up to 50 SCORM objects at one time. Alternatively, you can use  Bulk Course Create to add courses in bulk if your organization has this tool enabled. 
Add BizLibrary SCORM objects to Content
Add a SCORM or xAPI package to the Content tool
Add the SCORM content to Lessons
Bulk upload SCORM or xAPI objects to the Content Service
Add BizLibrary SCORM objects with Bulk Course Create - BCC
Use Bulk Course Create - BCC to create course offerings




--------------------------------------------------


About Brightspace Extended Administration by Genius

The Brightspace Extended Administration solution is an add-on integration that enables corporate clients to use decentralized workflows to leverage shared resources and create new assets that meet the varied needs of distinct business units that are managed in isolation, such as customer training, associations, distributed internal training across regions, franchises, and other structures with distinct administrators and users, including:

Deliver and manage learning based on unique needs, branding, and identity.


Benefit from the improved quality of decentralized learners, course content, and course completion.


Access to more relevant personalized experiences and learning paths.


Ability to build and share standardized training and learning paths across all affiliated organizations or within specific affiliated organizations


Additional decentralization within each affiliated organization in a way that makes sense for their corporate training and learning goals.

Decentralized workflows include:

Affiliated Org User Management, Org Course Management, and Org Enrollment Management


Affiliated Org Portals


Course Catalogs


Learning Paths


Self-Registration


E-commerce


Reporting

For more information, refer to:

Learners – The Genius SIS Help Knowledge Base


Administrators – The Genius SIS Help Knowledge Base


Reference Guide – The Genius SIS Help Knowledge Base


Release Notes – The Genius SIS Help Knowledge Base


API and Data Dictionary – The Genius SIS Help Knowledge Base





--------------------------------------------------


About Brightspace IntegrationHub

Brightspace IntegrationHub is an integrated app catalog that enables IntegrationHub users to easily discover partner solutions. For example, Panopto enables you to record, upload, and share video directly from within IntegrationHub. Similarly, Zoom helps your organization connect internally and externally with flawless video communications, chat, and webinars. Users can find apps by keyword search, or by browsing app categories or viewing all apps by segment (for example, K-12, Higher Ed, or Enterprise).
Brightspace IntegrationHub is integrated with Brightspace Learning Environment as a Learning Tools Interoperability (LTI) external learning tool. To allow users to launch Brightspace IntegrationHub from Brightspace Learning Environment, you must complete the steps to enable LTI functionality and then create an external learning tool link to Brightspace IntegrationHub.
Users can also browse directly to the Brightspace IntegrationHub site without launching Brightspace Learning Environment. 
Using Brightspace IntegrationHub
You can use Brightspace IntegrationHub to view all available solutions for the IntegrationHub platform. When you click an application icon in the Brightspace IntegrationHub catalog, you can:

Read summary information about the solution and view any available images and videos that the application provider has included.


Add customized notes to an application's page that only you and instructors from your organization can view.


Submit a review of the application if you are already using it in your organization.

IntegrationHub badges
D2L uses the following badges to provide additional information when viewing apps:

Featured – An application that the D2L partners team has decided to feature and push to the top of the app listings. It is defined from the Dashboard>App detail>Attribute area.


Fusion Sponsor – Apps from organizations that have been a partner sponsor at Fusion, D2L’s annual user conference. It is defined from the Dashboard>App detail>Attribute area.


New – A listing is given this badge for the first two weeks (15 days) it is available in IntegrationHub.


Updated – This badge indicates an app has been recently updated. This badge also persists for two weeks (15 days). If a user updates the  app, badges  reflect the app as updated based on the new date.





--------------------------------------------------


Configuring LTI at the org level to integrate Brightspace IntegrationHub

You require the LTI and IMS configuration permissions to integrate Brightspace IntegrationHub into your organization's Brightspace Learning Environment.
Map roles in your organization to administrator and instructor IMS roles
Enable the appropriate IMS mapping permissions for the roles at your organization. 

IMS Permission Setting


Expected Behavior

Manage IMS Configuration

Applicable Org Unit Type: Organization
 
Allows users to: Configure IMS related settings, including IMS and D2L term mapping. (Map roles and org unit types to the standard IMS roles and contexts)
 
Users will see: The IMS Configuration link in the  Admin Tools menu
 
Also Required: N/A

Use the IMS Configuration tool to map your organization's Brightspace roles to LTI roles that allow instructors and administrators to access Brightspace IntegrationHub from your Brightspace instance.

From the  Admin Tools menu, click IMS Configuration. Brightspace roles are listed as rows and IMS (LTI) roles are listed as columns.


Click the Roles tab.


To map the IntegrationHub administrator role to an administrator role in Brightspace IntegrationHub, in the Administrator row, select the check box in the Administrator column.


To map the Brightspace instructor role to an instructor role in Brightspace IntegrationHub, in the Instructor row, select the check box in the Instructor column.


Click Save.





--------------------------------------------------


Create an external learning tool link to Brightspace IntegrationHub

After you enable LTI external learning tool functionality at the organization level, you can:

Create an external learning tool link to Brightspace IntegrationHub.


Create a Quicklink to embed the external learning tool link in a course.

 Refer to Set up customization options for a tool provider. 
Note: You  require the appropriate External Learning Tools permissions to complete these integration tasks.
Register IntegrationHub

From the Admin Tools menu, click Manage Extensibility.


Click the LTI Advantagetab. Click Register Tool.


Select Standard registration.


Add the tool Name (required) and a Description(optional).


Enter the following in the fields:


Domain: https://integrationhub.brightspace.com/


Redirect URLs: https://integrationhub.brightspace.com/.netlify/functions/sso-lti


OpenID Connect Login URL:


https://integrationhub.brightspace.com/.netlify/functions/login-request


Target Link URI: https://integrationhub.brightspace.com/.netlify/functions/sso-lti


Keyset URL: https://integrationhub.brightspace.com/

Deploy IntegrationHub

In the Roles section, select the Send Institution Role check box. 


Click Register. In the Brightspace Registration Details window, click View Deployments


Click New Deployment.


On the Deploy Tool page, ensure the tool is set to Enabled. 


From the Tool drop-down list, select the IntegrationHub option.


Enter a Name (required) and any other settings on the page (optional).


Click Create Deployment. 


Select the link for IntegrationHub.


On the Edit Tool Integration page, customize any settings you want, then click View Links.


Figure: On the Edit Tool Integration page, the View Links link is highlighted.
Create Links after deploying IntegrationHub

Figure: The Links page showing the New Link button.

On the Links page, click New Link.


Ensure the tool is set to Enabled


Add a Name .


Enter the URL: https://integrationhub.brightspace.com/.netlify/functions/sso-lti.


Select Basic Launch. Click Save and Close.


Figure: The Edit Link Setup page highlighting the  Enabled, URL, and Type fields.



--------------------------------------------------


Configure application availability for instructors

You can use Brightspace IntegrationHub to control the available solutions for instructors or other end users in your organization. When you view an application's page from the Brightspace IntegrationHub catalog, in the Summary area, you can do any of the following:

Click ADD TO ALLOW LIST to make an installed or purchased application appear in the My Apps area in Brightspace IntegrationHub for your organization's users


Click REMOVE FROM ALLOW LIST to remove the installed or purchased application from users' My Apps area.


Click ADD TO BLOCK LIST to prevent your organization's users from seeing the application in the Brightspace IntegrationHub app catalog


Click REMOVE FROM BLOCK LIST to allow the users to once again see the application in Brightspace IntegrationHub.

You can also remove blocklisted solutions directly from the list on the Block List page.
View application availability for instructors
You can view application availability for instructors in your organization in the following ways:

To view the list of all blocklisted apps that aren't visible to your organization's users, from the Administrator drop-down menu, select Block List. On the Block List page, in the Remove column , click X beside any app you want to remove from the blocklist.


To view the list of all allowed apps that are also visible to your organization’s users, on the IntegrationHub homepage, click My Apps.


To view all available solutions in the Brightspace IntegrationHub app catalog, from the Brightspace IntegrationHub top menu, select Integration Directory. Blocklisted solutions are grayed out and have a watermark as Blocklisted to indicate that they are not visible to your organization’s users. Users cannot see blocklisted solutions in their app catalog.

Enable application requests
Administrators can determine if they want to allow users from their organization to see the Contact Partner button in the Integration Hub.

In IntegrationHub, open the Administrator menu and select Theme Customizer. 


You can define the institution color and set the institution logo.


Set Hide Request Form option to No if you want to hide the Contact Partner button for your users.


Set the Hide Request Form option to Yes to allow users to see the Contact Partner button and app details pages.

View your profile

Open Administrator Panel and click My Profile. You can view profile details and set a new password as required. 

View and create application requests
 Brightspace IntegrationHub allows users to request applications. 
To request an application for IntegrationHub, do either of the following:

Click Suggest an App to submit a request to the D2L Partners team for an application that you would like to see in Brightspace IntegrationHub.


From the Administrator drop-down menu, select Instructor Feedback to view application requests that instructors in your organization have made using Brightspace IntegrationHub.

Delete application requests

From the Brightspace IntegrationHub, open the Administrator drop-down menu, and select Instructor Feedback.


Select a request that has been addressed, or is no longer required.


Click Delete to delete the request.

Add a private note to instructor feedback
Information in the Private Note text box is only visible to administrators. It is not displayed to the user  who submits the request.

From the Brightspace IntegrationHub, open the Administrator drop-down menu, then select Instructor Feedback.


Select a request where you want to add a note.


Click Add Note. In the text box, enter your text.


Click Save.





--------------------------------------------------


About Class Technologies

Class is available as a paid add-on Brightspace Core clients. It is a synchronous online learning platform that enables administrators to add training and learning tools to Zoom or Microsoft Teams. Using Class, institutions can create a connected hybrid environment to improve learner engagement. 
Enable and configure Class
Two types of integrations are available:
Inside Brightspace: Class and D2L will leverage LTI 1.1 (refer to Instructions for LTI 1.1) and LTI 1.3 (refer to Instructions for LTI 1.3) protocols to integrate the two platforms.
Outside Brightspace: Using the Class app.
Note: Clients must also have Zoom or Microsoft Teams to use the Class integration.
For more information, refer to the installation guides available from the Class Technologies Getting Started knowledge base: 
Install Guide for Windows
Install Guide for iPadOS
Install Guide for MacOS
Zoom Settings Configuration Options for Class
Additional Resources
D2L IntegrationHub: Class
Class Support




--------------------------------------------------


Copyleaks overview

Copyleaks is an API integration and open-source solution that offers content authentication as well as plagiarism and copyright infringement detection for any platform. Copyleaks uses an exclusive AI-powered text analysis to identify potential plagiarism and paraphrasing across nearly every language, uncover AI-generated content, verify authenticity and ownership, and empower error-free writing.
By going beyond word-for-word detection, Copyleaks is the only platform that:
Detects AI-generated content, including ChatGPT4
Detects multiple forms of paraphrasing
Performs image-based text plagiarism detection
Exposes attempts to deceive detection software
Detects plagiarism in source code
The Copyleaks integration currently works with LTI 1.1, but is on track to upgrade to LTI 1.3 later this year.
For more information about Copyleaks, visit IntegrationHub.



--------------------------------------------------


Crosslisting Management Interface

The Crosslisting Management Interface (CLMI) allows administrators to create and remove special relationships between course sections and course offerings. In particular, CLMI allows the creation of many-to-one relationships between existing sections and offerings.
Use CLMI to:

Assign new relationships, additional to the ones currently in place, between existing course sections and an existing course offering.


Assign new relationships, additional to the ones currently in place, between existing course sections and new course offerings.


Remove relationships between course sections and course offerings if a section has more than one parental relationship.
Note: The CLMI cannot be used on implementations that have the SIS Holding Tank in active use.

Example scenarios
Two sections of Mechanical Engineering 101 are created with independent course offerings under the same department and college. Using CLMI, the two sections are combined under a single course offering, and then the originals removed.
The following occurs when courses are cross-listed:
The relationship between the original course sections and their respective course offerings are severed, and new relationships are created between those course sections and an assigned course offering. An assigned course offering can be either an existing offering or a new offering created by this tool.

An additional relationship is created between the sections and the departments and semesters from which the sections originated. This is called a trail of breadcrumbs, and its purpose is to allow the course offerings to revert back to their original departments should the administrator decide to remove the crosslisted course listings.

Pre-Crosslisting
Course sections are created with a one-to-one relationship with course offerings. The following is a graphical depiction of the organization structure with independent sections:
 

Post-Crosslisting
Course sections are combined under a single course offering newly created by the crosslisting process. The following is a graphical depiction of the organizational structure post-crosslisting:

Crosslisting removal
When a crosslisting is removed, the courses and associated sections are completely deleted and recreated as a new offering. Memberships are transferred from the deleted crosslisted course to the newly created course offerings. However, user progress and course information are not transferred as the newly created courses do not inherit those properties. The following is a graphical depiction of a typical crosslisting removal scenario:
 

Interface limitations and additional notes
Course content and user progress for crosslisted courses
Course content and user progress may be affected by crosslisting.
There are two course creation options for crosslisted courses:
A new course offering can be created for the crosslisting. The new course offering does not retain any of the course content or user progress from the courses being crosslisted.
An existing course offering can be designated for crosslisting. The existing course offering only retains course content and user progress already existing in that course offering, and does not include any data from additional crosslisted courses. It is recommended that the crosslisting function be used only at the beginning of an academic term for courses without course content or user progress to reduce the possibility of data loss.
Course content and user progress for uncrosslisted courses
When course offerings are uncrosslisted, a new course offering is created in its place and its enrollments are transferred to the new course offering. As a consequence, all user progress originating from the uncrosslisted course is not retained.
This function should only be used in exceptional circumstances where the loss of user progress is considered acceptable.



--------------------------------------------------


Set up Crosslisting Management Interface

System requirements
CLMI has the same system requirements as Brightspace, depending on the platform on which it is being installed. Refer to Brightspace Platform Requirements.
Assign permissions
The permissions required to access CLMI are identical to those of the Course Mappings Interface. Please refer to the Holding Tank Administration Guide on Brightspace Community for more information.
 
 



--------------------------------------------------


Manage CLMI

Launch the Crosslistings Management Interface
From the Admin Tools menu, select Crosslistings Management.
Search and select existing course offerings to combine
From the Admin Tools menu, select Crosslistings Management.
Enter a search string into the textbox, and click the search icon.
Course offerings fitting the criteria are returned in the search results.
Select the check box next to the course name to mark a course offering for combination.
Click Add Selected.

Course offerings marked for combination are listed in the Selected Courses section.

Click Next to proceed to crosslisting functionality.
Create a crosslisting
From the Admin Tools menu, select Crosslistings Management.
Search for and select the course offerings to combine into a single parent course offering.
Click Add Selected, and then Next.
Assign an existing parent course offering, or create a new course offering.
Click Next.
Confirm and click Create Crosslisting.
Note: If creating a new course offering, assign an existing parent course template or create a new course template.
Combine courses into an existing parent offering
Follow the steps above to search and select existing course offerings to combine.
Select Use Existing Course, and click Assign Existing Course.
Search for an existing offering to combine the selected courses into.
Select the appropriate offering in the Assign Existing Course pane.
Click Next to confirm the course offering combination.
Review the details of the crosslisting in the Create Crosslisting Summary page.
Click Create Crosslisting to complete the process.
Combine course offerings into a new course offering
Follow the steps above to search and select existing course offerings to combine.
Select New Course Offering.
Fill out the details of the new course offering by populating the following fields:Course Offering NameCourse Offering CodeSemesterDepartment/Subject CodeCollegeStart/end dates (optional)
Assign a new template by populating the Template Name, and Template Code fields.
Click Next to proceed to the confirmation stage.
Review the details of the crosslisting on the Crosslisting Summary page.
Click Create Crosslisting to create the crosslistings.
Remove crosslistings
The Crosslisting Management interface can remove crosslistings previously created by the interface.
From the Admin Tools menu, select Crosslistings Management.
Click the Remove Crosslistings tool area header.
Search for the crosslisting you want to delete.
Select the crosslistings to remove, and click Delete Selected.
On the Confirmation dialog, click Yes to confirm deletion of the cross listings.




--------------------------------------------------


About D2L Link

Note: D2L Link is currently only available in English and is limited to the US-East geographic area for data hosting. 
As part of your engagement with D2L Link Integration and Automation Services, you have access to the D2L Link tool within Brightspace. D2L Link leverages events and data from within Brightspace and integrates with a third-party platform powered by Workato. D2L Link is a connected ecosystem that enables you to integrate Brightspace with the systems you use every day to help automate manual tasks and improve data accuracy. As part of the D2L Link Integrations and Automations service, you can map an ideal workflow between Brightspace and your other systems that saves you time and helps improve business outcomes. 
D2L Link enables you to:
Get up and running faster: Cut down implementation time with out-of-the-box integrations that can be set up in a matter of hours, not months.
Leverage better insights: When data is scattered throughout your tech stack, getting reliable insights can be challenging. By connecting data from multiple sources to create a holistic view of your organization, you can get consistent, accurate information that you can rely on.
Gain organizational efficiencies: Automating the transfer of data helps to reduce strain on internal resources, cut hours spent on manual data entry, and minimize potential human errors.
D2L's partnership approach means a team of experts from D2L work with you to help you get the most out of D2L Link. The s D2L Link Integration and Automation Services team deliver and maintain workflows that integrate your systems and automate complex processes. For more information about the systems to which D2L can connect, and support for universal HTTP connections to include API actions in your workflow recipes, refer to the Connector page of Workado documentation. 
Understanding Projects, Recipes, and Connections
On the Project tab of the D2L Link Admin Dashboard, there is a read-only view of the projects, recipes, and connections set up by the D2L Link Integration and Automation Services team.
Project: A repository for your integration assets. A project holds the related set of assets for your integrations, including recipes, connections, and sub-folders. 
Recipe: An automated workflow that can span multiple apps, such as moving new users from an external app into Brightspace. Each recipe includes a trigger and one or more actions that occur as a result of the trigger. 
Connection: An authorization for a recipe to interact with your apps using actions and triggers. Connections are not tied to a recipe; multiple recipes in D2L Link can use a single connection. 
If you require changes to an existing recipe, or you want to create a new recipe or create a new integration, contact your Customer Success Manager to engage with the D2L Link Integration and Automation Services team. For more information about various aspects of designing recipes within D2L Link, refer to the Recipe Design page of the Workato documentation. 
Note: Workato documentation includes recipe creation details which are not available within D2L Link; however, the information might be valuable when working with D2L Link Automation and Integration Services to design and build your integration. 
Using Brightspace Recipes and Actions
This section describes a list of recipes and actions that are available to build your automations and integrations with assistance from the D2L Link Integration and Automation Services team.
About Recipes
Recipes consist of triggering events that initiate a workflow. The following recipes (triggering events) are available in D2L Link:
An award was issued
A user was enrolled or unenrolled
A grade value was entered or updated
About Actions
Actions are steps within a recipe's workflow that interact with a specific system. Actions can be related to a user, your org structure, or an enrollment. 
The following user actions are available: 
Create, update, or delete a user
Delete one or more User Attributes for a user
Delete all User Attributes for a user
Retrieve User Details by UserID
Retrieve User Attributes by UserID
Set one or more User Attributes
Set a multi-value User Attribute
Who am I
The following org structure actions are available:
Create or update a course offering or course template
Create a department or semester
Create or update an Org Unit with a custom type
Delete a course offering
Delete an Org Unit (department, semester, custom type)
Retrieve course offering details by OrgUnitID
Retrieve Org Unit Details by OrgUnitCode
Update a department
The following enrollment actions are available:
Enroll a user
Bulk enroll a user (up to 1000 in the batch)
Retrieve enrollments for a user
Retrieve enrollments for an Org Unit
Unenroll a user
Other available actions:
Copy course components
Create an assignment
Retrieve award details by AwardID




--------------------------------------------------


Using the D2L Link Admin Dashboard

Note: D2L Link is currently only available in English and is limited to the US-East geographic area for data hosting. 
The D2L Link Admin Dashboard provides real-time information you can use to monitor the ongoing health of your recipes and connections in D2L Link. Using the insights and analytics provided by the dashboard views, you can get ahead of potential issues, quickly troubleshoot and resolve issues, and visualize metrics for task usage. 
Accessing D2L Link
Note: You must enable the View D2L Link permission to access and view the D2L Link Admin Dashboard.
To access D2L Link 
From your organizational homepage, click Admin Tools.
Under Product/Tool Administration, click Manage D2L Link to open the D2L Link Admin Dashboard. 
Click the Projects tab to display all the D2L Link assets you have set up in collaboration with the D2L Link Integration and Automation Services team. 
Overview of the D2L Link Admin Dashboard
The dashboard main view provides the following:
Jobs graph: Provides a high-level view of the health of your recipes. It changes based on the filters you apply. 
Recipe details table: Provides more detailed information, including successful and failed jobs, the number of tasks run, and the most recent job. 
Plan usage section: Provides usage information based on their subscription plan. 
App connection overview: Provides a list of the changes to app connections over the previous 7 days. Note: The App connection overview does not respect date filters you apply on the dashboard. 
Each section of the dashboard provides operational metrics that help you obtain a complete view of the recipes in D2L Link.
Additional information
For additional information, refer to the Admin Dashboard page of Workado documentation. 
Note: Workato documentation includes recipe creation details which are not available within D2L Link; however, the information might be valuable when working with D2L Link Automation and Integration Services to design and build your integration. 



--------------------------------------------------


Viewing D2L Link Recipe Job Reports

Note: D2L Link is currently only available in English and is limited to the US-East geographic area for data hosting. 
A Recipe contains events that trigger actions. When a trigger event runs the associated series of actions, the recipe creates a job. Each job contains a unique trigger event and performs the recipe workflow based on the trigger. D2L Link provides details about the completion of these jobs in the recipe, such as the steps that were completed, and the input and output data from each step. These details appear on the recipe's Jobs tab. 
To access Jobs details for a recipe:
From your organizational homepage, click Admin Tools.
Under Product/Tool Administration, click Manage D2L Link to open the D2L Link Admin Dashboard. 
Click the Projects tab and select the project containing the recipe for which you want to view the jobs. 
With the recipe open, click the Jobs tab. 
On the Jobs tab, you can review the details for the job, including: 
Name
Description
Job ID
The unique identifier of the job.
Job start time
The time the job started.
Recipe version
The version of the recipe used by the job.
Status
The status of the job. For more information, refer to Job statuses
Description
The description of the recipe
Runtime user connection
The specific connections (if used) by the job. For more information, refer to Runtime User Connections.
Duration
The amount of time taken by the job.
Tasks used
The total number to tasks used by the job
Rerun #
The number of the rerun.
Re-running a job
It is possible to re-run jobs when a job does not successfully complete because of an error. To re-run a job, submit a support request to D2L Support with details of the recipe and the Job ID. 
Additional Information
For more information, refer to the Recipe Jobs page of Workado documentation. 
Note: Workato documentation includes recipe creation details which are not available within D2L Link; however, the information might be valuable when working with D2L Link Automation and Integration Services to design and build your integration. 
 
 



--------------------------------------------------


About FeedbackFruits

FeedbackFruits is a suite of tools available as paid add-ons to licensees of the D2L Brightspace platform:
The Comprehension tool provides pedagogical guidance to instructors through the ability to share targeted study materials for learners annotate and discuss with each other. Instructors can monitor the learners' comprehension and refine their course materials to provide what the learners need, which in turn improves exams, group work, and other assignments. 
The Interactive Presentation tool promotes team-based learning and class interaction in real-time, customizing the information for all class settings. 
The suite of peer feedback tools, including Peer Review, Group Member Evaluation, Assignment Review, Skill Review, Automated Feedback, and Self-Assessment, use diverse media for quantitative and qualitative feedback. The activities center collaborative learning with structured peer interactions facilitated by tasks such as reflections and participation grading, to build flexible learning modes for diverse learners. 
Additional Resources 
FeedbackFruits on Brightspace IntegrationHub:
Assignment Review by FeedbackFruits
Automated Feedback by FeedbackFruits 
Comprehension by FeedbackFruits
Discussion on Work by FeedbackFruits
Group Member Evaluation by FeedbackFruits
Interactive Audio by FeedbackFruits
Interactive Document by FeedbackFruits
Interactive Presentation by FeedbackFruits
Interactive Video by FeedbackFruits
Peer Review by FeedbackFruits
Quiz by FeedbackFruits
Skill Review by FeedbackFruits
Discussion on Topic by FeedbackFruits
Self Assessment by FeedbackFruits
Team Based Learning by FeedbackFruits
D2L Partner Profile: FeedbackFruits
Note: FeedbackFruits tools are available for purchase as built in LTI 1.3 integrations for Brightspace for Core Brightspace clients. For more information, refer to How to configure LTI 1.3 for Brightspace/D2L.



--------------------------------------------------


GO1 Digital Training Content

GO1 online training content is available for purchase through D2L, for use in Brightspace.
Your organization can access employee training resources for professional development, compliance, onboarding, and business training from the world’s largest aggregator of online training. The digital learning provider offers a single simple premium subscription to over 100 top publishers from around the world, offering content regionally across North America, Latin America, Asia Pacific, the UK and EMEA. GO1 operates as an extension to your HR or L&D organization, helping to ensure the success of your training program. All purchased courses are SCORM-compliant and can be added to Brightspace as a SCORM package.
Add content from GO1 to Brightspace
 Before you begin: Ensure your organization receives the appropriate licensing and permissions for each GO1 course prior to uploading the content into Brightspace. 
Add a SCORM or xAPI package to the Content tool
Add the SCORM content to Lessons
 



--------------------------------------------------


About Google Workspace

Google Workspace is an integration that gives users access to their Google tools within Brightspace. The Google Workspace widget displays users' emails, events, and documents on their Brightspace homepage. Learners can collaborate on activities using Google Docs and submit files to Assignments or ePortfolio using the Google File Picker. Instructors can easily share meeting invitations by inserting a Google Meet link in an Activity Feed post, or any other tool that supports Quicklinks.
As an administrator, you can manage the link between a Google account and any Brightspace user account. If your organization has preexisting Google accounts, you can connect a Google account to a Brightspace user. If your organization does not have preexisting Google accounts, you can use Brightspace to create them. You can also remove links between Google accounts and Brightspace user accounts.
Important: users can no longer perform the following Google Workspace actions while impersonating another user:
Link or unlink Google accounts
Use the Google File Picker
Access Google Drive content topics
Use the Google Workspace Widgets
Use the Google Calendar Widget




--------------------------------------------------


Manage Google Workspace accounts

Create a new Google Workspace account
By default, when Google account creation is initiated from Brightspace, Google accounts can be generated using the Brightspace user name.
If a Brightspace user name is already taken in Google Workspace, a random, unique four-digit number is appended to the Brightspace user name. If this attempt is unsuccessful, an error message notifies you that a unique account name cannot be created. You must create a user name manually through the Google Workspace server, then access the Google Workspace Administration page again to link it with a Brightspace user account.
From the  Admin Tools menu, or in the Organization Related section of the Admin Tools widget, click Google Workspace Administration.
On the Manage Users page, click New User.
On the New Google Workspace Accounts page, select the Brightspace user(s) from the list on the New Google Workspace Accounts page that you want to create Google Workspace accounts for.The list displays all users, including those who already have a Google Workspace account linked to their Brightspace account.
Review the user names for which you want to create Google Workspace accounts in the Review Selected Items area. To remove a user name from the list, click the  icon for that user.
To configure password options, in the Create Password for Selected Users area, choose one of the following options:Generate a unique random password for selected users - selecting this radio button creates a unique random password for each user.The system only generates passwords for users configured to receive email. If users aren't configured to receive email, there is no way for them to receive a system-generated password, or for the administrator to find out what the system-generated password is. Therefore, administrators should set a manual password if users are not configured to receive email and communicate the password to the user using the method of their choice. For information on how to configure users to receive emails via Brightspace email addresses, see D2L email configuration options.Manually select a password - selecting this radio button enables you to manually set a password for all users selected for Google Workspace account creation.Note:In both cases, users change their password after they authorize their account through the Google Workspace server.
In the Account Link Options area, select the Email Notification check box to send an automatic notification to the user's Brightspace email containing the user's Google Workspace username. 
Click Create Account.
Link an existing Google Workspace account
From the  Admin Tools menu, or in the Organization Related section of the Admin Tools widget, click Google Workspace Administration.
On the Manage Users page, click Link User.
On the Link to Existing Google Workspace Account page, select a single Brightspace user from the list to link to an existing Google Workspace account.The list on the Link to Existing Google Workspace Account page displays all users, including those who already have a linked Google Workspace account.
In the Google Workspace Account area, enter an existing Google Workspace email address.
In the Account Link Options area, select the Email Notification check box to send an automatic notification to the user's Brightspace email containing the user's Google Workspace username.Note: The user must be configured and have the appropriate permissions to receive the notification that their account has been linked.
Click Create.
Bulk import Google Workspace account links
The bulk import functionality uploads a CSV file that contains links between Brightspace user accounts and existing Google Workspace accounts. The Google Workspace accounts you supply in the CSV file must already exist; otherwise, an error displays and the bulk import tool continues to the next action.
From the  Admin Tools menu, or in the Organization Related section of the Admin Tools widget, click Google Workspace Administration.
Click Bulk User Import.
Click Choose File, select a CSV file, and click Open.
In the Account Link Options area, select the Email Notification option.
Click Next.You can view the importing progress of the CSV file on the Process File page. If the import tool encounters errors in the CSV file, it generates an error report summary. You can view the error report summary by clicking View Error Report on the Process File page.
Click Done.
Activate or deactivate a link between a Brightspace and Google Workspace account
If the link to a user's Google Workspace account is activated (restored), the user can access Google data from Brightspace automatically, via the Google Workspace widget on the My Home or course home page. If the link to a user's Google Workspace account is deactivated (suspended), the user must enter a password to reactivate the link and access their Google data from Brightspace.
From the  Admin Tools menu, or in the Organization Related section of the Admin Tools widget, click Google Workspace Administration.
On the Manage Users page, select the check box(es) for the link(s) you want to activate or deactivate and click Restore Accounts or Suspend Accounts.Important: By clicking Restore Accounts or Suspend Accounts, you are activating or deactivating the user’s Google Workspace account, in addition to activating or deactivating the link.
Click Yes.
Delete a link between a Brightspace and Google Workspace account
This action deletes the link between the accounts, not the accounts themselves.
From the  Admin Tools menu, or in the Organization Related section of the Admin Tools widget, click Google Workspace Administration.
On the Manage Users page, select the check box for the account link that you want to delete.
Click Delete.




--------------------------------------------------


Configure Google Workspace settings

Google Workspace-specific configuration variables are configured from the Settings page, eliminating the need to use the Config Variable Browser to set those configuration variables.
Important: To avoid overriding Google Workspace settings, D2L strongly recommend that you do not change settings from the Config Variable Browser.
From the Admin Tools menu, or in the Organization Related section of the Admin Tools widget, click Google Workspace Administration.
Click Settings.
Modify the following settings as needed:Under Google Client Ids, the Client ID and Client Secret fields allow users to automatically authenticate their Google Workspace for Education account without needing any secondary intervention on the administrator's part. For more information on setting these field values, refer to Set up an API project and service account for OAuth 2.0 in Configuring Google Workspace within the Google domain.Under Tab Visibility, the Gmail, Google Calendar, and Google Drive options allow administrators to choose which tabs are visible in the Google Workspace widget. This provides control over the Google Workspace functionality that is available to users. If an administrator hides a tab in the Google Workspace widget, that tab option is greyed out in the Tab Visibility settings.Under Document Submission Options, select one of the options: Export as PDF option requires that Google Document submissions are exported as PDF files. This is useful for preventing users from editing Google Documents after submitting them and enables tools like Turnitin to perform document analysis.Export as DOCX, PPTX, or XLSX provides additional options for Google Document submissions. Under Workspace Access:The Full access option allows administrators to use a service account and Google Directory API to manage Google Workspace accounts.The Read-only access to Google Directory API option allows administrators to enable read-only access to Google Directory API. Enabling this setting removes the NewUser, Suspend Accounts, and Restore Accounts options on the Manage Users page in Google Workspace Administration.The No service account option enables administrators to integrate Google Workspace with Brightspace without the need to configure a service account on their Google Workspace.Under Provisioning User Settings, the Provisioning User Type options allow administrators to specify how Google Workspace user accounts are managed. For more information on these options, refer to Google Workspace account management scenarios.
Click Save.
Perform a Google API health check
To diagnose potential issues with the Google Workspace integration, you can perform a Google API health check to determine if your Client ID is configured properly and if the Google APIs are available.
Important: The health check is not available if the Workspace Access setting has been set to No service account.
From the  Admin Tools menu, or in the Organization Related section of the Admin Tools widget, click Google Workspace Administration. On the Manage Users page, click API.
If there is an issue, for example a Google API is not available, click Details for more information.
Click Close.




--------------------------------------------------


Configuring Google Workspace within the Google domain

You must register at least one domain (for example, myuniversity.com) with Google Workspace for Education. Google Workspace for Education has web services exposed, which can be used to manage users and get data. 
Note: Google Workspace 1.3 does not support @gmail.com addresses at this time. It requires the use of a Business or Educational Google Workspace domain.
Register domains with Google Workspace
The Google Workspace integration supports multiple domains. For example, by organizing a Google Workspace environment into sub-domains, schools within an organization can continue to use their own domain names for their email and logins. To add multiple domains, D2L recommends managing them with a single Google Workspace account.
Each domain must be registered with Google Workspace before you add them to Brightspace.
Add domains to Brightspace
When you add a domain, Brightspace verifies that the service account credentials provided have access to that domain. If the service account has not been set up or validation of the service account fails, you are prompted to enter or resolve your service account information.
From the  Admin Tools menu, or in the Organization Related section of the Admin Tools widget, click the Google Workspace Administration link.
Click Manage Domains.
Click Add Domain and enter the domain name, for example, myuniversity.com.
Click Save. The new domain is added to the domain list.
To configure existing domains, select a domain from the domain list and choose an option: Remove Domain, Edit Domain, or Set as Default.
Set up an API project and service account for OAuth 2.0
To use OAuth 2.0 with the Google Workspace integration, you must set up the following:
An API project: Google Workspace requires the configuration of an API project in order to leverage functionality and additional security.
A service account: By using a service account's credentials, Brightspace can make authorized calls to Google APIs on behalf of users to perform authentication and authorization. This mechanism improves the security of the Google Workspace integration.
Step 1: Create an API project
These steps are for creating a new API Project. If you have an existing project that you want to use, skip this section. 
Browse to the Google Developers Console and log in with your Google administrator credentials.
For information on how to create a project, refer to Create, shut down, and restore projects in the API Console Help.
Enable the Drive API, Calendar API, Gmail API, and Admin SDK. For information on enabling APIs, refer to Enable and disable APIs in the API Console Help.
Step 2: Configure the authorization end point to work with your API project
In order for auto-authorization to work, you need to create a new Web Application client ID. This allows users to automatically authenticate their Google Workspace for Education account without needing any secondary intervention on the administrator's part. This is the standard configuration for Google Workspace.
Ensure your API project is open in the Google Developers Console.
If the APIs & services page isn't already open, navigate to the console left side menu and select APIs & services. Click Credentials, click Create Credentials, and then select OAuth client ID.Note: You might be asked to configure your Google consent screen. Users might see this when initially configuring the connection between their Google accounts and Brightspace. Refer to the User consent section in Setting up OAuth 2.0 and configure the consent screen as needed.
For the Application type, select the Web application option.
Enter a name for your web application.
In the field for authorized JavaScript origins, enter your D2L domain.
In the field for authorized redirect URLs, change the end point to [D2L Domain]/d2l/im/gapps/pages/auth/Signin.
Create the client ID.
Make note of the following values:client IDclient secret
In Brightspace, on the Google Workspace Administration page, click Settings.
Under Google Client IDs, add the Client ID and Client Secret values.
Step 3: If you did not select the No Service account option from the Workspace Access area, configure the service account
To use the Admin SDK to perform administrator tasks, you need to configure a service account. The service account allows you to securely create, link, and deactivate users with the Google Workspace integration.
Ensure your API project is open in the Google Developers Console.
For information on how to configure a service account, see the Service accounts section in Setting up OAuth 2.0 in the API Console Help. For additional information, refer to Using OAuth 2.0 for Server to Server Applications and Service accounts in the Google Identity Platform. 
To easily identify your service account for the Brightspace web application, create a new service account.D2L recommends that you enter a service account name that is the same as the web application name.D2L recommends that you choose the Project Owner role.
Choose to generate the key as a standard P12 file and save it to your local drive.
Create the service account key.
Make note of your private key's password and close the dialog box.
In the Google Developers Console, click the link to take you to the area where you can manage your service accounts.
Click on the edit icon for your service account and navigate to the Manage details tab.
Under Advanced settings and Domain-wide Delegation, copy your Client ID and click on View Google Workspace Admin Console. Then, log in to your Google Workspace administrator account and ensure that domain-wide delegation is enabled for your service account. For additional information, refer to Delegating domain-wide authority to the service account.
For the service account you created, click the link to view the service account details:
Service account (email address), which is entered on the Google Workspace Service Account page in Brightspace, in the Service account email field.
Unique ID/Client ID, which is entered into the domain security settings for the API scopes access.
Step 4: Allow the service account to access your Google Domain
For the service account to perform user actions against your domain, you must grant it access.
Browse to https://admin.google.com and log in with your Google Workspace administrator account.
For information on how to allow the service account to access your Google Domain, refer to Control API access with domain-wide delegation in the Google Workspace Administrator Help. Go to Security > Access & data control > API Controls and then in the Domain wide delegation section select Manage Domain Wide Delegation.
Click Add new and in the Client Name field, enter your service account Unique ID/Client ID. Your Unique ID/Client ID is from the Service Account Client where you generated the P12 key.
Before changing Read-only Access to Google Directory API, review your organization policy.
Do one of the following:If you have enabled Read-only access to Google Directory API in Google Workspace Administration settings, then add the following API scopes to the One or More API Scopes field as a comma-separated list:https://www.googleapis.com/auth/admin.directory.user.readonly, https://apps-apis.google.com/a/feeds/domain/, https://www.googleapis.com/auth/gmail.readonly, https://www.googleapis.com/auth/calendar.readonly, https://www.googleapis.com/auth/drive.readonlyNote: The Scope for only retrieving users or user aliases (view-only) is: https://www.googleapis.com/auth/admin.directory.user.readonly.If you have not enabled Read-only access to Google Directory API in Google Workspace Administration settings, then add the following API scopes to the One or More API Scopes field as a comma-separated list: https://apps-apis.google.com/a/feeds/domain/, https://www.googleapis.com/auth/admin.directory.user,https://www.googleapis.com/auth/gmail.readonly, https://www.googleapis.com/auth/calendar.readonly, https://www.googleapis.com/auth/drive.readonlyNote: The Global scope for access to all user and user alias operations (view and manage) is: https://www.googleapis.com/auth/admin.directory.user
Click Authorize.
Step 5: Configure a service account in Brightspace
From the  Admin Tools, or in the Organization Related section of the Admin Tools widget, click the Google Workspace Administration link.
Click Service Account.
Enter your Google Workspace domain administrator's login name.
Enter your Service account email.
Enter your P12 Password.
In Upload P12 Key File, click Choose file and attach the P12 file you saved to your local computer.
Click Save.
For more information, refer to Control which third-party & internal apps access Google Workspace data.



--------------------------------------------------


Configure administrator permissions

Log in to your Google Workspace dashboard (https://admin.google.com/<your_domain_name>/AdminHome) with your Google Workspace administrator name and password.
Click Admin roles.
Make sure a role exists with the following permissions (this role will be assigned to Google Workspace domain administrator):
Under Admin Console Privileges:Organization Units > ReadUsers > ReadUsers > CreateUsers > Update > Move UsersUsers > Update > Rename UsersUsers > Delete
Under Admin API Privileges:Users > CreateUsers > ReadUsers > Update (All)Users > Update Custom AttributesUsers > Delete
Click on the role with the above permissions, then click on Admins assigned.
Click on Assign members then search for and assign the Brightspace administrator (the user whose email address will be entered for the Google Workspace domain administrator's login name).




--------------------------------------------------


Google Workspace configuration variables

For all Google Workspace configuration variables, please refer to the 3rd Party configuration variables topic.



--------------------------------------------------


Google Workspace permissions

From Admin Tools > Roles and Permissions > Google Workspace, grant the following permissions as needed:
View Google Workspace widget: Allows users to see the tabbed widget with links to the user's most recent emails, events, and documents in their Google account.
View Access Google Workspace widget: Allows users to see a summary widget that provides links to the user's Google Workspace inbox, calendar, and document area.
Can add files from managed Google account: Allows users to browse Google documents stored on Google Workspace and add them from the Add a File page in Brightspace. For example, you can submit a Google document to an assignment. To access Google Docs, users must authorize the Google Workspace integration first.
Manage and Administer Google Users: Allows administrators to create Google Workspace accounts and link Brightspace user accounts to them, edit links between Google Workspace and Brightspace user accounts, and delete links between Google Workspace and Brightspace user accounts.
Activate or Deactivate Any Google Workspace Account: Allows administrators to activate or deactivate the link between any Google Workspace and Brightspace user account, and the accounts themselves.
Manage and Administer Google Workspace Domains: Allows administrators to add, remove, edit, and set default domains in Google Workspace Administration in Brightspace.
Can create Google Meet video meetings: Allows instructors to create meetings using Google Meet.
Can add files from a personal Google account: Allows users to browse Google documents stored on a personal Google account and add them from the Add a File page in Brightspace. For example, you can submit a Google document to an assignment. To access Google Docs, users must first authorize Brightspace to access their Google Drive.




--------------------------------------------------


Add Google Workspace widgets to org and course homepages

Make the Google Workspace widget visible on the org homepage
From the  Admin Tools menu, or in the Organization Related section of the Admin Tools widget, click Homepage Management. Click the Homepage that the org homepage uses.
In the Widgets section, click Add Widgets.
Select one of the following check boxes:Access Google Workspace to add the small widget with quick links to Google Workspace.Google Workspace to add the large widget that details information about emails, calendar events, docs, and provides links to Google Workspace.
Click Add.
Drag and drop the widget where you want it to display on the homepage.
Click Save and Close.
Make the Google Workspace widget visible on a course homepage
In the course that you want to display Google Workspace, click Course Admin.
Under Site Setup, select Homepages.
Click the Homepage that the course homepage uses.
In the Widgets section, click Add Widgets.
Select one of the following check boxes:Access Google Workspace to add the small widget with quick links to Google Workspace.Google Workspace to add the large widget that details information about emails, calendar events, docs, and provides links to Google tools.
Click Add.
Drag and drop the widget where you want it to display on the homepage.
Click Save and Close.




--------------------------------------------------


Google Workspace account management scenarios

Integrate Google Workspace with Brightspace without a service account
Administrators can integrate Google Workspace with Brightspace without a service account. As a result, administrators can integrate multiple Google Workspaces with Brightspace.
Note: If you integrate Google Workspace with Brightspace without a service account, users will not be able to create their own Google Workspace accounts.
From the Admin Tools menu, under Organization Related, click Google Workspace Administration > Settings.
In the Workspace Access area, select the No service account radio button.
Click Save.
Users create their own Google Workspace accounts
Administrators can enable users to self-create their Google Workspace accounts. The user's default Google Workspace account name is the same as their Brightspace username.
From the Google Workspace Administration page, click Settings, and under Provisioning User Settings, select Create Account.Note: If you integrated Google Workspace with Brightspace without a service account, this user provisioning functionality is not supported.
Set a password policy for user passwords in the d2l.3rdParty.GoogleApps.PasswordRegex (e.g.: "^.{8,30}$") configuration variable.
Ensure that users have the View Google Workspace widget and View Access Google Workspace widget permissions so they can see the widgets. You must have one of the widgets enabled, depending on the needs of your organization.
Ensure that your Google Workspace widgets are enabled.
Users link their Google and Brightspace accounts
If you create accounts outside of Brightspace and users know their Google username and password, they can link their Brightspace and Google accounts themselves. Users can link their accounts by entering their user name and password once in one of the Google Workspace widgets.
From the Google Workspace Administration page, click Settings. Under Provisioning User Settings, select Create Link.
Ensure the users have the View Google Workspace Widget and View Access Google Workspace Widget permissions so they can see the widgets. You must have one of the widgets enabled, depending on the needs of your organization.
Ensure that your Google Workspace widgets are enabled.
Administrators create user Google Workspace accounts
A Google Workspace administrator can create Google Workspace accounts and associate them with Brightspace users from within Brightspace. An administrator can create many Google Workspace accounts by performing a bulk creation operation from within Brightspace using the Google Workspace administration interface.
Set a user password policy in the d2l.3rdParty.GoogleApps.PasswordRegex (e.g.: "^.{8,30}$") configuration variable.
Ensure the administrator has the Manage and Administer Google Users permission that allows managing and administering Google Workspace users.
Optionally, go to the Google Workspace Administration page, click Settings, and select No Access under Provisioning User Settings if you don't want learners to have the ability to create a Google account.
Administrators link user accounts
A Google Workspace administrator can reset account links and assign new account links within Brightspace. If an administrator must link many Google Workspace accounts, D2L recommends performing a bulk link operation from within Brightspace using the Google Workspace administration interface.
From the Google Workspace Administration page, click Settings. Under Provisioning User Settings, select No Access.
Ensure that the administrator has the Manage and Administer Google Users permission within Brightspace that allows managing and administering Google users.
Administrators have read-only access to Google Directory API
A Google Workspace administrator cannot create new users, suspend accounts, or restore accounts.
Administrators can give their service account the ReadOnly API route via the Google Domain Admin Console by entering the following API route: https://www.googleapis.com/auth/admin.directory.user.readonly along with any other routes you want to use into Scopes.
After the ReadOnly API route is set up in the Google Domain Admin Console, you must enable the Read-only access to Google Directory API radio button on the Google Workspace Administration > Settings page. This limits the options on the Manage Users page in Brightspace:                From the Admin Tools menu, under Organization Related, click Google Workspace Administration > Settings.In the Workspace Access area, select the Read-only access to Google Directory API radio button.
Click Save.




--------------------------------------------------


Google Workspace usage scenarios

Learners use Google Docs to make assignment submissions
To access this feature, learners need either the Can add files from managed Google account permission or the Can add files from a personal Google account permission.
Learners can add files from both their personal and Google Workspace accounts with the same file picker.
Learner Google Document submissions are converted to PDFs
Administrators can specify that Google Document submissions are exported as PDF files. This is useful for preventing users from editing Google Documents after submitting them and enables tools like Turnitin to perform document analysis.
From the Google Workspace  Administration page, click Settings, and under Document Submission Options, enable Export as PDF.
Learners view expanded Google Workspace widget
You can place a tabbed widget on any Brightspace homepage that allows a user to view their unread emails, upcoming calendar events in the next seven days, and a list of documents in their Google Workspace account. The user can determine which tabs to view.
To access this widget, learners need the View Google Workspace Widget permission.
Learners view summary Access Google Workspace widget
The summary widget is more compact than the tabbed widget, so it's ideal for pages with limited available screen space. You may want to place the tabbed widget on the organization's homepage and the summary widget on a course homepage.
To access this widget, learners need the View Access Google Workspace Widget permission.
Learner access to tabs in the Google Workspace widget
Administrators can choose which tabs are visible in the Google Workspace widget. This allows you to control the Google Workspace functionality that is available to users.
From the Google Workspace Administration page, click Settings, and under Tab Visibility, configure the following options:
Mail
Google Calendar
Google Drive
If an administrator hides a tab in the Google Workspace widget, that tab option is grayed out in the Tab Visibility settings.



--------------------------------------------------


Troubleshooting the Google Workspace integration

Why can't I add a new user, or restore or suspend accounts?
In Google Workspace Administration, on the Manage Users page, if the New User button isn’t available, you might not have the required access capabilities. If you have the Read-only access to Google Directory API option selected in Settings and if you have added the Read-Only Directory API scopes (see Step 4: Allow the service account to access your Google Domain in Configuring Google Workspace within the Google domain), you won’t be able to see the New User button. You must be set up for full access to create a new user.
Similarly, you must have Full Access selected in Workspace Access within Settings and have the full access Directory API scopes added to be able to restore accounts or suspend accounts.
D2L recommends reviewing your organization’s policy before changing the access permissions for the Google Directory API and the Directory API scopes.
Where can I find more information?
For more information on the Google Workspace integration, see Common Questions in the Google Administrator Help.



--------------------------------------------------


Creating a meeting using Google Meet

Instructors can create and insert meetings using Google Meet™ in all places where Quicklinks are supported within Brightspace (Activity Feed, Announcements, Calendar, Email, and Discussions, to name a few.).
Create or edit an Activity Feed post from your course homepage
When creating a new post, click Attach and then Attach Link to Existing Activity from the icon buttons at the bottom of the post.
When updating an existing post, click Attach Link to Existing Activity from the icon buttons at the bottom of the post.
To create a Google Meet meeting in Announcements
In the body of an announcement, click Insert Quicklink.
Select Google Meet.
Click Publish.
To create a Google Meet meeting in Email
Within the body of an email message, click Insert Quicklink.
Select Google Meet.
Add an attachment or any other information and click Send.




--------------------------------------------------


Set up Google LTI Integrations

Ensure you have setup and validated your G Suite domain, and generated LTI credentials from Google's Assignments Admin Console prior to following these steps.
Determine your G Suite account credentials and log in to Brightspace as an administrator.
Open the Admin Tools menu and select External Learning Tools.
Select Manage Tool Providers (Legacy).
Click New Tool Provider.
On the new tool provider screen, enter the following details:
Launch Point: assignments.google.com
Version: 1.1
Oauth Signature Method: HMAC-SHA1
Secret: your secret code
Tool consumer information: enable Use custom tool consumer information instead of default
Key: your LTI key
Name: the name you want to use for your organization
Description: any description you want
Contact Email: the email from your organization you want to use
Visibility: enable Allow users to use this tool provider.
Security Settings: enable as neededSend tool consumer information to tool providerSend context information to tool providerSend course information to tool providerSend course section  information to tool providerSend LTI user ID and LTI role list to tool providerSend user name to tool providerSend user email to tool providerSend system Org Defined ID to tool providerSend link title to tool providerSend link description to tool provider
Make tool provider available to: select any courses you want to have access to the integration.

Click Save and Close.

Set up Google Assignments
Use  the following steps to create the necessary remote plugins:
Log in to Brightspace as an Administrator.
From the Admin Tools menu, select Remote Plugins.
Select New Remote Plugin.
On the following new remote plugin screen, provide the following details:
Plugin Type: Quicklink (CIM).
Name: Google Assignments.
Launch Point URL: https://assignments.google.com/lti/a.
LTI Key: leave field empty.
LTI Secret: leave field empty.
Small Icon URL (18x18): https://www.gstatic.com/prof/logo_assignments_16dp.png.
Large Icon URL (60x60): https://www.gstatic.com/prof/logo_assignments_64dp.png.
Sharing: Use the same sharing rules as previously used in your tool provider.
Note: If you are missing the plugin type option in your instance ensure the d2l.Tools.Lti.ContentItemMessaging.IsEnabled configuration variable is set to ON. 
Set up File Embed
Instructors can use the Google File embed integration to embed files from their Google Drive into course content. Use the following steps to create a new remote plugin for the file embed service Google offers. D2L recommends setting up Insert Stuff if you intend on enabling learners to submit Google Drive documents as their assignment submissions.
Log in to Brightspace as an Administrator.
From the Admin Tools menu select Remote Plugins.
Click New Remote Plugin and provide the following details:Plugin Type: Quicklink (CIM) and/or Insert Stuff (CIM).Name: Google File Embed.Launch Point URL: https://assignments.google.com/embed/lti.LTI Key: leave field empty.LTI Secret: leave field empty.Small Icon URL (18x18): https://www.gstatic.com/images/branding/product/1x/drive_16dp.png.Large Icon URL (60x60): https://www.gstatic.com/images/branding/product/1x/drive_64dp.png.Sharing: Use the same sharing rules as previously used in your tool provider.
 



--------------------------------------------------


Google Assignments integration

Instructors can use the Google File embed integration to embed files from their Google Drive into course content. 
Using the Google Assignments integration, instructors can create new assignments but cannot select from previously created assignments. Google supports the copying LTI links from one course to another.
Using the Classic Content Experience
Navigate to your course and open the Content tool.
Create or open an existing Module.
Click Existing Activities and select Google Assignments
Add the details of the assignment that you are creating and click Create.
You are returned to the content area of your course and the new assignment link is visible in the module you were working in.
New Content Experience (Lessons)
Navigate to your course and open the Content tool.
Create or open an existing unit. 
Click Add Existing and select Google Assignments.
Add the details of the assignment  that you are creating and click Create.
You are returned to the content area of your course and the new assignment link is visible in the unit you were working in.
Submit to a Google Assignment from course content
If you instructor has added Google Assignments to Content, use the following steps to submit to the assignment.
 Log in to your Brightspace account and select a course.
From the course homepage, click Content.
Using the Table of Contents, locate the assignment you want to complete and click on it.
In Google's User Interface, review the assignment details and select a file to submit.
Click Add.




--------------------------------------------------


Google Analytics integration

The Google Analytics integration allows organizations to collect browsing information from Brightspace using their Google Analytics account. Administrators enter a Google Analytics ID into Brightspace on the Google Analytics Settings page, at which point the integration then adds the Google Analytics scripts on each page in Brightspace. The data is sent to the linked Google Analytics account for analysis. 
There is also an option to add your Google Tag Management ID and gather information using Google Tag Management. All data collected by Google Analytics and Tag Management is anonymous.
Note: This integration does not support interactions within iFrames.
Set the Google Analytics configuration variable
To enable Google Analytics integration, you must first enter your Google Analytics ID into the Google Analytics configuration variable using the Config Variable Browser.
Note: The Config Variable Browser can be accessed from the Admin Tools menu.
Enable the Google Analytics permission
The Google Analytics > Manage Google Analytics permission is required at the Organization level for administrator accounts to access the Google Analytics Settings page in Brightspace.
To enable the Manage Google Analytics permission

From the Admin Tools menu, click Roles and Permissions.


Under Filter by Role, select Administrator.


Under Filter by Tool, select Google Analytics.


In the Organization column, enable Manage Google Analytics.

Administrators can manage Google Analytics at the org level.
Set up Google Analytics integration
From the Admin Tools menu, select Google Analytics.
Enter your Google Analytics ID and your Tag Manager ID.
Click Save.
Google Analytics integration is now set up for your Brightspace instance.



--------------------------------------------------


About the IPSIS Platform

The Integration Pack for Student Information Systems (IPSIS) platform is an integration platform in Brightspace that provides a user interface to allow you to import information from your organization's information system to Brightspace.
Once that information is imported into Brightspace, you can continue to  update your information system and import that information to Brightspace using the IPSIS platform.
IPSIS platform is the core business rules management layer controlling interactions with Learning Platform and Brightspace. It also provides the framework used by the IPSIS Administration interface, IPSIS Section Associations interface and any implemented Adapters.
The IPSIS platform consists of:
Extensibility layer: A collection of extensible handler interfaces is included with the platform. Each of these interfaces enables configuration and extensibility for actions against Learning Platform and Brightspace. For example, Create User or Delete Course.
Handler implementations: Implementations of the extensible handler interfaces are referred to as handlers. These provide the configurable and extensible business rule implementations.
Bulk Background Service: The bulk background service performs any processing of bulk integration jobs, and initiates reports back to the SIS when necessary.
Enrollment Background Service: The enrollment service performs any enrollment updates against Brightspace that are initiated outside of a standard enrollment request. For example, when two Offerings are merged in IPSIS Section Association, the enrollments are synchronized and propagated by the Enrollment Service.
Figure: An overview of the relationships between an SIS, a source system, and the IPSIS platform in Brightspace
IPSIS Terminology

CSV File: A text-based file that approximates a table of data through the use of commas to separate columns. In such files, a value in any one column must not have a comma as part of the text.


SFTP: A method of uploading or downloading files to a server through an encrypted channel. You will be provided with the credentials once you create your integration.


Org Unit: The standard building block of Brightspace. Org Units are organized into an Org Structure, and can consist of multiple Org Unit Types (for example, Department, Semester, or Course Offering). Each Org Unit has an Org Unit Code used to identify it between IPSIS and your SIS.

Supported information systems
The IPSIS platform integrates with the following common types of information systems:
Student Information Systems (SIS): used by educational organizations to manage students, courses, and enrollments.
Human Resource Systems (HRIS): used by corporate organizations to manage employees and their data.
Learner Information Systems (LIS): used by educational organizations to manage the registration of student enrollments.
Supported source systems
The IPSIS platform integrates student information systems (SIS) with Brightspace using various source systems. A source system can come in the form of standardized specifications. The following source systems are an example of some supported by the IPSIS platform:
D2L Standard CSV: integrates with SIS/HRIS systems by using a standard Comma-Separated Value (CSV) file created by D2L.
Ellucian ILP: integrates with Banner or Colleague systems, based on LIS specifications.
OneRoster: an IMS Global Learning Consortium specification created for securely sharing class rosters and related data between K12 student information systems (SIS) and Learning management systems such as Brightspace.OneRoster CSV:  Supports spreadsheet-style (CSV) export-import actions. With OneRoster, schools pave the way for digital resources for teaching and learning and eliminate problems before they happen.OneRoster REST:   Supports direct system exchanges using REST API’s.
LIS v2.0 Adapter: integrates with information systems that support the IMS Global Learning Consortium's LIS specification.
 The IPSIS user interface in Brightspace
You can administer IPSIS integration with an SIS directly from Brightspace. These tools are available from the Admin Tools menu in Brightspace: 
IPSIS Administration: an interface in Brightspace used for configuring and reviewing the status of SIS integrations with Brightspace.Important: There are two versions of IPSIS Administration:IPSIS Administration (Plug & Play UI): the current version implemented in Brightspace 10.7.2. Refer to the About IPSIS Administration (Plug & Play UI) in Brightspace topic for details.IPSIS Integration 1.0 (non-Plug&Play): a legacy version of IPSIS Administration in use prior to Brightspace 10.7.2. Refer to the About IPSIS Integration 1.0 (non-Plug & Play) topic for details.
IPSIS Section Association: an interface in Brightspace used to manually manipulate relationships between enrollable courses or sections in an SIS and course offerings in Brightspace. Refer to the About the IPSIS Section Association topic for details.




--------------------------------------------------


Enable the IPSIS Platform in Brightspace

Collaborate with a D2L Implementation Consultant to set up and configure the IPSIS Platform in Brightspace.
 Enable IPSIS Administration and IPSIS platform
Before you can assign IPSIS role permissions and access IPSIS Administration, you must turn on the IPSIS Administration and IPSIS Platform tools.
To enable IPSIS Administration and IPSIS platform
From the Admin Tools menu, click Organization Tools.
On the Tool Availability page, enable IPSIS Administration and IPSIS Platform.
Configure IPSIS role permissions for administrators
Tip: You can adjust these permissions for specific roles.  For example, you can set a certain role to be able to do everything, but manage IPSIS admin configuration options. A super administrator may have all permissions, but an administrator may have only the following permissions: Access IPSIS Administration Console, Manage IPSIS Bulk Operations, and Subscribe to Batch Job Notifications.
To set up a user role and assign role permissions
From the Admin Tools menu, click Roles and Permissions.
Create or edit a role for administering IPSIS.
From the Edit Permissions page, assign the following IPSIS Administration permissions:
Access IPSIS Administration console - allows users to see IPSIS Administration from the Admin Tools menu.Manage IPSIS Bulk Operations - allows users to upload files for processing and review log and troubleshooting details of past runs.View IPSIS Configuration Options - allows users to access the Configuration tab from IPSIS Administration.Manage IPSIS Configuration Options - allows users to edit settings from the Configuration tab, including SFTP account management.Subscribe to Batch Job Notifications - allows users to sign up for notifications when a batch job finishes.
Assign the following additional  permissions:User Information Privacy > See UsernamesUser Information Privacy > See Org Defined IDs Org Unit Type Editor > Can Create and Edit Org Unit Types Security > See Roles and Permissions
Important: For more information about the permissions an administrator requires to access IPSIS Administration and IPSIS Section Association, refer to the IPSIS Administration permissions  and the IPSIS Section Association permissions topics respectively.
Handler interface roles and permissions
Role settings
The LIS Adapter uses the IPSIS Handlers to interact with Brightspace. The adapter requires a user account (and role) with permissions that allow the adapter access to the org hierarchy.
It is recommended that you create a new role the following options:
Cascading Role: Enabled. The SIS user needs access to the entire org hierarchy. By having the user belong to a cascading role, the user is implicitly enrolled in every course. In some cases, enrollment, even an explicit one, is required to read various course properties or, for example, to read learner grades (for grade push/pull export).
Tool Behavior Options: None selected. IPSIS and the SIS user do not require special tool permission.
Class Display Options: None selected. Leaving these options unchecked ensures the SIS user does not appear in class lists.
Course Access Options:
Access inactive courses
Access past courses
Access future courses
Access all course sections
Access all course groups

Role permissions
When an IPSIS handler interacts with Brightspace, permissions are required for the user account interacting through the handler to Brightspace. These permissions would be equivalent to what they would need if an actual user were performing the same activity through the Brightspace User Interface.
The following permissions for the role are required:

Tool


Section


Permissions


Users


 


The User handlers currently do not require the user initiating the handler to have any specific Brightspace permissions.


Manage Courses


Organization


Has Access to the Manage Courses tool
Create Course Offerings and Templates


Manage Courses


Course Templates


Has Access to the Manage Courses tool
Create Course Offerings and Templates
Delete Course offerings and Templates
Change Locale
Force Locale
Change Name
Change Code
Change Course Path
Change Parent Org Units


Manage Courses


Course Offerings


Has Access to the Manage Courses tool
Create Course Offerings and Templates
Delete Course Offerings and Templates
Change Locale
Force Locale
Change Name
Change Code
Change Course Path
Change Start and End Dates
Change Status
Change Parent Org Units


Manage Courses


Course Sections


Has Access to the Manage Courses tool
Create Course Offerings and Templates
Delete Course Offerings and Templates
Change Locale
Force Locale
Change Course Path
Change Parent Org Units


Manage Courses


Other Org Units (Departments, Semesters, Groups, etc.)


Has Access to the Manage Courses tool
Create Course Offerings and Templates
Delete Course Offerings and Templates
Change Locale
Force Locale
Change Course Path
Change Parent Org Units


Course Management Console


 


 


Enrollments


 


The Enrollment handlers currently do not require the user initiating the handler to have any specific Permissions.


Grades


 


For a user to access the IPSIS Grades Export page in Brightspace and initiate exports of grades to an SIS, the user requires permissions at the course offering level.
See the Grades Tool
Enter Final Grades
Export Grades
Manage Grades
Manage Final Grade Properties (not required if only sending released grades)
To support the exporting of grades data where the SIS connects to Brightspace and pulls out the grades data, the SIS user (associated with the IPSIS Source System) needs the appropriate Brightspace grades permissions at the course offering level:
See the Grades Tool
Manage Final Grade Properties
Enter Final Grades
 

Configure source systems
A source system identifies a system to which IPSIS Platform may potentially communicate. Associated with a source system is information about the connection endpoint, access credentials, as well as details and status of integrations.
When a request is submitted to an adapter (LIS, for example), the request is authenticated using a username and password set up with the source system. The username is used to determine the source system that the request originated from. In order for this to work, you must configure your source system in the IPSIS Administration. 
Note: For more information about source systems, refer to the Supported source systems heading in the About the IPSIS Platform topic.
Configure org unit type mappings
The Org Unit Type Mappings configuration is required on a per source system basis to tell the integration what kind of org unit types in Brightspace are affected when requests are received from Student Information Systems.
A mapping is required for each Org Unit Type that is going to be accepted from the SIS so that the implementation knows which corresponding Org Unit Type will be used in Brightspace. Each record is associated with a specific source system.
Configure role mappings
The Role Mappings configuration is required on a per source system basis to tell the integration which Brightspace roles correspond with the roles in the SIS integration messages.
A mapping is required for each role that is going to be accepted from the SIS so that the implementation knows which corresponding role will be used in the LMS. Each record is associated with a specific Source System.
For instructions on configuring role mappings, refer to Adding and editing role mappings.
Configure IPSIS handlers
IPSIS handlers and translators are plug-ins. While a minimum set of plug-ins are required for IPSIS to function, by definition, a plug-in extends the capabilities of a system. The set of plug-ins delivered with IPSIS provide baseline functionality for integrating with a SIS. New plug-ins can be created to customize the behavior of a system.
Plug-ins, whether standard ones or ones created for an organization to customize system behavior, are picked and executed at certain times and in a certain order. When interacting with a SIS, the system looks for a list of plug-ins that are associated with that particular interaction.
Note: Care should be taken when configuring plug-ins. When configured incorrectly, data loss may occur. Always consult your D2L Integration Consultant before making changes.
Configure authentication
IMessageAuthenticator plug-ins take care of inbound and outbound authentication, and can be configured on the Configuration page of the IPSIS Admin Interface using Extension Point: IM.IPSIS.Security.IMessageAuthenticator,D2L.IM.IPSIS.Security - IPSIS.
Unlike handlers or translators which run in a sequential order, Message Authenticators simply enable or disable certain types of authentication. For instance, if the WS-Security message authenticator is not configured, no inbound or outbound messages attempting to use WS-Security can function, resulting in errors. The same applies to the basic auth authenticator. There are no side-effects to having multiple authenticators configured at the same time, and doing so enables IPSIS to authenticate messages of either type at any particular time.
For inbound authentication, the system runs every configured authenticator against the message, trying to validate its credentials. If no authenticator can properly understand the security on the message, the system throws an error.
For outbound authentication, the system tries to find authenticators which use the authentication type configured on the endpoint itself. If none are found, the system throws an error.
Therefore, a client should enable all authenticators that any inbound or outbound messages may use.
Configure logging
Currently, logging configuration must be performed by a D2L implementation consultant or technical support representative.
IPSIS utilizes the Learning Platform Logging Framework for logging errors, information, and debugging data.
As a general rule, organizations should not run with any assemblies configured for Debug unless explicitly directed by D2L. This is because debug logging is typically very intensive and slows down performance, and might increase the size of the log database significantly. It is a good idea to use the Sessions and Users option to configure logging only for the Source System User for a limited number of logins to help perform these actions safely.
IPSIS uses the following business rules when determining the level to log a message under:
Fatal: A Fatal log indicates a severe error to the D2L system, and is not a logging level that will be used in IPSIS.
Error: An Error log indicates an error with the system that the administrator should investigate. An unexpected event has occurred that may indicate system misconfiguration, and prevent the integration from working correctly. 
Warning: A Warning log indicates a problem with processing a particular request, but does not necessarily mean there is a misconfiguration or problem with the system. 
Info: Info logging indicates regular processing in the system. In IPSIS, Info logging provides information about the ongoing status of the integrations, but can be disabled without preventing the integration from functioning correctly. 
Debug: Debug logging provides detailed information for troubleshooting and testing. Debug logging provides information about where the state of processing is within the application and a high level trail of what has happened. Debug logging should not be so detailed as to provide a full trace, but rather to provide direction in addressing configuration errors, resolving bugs, and reproducing issues.
Production configurations and assemblies
During initial setup and troubleshooting periods, organizations might wish to bump the logging level for the IPSIS Assemblies to DEBUG. If doing so, however, ensure you disable DEBUG before going live, and regularly purge/archive the logging tables to prevent major database growth.
Production configurations
The following is a reasonable configuration for production:
Warn LevelD2L.IM.IPSIS.AdminD2L.IM.IPSIS.DefaultD2L.IM.IPSIS.Security
Info LevelD2L.IM.IPSIS.LIS (provides info messages on each service call)
Assemblies
The following assemblies are directly related to IPSIS, therefore logging messages from these assemblies is reflected in the System Error Log in the IPSIS Administration Tool.
IM PlatformD2L.IM.PlatformD2L.IM.Platform.DataD2L.IM.Platform.Logging
IPSIS AdministrationD2L.IM.IPSIS.Admin
IPSIS LIS v2.0 AdapterD2L.IM.IPSIS.LIS
IPSIS PlatformD2L.IM.IPSIS.DefaultD2L.IM.IPSIS.Security
IPSIS Section AssociationD2L.IM.IPSIS.SectionAssociation
Add a logging configuration
The Brightspace Logging Configuration tool is a powerful troubleshooting tool, but because it is primarily instance-wide, configurations affect all orgs. Since logging is shown in the IPSIS user interface, adding extra debugging and troubleshooting for a single org bloats the logs for other orgs. Although this is not a problem on a test environment and during initial configuration, it can be a problem on production, and when deploying the integration to a new organization on an already-live system.
The best way around this is to use the Sessions and Users configuration, which allows you to be very explicit about when the extra logging is applied. For IPSIS, for example, you can specify the source system username and the org in order to get additional debug data in a production environment for a single org without bumping the level for everyone. This also ensures that it reverts to the default after a specified number of logins (max 99), eliminating the chance of forgetting to turn debugging off.
From the Admin Tools menu, click Logging Configurations.
Click New Configuration.
On the Sessions and Users page, select the Configure by username option.
In the Username field, enter the username you have configured for IPSIS configuration.
To apply the logging to current sessions, select the Apply to current sessions with this username checkbox.
To set a number of logins that the current configuration is valid for, in the Future Logins field, enter a number.
To select an org unit, click the Select Org Unit button.
In the Logging Levels section, click the logging type you would like to use.
Click Save.
Set IPSIS configuration variables
You must set the configuration variables for the IPSIS Platform. For more information, refer to the IPSIS heading of the Integrations configuration variables topic.
Form elements
Require departments for course templates
This change is required if you create Course Templates that are not assigned to a Department.
Open Admin Tools and navigate to Form Elements > Create Course > Department.
Set the IsRequired flag to false.
Require semesters for course offerings
This change is required if you create Course Offerings that are not assigned to a Semester.
Open Admin Tools and navigate to Form Elements > Create Course > Semester.
Set the IsRequired flag to false.
IPSIS message security
The IPSIS platform supports two security formats for message authentication:
WS-Security
Http Basic Authentication
The way these security formats are used depends on whether the LMS is sending or receiving the message.
Inbound messages
Security on inbound messages is handled by the IPSISMessageInspector extension point which intercepts all WCF calls that are submitted to our endpoints. Messages are inspected to see if a valid authentication token is included.
The supplied credentials are then authenticated against Brightspace to verify that they belong to a valid Brightspace user. Once the user is verified, the system checks if the user is linked to a source system in IPSIS. If the user is linked to a source system, the request proceeds and all changes are linked with that source system and user.
Plug-ins that implement the IMessageAuthenticator interface retrieve the credentials from the message. Currently, there are two implementations of the IMessageAuthenticator interface: one for WS-Security and one for Http Basic Authentication. The message inspector checks for all configured plug-ins for the IMessageAuthenticator interface and iterates through them until one of the plug-ins finds the credentials. Once a plug-in has found credentials, either the request is allowed through if the credentials are valid, or an InvalidUsernamePasswordException is thrown. Therefore, it's possible to have multiple plug-in authenticators configured at one time if there is a need to support different schemes.
WS-Security
Plug-in name: D2L.IM.IPSIS.Security.WSSEMessageAuthenticator
This plug-in checks for a WS-Security SOAP message header similar to:
<s:Header>      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">         <wsse:UsernameToken wsu:Id="UsernameToken-2"  xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">           <wsse:Username>LIS.IPSIS01</wsse:Username>           <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">*****</wsse:Password>         </wsse:UsernameToken>      </wsse:Security>   </s:Header>

Http basic authentication
Plug-in name: D2L.IM.IPSIS.Security.BasicAuthMessageAuthenticator
This plug-in checks for an Authorization header in the Http request headers similar to:
POST http://local.mparkhill-7.im.d2l:44468/d2l/im/ipsis/lis/pmsv2p0/PersonManagementServices.svc HTTP/1.1   Accept-Encoding: gzip,deflate   Content-Type: text/xml;charset=UTF-8   SOAPAction: "http://www.imsglobal.org/soap/lis/pms2p0/replacePerson   Authorization: Basic dGV==   User-Agent: Jakarta Commons-HttpClient/3.1   Host: local.mservl-7.im.d2l:44468   Content-Length: 7011

Where the value of the header is of the form:
"Basic " + Base64Encoded(username + ":" + password)
Outbound message
Outbound messages (i.e. messages being sent from Brightspace to the SIS) are secured using the authentication type specified by the endpoint. For example, when sending a bulk request, the bulk endpoint for the desired source system is retrieved and the authentication type specified on that endpoint is used. Just as on inbound messages, only WS-Security and Http Basic Auth are currently supported.



--------------------------------------------------


About IPSIS Administration (Plug & Play UI) in Brightspace

IPSIS Administration enables you to set up and modify your organization's Student Information System (SIS) integrations, view logs, manage batch processes, and review the status of your SIS integrations. 
There is a common landing page for IPSIS administration that aids in navigating between the two possible interfaces in this area. 
Important: To have access to the IPSIS Administration page, you must collaborate with your D2L Implementation Consultant to set up the IPSIS Platform. Refer to the Enable the IPSIS Platform in Brightspace topic for details. 
To access the IPSIS Administration page

From your organization home page, click  Admin Tools.


Under SIS Integration, click IPSIS Administration.

IPSIS Administration overview
If you have set up and configured more than one SIS integration in Brightspace, the IPSIS Administration page displays all available SIS integrations. Enabled SIS Integrations are colored blue, while disabled integrations are gray. Click an SIS integration to open the IPSIS Administration page.
Figure: The IPSIS Administration page with multiple SIS integrations displayed.Important: The IPSIS Administration page appears differently and may present different options, depending on which SIS integration you select. 



--------------------------------------------------


Enable notifications for IPSIS batch jobs

You can configure notifications so that users with the appropriate permissions receive updates about the status of bulk jobs initiated and completed using IPSIS Platform. 
To enable notifications for IPSIS batch
From your personal menu on the minibar, click Notifications.
Under Instant Notifications, locate IPSIS Platform - Batch Completion Option, and select any of the following:
Receive email notifications Receive SMS notificationsNote: You must Register your mobile to receive SMS notifications. Refer to the Contact Methods section of the Notifications page to add a mobile number.
Click Save.
Notifications are  sent when an IPSIS batch job is completed successfully, completed with errors, or canceled.
Change the default notification message
You can change a default IPSIS Batch Completion notification message to a custom value. For example, when a batch is complete, the default notification message that is sent is "Bulk Job Completed". You can change this value to a custom value of your choice.
Depending on the status of the batch job, the default SMS message displays one of the following:
[ERROR] IPSIS Batch: Error with Completed Batch - {Source System Name} (Batch ID#)
IPSIS Batch: Successfully Completed Batch - {Source System Name} (Batch ID#)
IPSIS Batch: Cancelled Batch - {Source System Name} (Batch ID#)
Depending on the status of the batch job, the default email message displays one of the following subjects:
[ERROR] IPSIS Batch: Error with Completed Batch - {Source System Name} (Batch ID#)
IPSIS Batch: Successfully Completed Batch - {Source System Name} (Batch ID#)
IPSIS Batch: Cancelled Batch - {Source System Name} (Batch ID#)
By default, the body text of an email message displays the following information:
Batch ID: {Batch ID#}
Source System: {Source system name}
Start: {Start date}
End: {End date}
Batch Summary:
X Org Unit(s) processed
X Course Template(s) processed
X Course Section(s) processed
X User(s) processed
X Enrollment(s) processed
Errors:
X Org Unit(s) could not be processed
X Course Template(s) could not be processed
X Course Section(s) could not be processed
X User(s) could not be processed
X Enrollment(s) could not be processed
When X = 0 line will not show in email
To change the default notification message
From the Admin Tools menu, click Language Management.
On the Manage Languages page, click the language that your site uses.
From the Tool Package drop-down list, select IPSISAdminConsole.
From the Collection drop-down list, select Notifications.
With the search field empty, click Search. A table of search results is generated.
In the Custom Value field, enter the term name you want to customize.Figure: The Custom Value field of the search results.
Click Save and Close.
The default notification message is changed to the Custom Value you set for that specific notification.



--------------------------------------------------


About SIS Course Merge

SIS Course Merge enables instructors to simplify course management by merging multiple IPSIS-processed courses into one parent course offering.  The tool enhances course management efficiency and simplifies content delivery, by keeping Classlist and section-specific tools separate while maintaining a unified course structure. This enables teachers to deliver tailored instruction to different sections while efficiently managing administrative tasks associated with enrollment and grading.
For more information, see the product blog: Streamline your course management with the new SIS Course Merge tool and the FAQ: SIS Course Merge tool.
 
Set up and Configure SIS Course Merge
SIS Course Merge is turned on by client administrators and D2L Support:
For new clients, the D2L Implementation team can help configure and set up SIS Course Merge during the implementation of the IPSIS Source System, and configure the correct permissions as D2L Support. 
For existing clients, the setup instructions depend on whether your organization already uses the existing Section Association tool. If you do not already use Section Association a part of your core IPSIS setup, administrators can enable the SIS Course Merge tool from the Organization Tool list or contact D2L Support to enable it for you. If Section Association is already available in your organization, it is recommended that you disable Section Association prior to enabling the SIS Course Merge. Note: It is important to consider an appropriate time to make a switch from Section Association to SIS Course Merge. It is recommended to switch from Section Association to SIS Course Merge at the start of a new semester or new school year. It is also recommended to only enable one merge tool at a time; sections merged with one are not represented by and cannot be managed by the other. Consider conducting a pilot test or merging a small subset of courses initially to gain confidence and evaluate the outcomes before merging larger sets of courses.
Setting required permissions
Administrators must ensure that the appropriate SIS Course Merge permissions are set for the roles accessing, merging, unmerging, or accessing audit logs for courses. For more information, see SIS Course Merge permissions
On the organization home page, click the Org Admin menu. 
Select Roles and Permissions.
Browse to and select a role to which you want to provide SIS Course Merge permissions.
In the Filter by Tool menu, browse to SIS Course Merge, then click Apply Filter. 
Ensure the following permissions are set: 
Can access the SIS Course Merge tool 
Can merge my SIS Courses and/or Can merge all SIS courses
Can access the audit log for all/my Courses
Can unmerge all/my SIS Courses 
Click Save and Close.

Figure: The Roles and Permissions tool grid, filtered by Instructor role and SIS Course Merge tool.
Accessing the SIS Course Merge tool
To access SIS Course Merge:
Log in to your Brightspace account as an instructor or administrator.
Click Admin Tools.
Under the SIS Integration area, click SIS Course Merge. 
Viewing merge audit logs
For information about merge audit logs, see SIS Course Merge data sets.



--------------------------------------------------


Merging and unmerging courses using SIS Course Merge

SIS Course Merge allows course instructors the ability to select multiple course offerings that have been processed by the SIS integration (IPSIS) and merge them into a single parent course offering. The tool also offers the ability to unmerge those courses, and view audit logs.
Important:
Sections cannot be associated with multiple course offerings. It is recommended that if you use SIS Course Merge, you also ensure the Section Association tool is disabled; sections merged with one are not represented by the other.
User Progress is not copied in the course merge.
You cannot use both the IPSIS Section Association tool and SIS Course Merge tool; once a course is moved to the SIS Course Merge tool, you cannot go back to the IPSIS Section Association tool.
You cannot merge courses between source systems.
The SIS Course Merge tool can only be used for courses created using IPSIS. The merge process only merges the course shell, it does not include  submissions, grades, learning outcomes, or course content. Before you merge courses, consider the implications of the action, including potential risk of data loss caused by user actions. Use caution to prevent any unintended loss of content or user progress during the merging process. 
Merge courses using SIS Course Merge
Use the SIS Course Merge tool to merge selected courses.
Important: Before you merge courses, consider the implications of the action, including potential risk of data loss caused by user actions. Use caution to prevent any unintended loss of content or user progress during the merging process. 
To merge courses
In the Admin Tools menu, click SIS Course Merge.
Use the filters or browse to find and select the courses you want to merge.Figure: Search for and select the courses that you would like to merge. 
Click Merge Courses.
Select the course that you would like to merge selected courses into.Figure: Select a course to merge into from the Merge Courses page.

Click Merge. 

The selected courses are merged.
Unmerge courses using SIS Course Merge
Use the SIS Course Merge tool to unmerge selected courses.
Important: Before you merge courses, consider the implications of the action, including potential risk of data loss caused by user actions. Use caution to prevent any unintended loss of content or user progress during the merging process. 
To unmerge courses
In the Admin Tools menu, click SIS Course Merge.
Use the filters or browse to find and select the courses you want to unmerge.

Clear checkmarks from courses you want to remove from the merged course shell. 

Figure: Clear the checkboxes to unmerge courses. If you clear the parent course into which the other courses are merged, all courses are unmerged. 


Confirm your selections and click Unmerge. 

The unmerge action re-activates the original section and course offering and re-enrolls users into the original course and section. 
Review all course merge actions with the Audit Log
The SIS Course Merge Audit Log enhances your tracking and understanding of course merge activities with detailed merge and unmerge logs, user information, action timestamps, advanced search options, and expandable log entries for in-depth information.
To access the Audit Log
From the Admin Tools menu, click SIS Course Merge.
Click the Audit Log tab and do any of the following:Review all SIS Course merge actions under the Action column.Search for specific actions.Filter action results.
 



--------------------------------------------------


About IPSIS Section Association

IPSIS Section Association is an interface in Brightspace used to manually manipulate relationships between enrollable courses or sections in an SIS and course offerings in Brightspace.
To access the IPSIS Section Association page

From your organization home page, click Admin Tools.


Under SIS Integration, click IPSIS Section Association.

Visual Tour: IPSIS Section Association
You can use the Search SIS Sections page of IPSIS Section Association to filter and search for existing SIS sections.
Figure: The IPSIS Section Association page has a number of sections, which are described below.

Filters: Click an arrow to expand and access more filter options.

Filters Applied: Review a list of all filters applied to your search. Click Save Preferences to save your filter configuration.


Search Area: Choose to search either SIS Sections or Course Offerings in Brightspace.


Search Fields: Search by code or name.


Status: Search among Active, Inactive, or All SIS Sections or Course Offerings.


Filter by Department, Semester, or Number of Associations.



Search: Enter a Section or Course name or code. Or leave the field blank and click Search to show results based upon your filters.


Manage Course Offering Associations: Search for existing course offerings, or create a new course offering to associate with other course offerings.


Review and select search results.





--------------------------------------------------


Manage SIS Sections and Course Offerings

Use IPSIS Section Association to view Student Information Systems (SIS) section association information, associate  SIS Sections with Brightspace Course Offerings, and pull grades from Brightspace into an SIS.
View and edit SIS Section  information
You can view and edit information about a specific SIS Section using the filters and search of IPSIS Section Association. 
To view and edit SIS Section information
From the  Admin Tools menu, click IPSIS Section Association.
From the Filters panel, select SIS Section.
In the Search For field, enter the SIS section name.
Click Search.
To view the section association details, click to expand Show Details .Figure: Details displayed for a specific SIS Section.
Click the context menu of the SIS Section Code and do any of the following:Figure: The context menu options for an SIS Section.
To view all course offerings currently associated with the SIS section, from the context menu of the SIS section code, click Manage SIS Associations.To edit the  section name, from the context menu of the course code, click Manage Course Offering Associations. To view the section enrollments, from the context menu of the SIS section code, click Enrollments.
Associate one SIS Section with many Course Offerings
You associate one SIS Section with more than one Course Offering. 
To associate an SIS Section with many Course Offerings
From the  Admin Tools menu, click IPSIS Section Association.
From the Filters panel, select SIS Section.
In the Search for field, enter the SIS section name that you want to associate to the course offerings. Note: To browse SIS section names, leave the Search For field empty.
Click  Search.
In the search results, from the context menu of the SIS section code, click Manage SIS Section Associations.Figure: The Manage SIS Section Associations option.
On the Manage SIS Section Associations page, do one of the following:Figure: The Manage SIS Section Associations page.To search for existing course offerings to associate with the SIS section, click Search Existing Course Offerings. Select the course offerings, scroll to the bottom of the page, and click Add.To create a new course offering to associate with the SIS section, click Create a New Course Offering. This button opens a new tab and separate workflow in the Manage Courses tool. Note: Once you've created a new course offering, you must search for the newly created course using the Section Association interface. For course offerings with sections created by the IPSIS integration, the Course Has Sections checkbox in the Course Offering Information page is permanently turned on and cannot be turned off. To effectively manage courses with IPSIS, all course offerings must allow sections.
Click Next.
Review your changes and click Confirm.
Click Done.
The selected SIS Section is associated with the selected Course Offerings.
View and edit Course Offering information
You can view and edit information about a specific Course Offering using the filters and search of IPSIS Section Association. 
To view and edit Course Offering information

From the  Admin Tools menu, click IPSIS Section Association.


From the Filters panel, select Course Offering.


In the Search For field, enter the Course Offering name.


Click Search.


To view the Course Offering details, click to expand Show Details .Figure: Details displayed for a specific Course Offering.


Click the context menu of the LMS Course Code and do any of the following:Figure: The context menu options for an LMS Course Code.

To edit the  section name, from the context menu of the course code, click Manage Course Offering Associations. 


To edit all other attributes of a course offering, from the context menu of the course code, click Edit Course Offering.


To remove an association between a SIS section and a course offering, from the context menu of the SIS section code, click Manage SIS Section Associations. On the Manage SIS Section Associations page, from the context menu of the course code, click Remove Association. Click Next > Confirm > Done.


Associate one course offering with many SIS sections
You associate one Course Offering with more than one SIS Section. 
To associate a Course Section with many SIS Sections
From the Admin Tools menu, click IPSIS Section Association.
From the Filters panel, select Course Offering.
In the Search for field, enter the course offering name that you want to associate the SIS sections to. Note: If you want to browse course offerings, leave the Search For field empty.
Click Search.
In the Search results, from the context menu of the selected course code, click Manage Course Offering Associations.Figure: The Manage Course Offering Associations option.
On the Manage Course Offering Associations page, do one of the following:Figure: The Manage Course Offering Associations page.To search for SIS Sections to associate with the course offering, click Select SIS Section.Select the SIS sections from the search results and click Add.
Click Next.
Review your changes and click Confirm.
Click Done.
The selected Course Section is associated with the selected SIS Sections.
Merge Course Offerings
You can combine multiple course offerings into one by merging course offerings. Merging course offerings moves all enrollments from one course offering to the destination course offering. By default, merging course offerings deletes the course offerings and section associations that are no longer required.
To merge Course Offerings
From the Admin Tools menu, click IPSIS Section Associations.
From the Filters panel, select Course Offering.
In the Search for field, enter the course offering name that you merge into. Note: If you want to browse course offerings, leave the Search For field empty.
Click Search.
 In the Search results, from the context menu of the selected course code, click Merge Course Offering. Figure: The Merge Course Offering option.
On the Merge Course Offering page, compile course offerings you want to merge by clicking Add Course Offering.Figure: The Add Course Offering option.Note: If the course offerings you want to merge display on the same search results page, select the check boxes and click Merge Course Offering.
From the drop-down list, click Destination Course Offering.
Click Go.
Click Next > Confirm > Done.
Multiple course offerings are combined into one.
Enable the SIS to pull grades from an associated Course Offering
The SIS can pull grades from a course offering if you indicate that it is gradable. 
The SIS cannot request the grades of a course that it is not aware of. To designate a course offering as gradable, you must:

Map the course  to an SIS. 


Create the course  through an SIS request, rather than within Brightspace. 


 Associate that course with an SIS Section using the IPSIS Section Association tool. 

Note: Only one association per SIS section can be marked as gradable. You don't have to identify a gradable course offering per association, but you are notified if one hasn't been selected.
To enable SIS pull of grades from a Course Offering
From the  Admin Tools menu, click IPSIS Section Association.
From the Filters panel, select SIS Section.
In the Search For field, enter the SIS section name. Note: If you want to browse course offerings, leave the Search For field empty.
Click  Search.
From the context menu of the SIS Section code, click Manage SIS Section Associations.
From the context menu of the course offering you want to mark as gradable, click Send Grades from this Association to the SIS.Figure: The Send Grades from this Association to the SIS option.
Click Next and then clickConfirm.
The SIS can pull grades from the selected Course Offering.



--------------------------------------------------


About IPSIS Integration 1.0 (non-Plug & Play UI)

This page describes the IPSIS Administration dashboard that is accessed through IPSIS Integration 1.0.You can use IPSIS Integration 1.0 to do the following:
Initiate a batch process, which transfers course structure and enrollment data from an external SIS to the Brightspace.
View the status of recently initiated batch processes. A batch may have one of the following statuses: Bulk Requested, In Progress, Sending request to cancel batch, Canceled, Error, or Complete
View a summary of recent batch processes, including start and end times and which user initiated and/or cancelled the process.
Important: IPSIS Integration 1.0 is a legacy integration that managed all SIS integrations implemented prior to the release of Brightspace 10.7.2.
Visual Tour: IPSIS Integration 1.0
You can access the IPSIS Integration 1.0  dashboard by clicking Admin Tools > IPSIS Administration and clicking the IPSIS Integration 1.0 tile.Figure: The IPSIS Integration 1.0 tile of the IPSIS Administration page.
Once you click the IPSIS Integration 1.0 tile, you can access the following page:
Figure: An overview the Dashboard tab of IPSIS Integration 1.0.
Review the following tabs and headings:

Dashboard: Select a source system to display the most recent batch runs for. For example, D2L Standard CSV.


Audit Log: Review a list of audited actions IPSIS performed on items in the Brightspace. This tab displays log entries for the source system. For more information, refer to the About the Audit Log tab topic.


System Log: Review and filter a list of Debug, Information, Warning, Error, and Fatal system messages.


Configuration: Edit source systems and manage extension points for a source system. Refer to the About the Configuration tab topic for more details.


Org Units: Filter and review a list of all Org Units created by a selected source system.


Batches:  Review a list of all batches run from a selected source system ,  view audit and error messages for specific batches, and sort batches based on the start date of a batch. Refer to the About the Batches tab topic for details.


Select a source system to display information for.


Review the most recent batch runs for the selected source system.


Review the status of the batch run. 





--------------------------------------------------


About the Audit Log tab

The Audit Log tab lists audited actions IPSIS performed on items in the Brightspace. 
Important: This topic details IPSIS Integration 1.0, which is a legacy integration that managed all SIS integrations implemented prior to the release of Brightspace 10.7.2.
View audit logs
Each audit entry contains the item modified and the action performed on the item. The Audit log tab enables you to verify that a specific action was performed. For example,you can check whether actions such as the following were successfully executed:
Create a course section
Delete a course offering
Enroll a user in a course section
You can filter Audit Log entries by the type of item modified in Brightspace, view audit messages specific to a batch from the dashboard using the start and end date of the batch (exclusive to OneRoster integrations), the type of action taken, the object and action performed on the object, and sort messages in descending order by time. Users can also link out to the Org Unit or User page to see additional audit log entry details.
Note: Only actions performed through IPSIS appear on the Audit Log page. Actions performed using other, non-IPSIS tools do not display on this page. 
To view audit logs
From the Admin Tools menu, click IPSIS Administration.
Click the IPSIS Integration 1.0 tile.
Click the Audit Log tab.Figure: The Audit Log tab of IPSIS Integration 1.0.
From the Source drop-down, select a SIS.
From the Date Range drop-down, select the date range you want to search for.
From the Filter By drop-down, select the type of item and type of action you want to search for.




--------------------------------------------------


About the Configuration tab

The Configuration tab of IPSIS Integration 1.0 displays a list of source systems that have been configured with your organization's instance of Brightspace. It also contains a list of Extension Points, for which handlers and translators can be configured in specific ways to manage information passing between the SIS and Brightspace.
With appropriate permissions, you can  manage both source systems and associated extension points for that source system. With restricted, view-only permissions, you can  view but not change source system details and extension points.
Important: IPSIS Integration 1.0 is a legacy integration that managed all SIS integrations implemented prior to the release of Brightspace 10.7.2.
Figure: The Configuration tab of IPSIS Integration 1.0.
About plug-ins and extension points
To understand how to manage extension points, it's necessary to understand what plug-insare and their relation to extension points. A plug-in extends the capabilities of a system. New plug-ins further customize the behavior of a system. Extension points group plug-ins together. Any time the system is applying certain behavior and business rules, it runs configured plug-ins for a particular extension point.
There are many extension points in IPSIS to handle the many behaviors for which it may be responsible. Plug-ins are available for creating, updating, deleting, and reading of  Brightspace entities. Examples of entities include  course offerings, departments, sections, templates, etc.
Within IPSIS, plug-ins are divided into two classifications: handlers and translators, and each one  implements a behavior (business rule, for example) for an extension point.
Each extension point can be configured with one or more plug-ins from a predefined list. You can change the order in which the plug-ins are executed with drag-n-drop using the drag handles to the left of the plug-in name, and add or remove them from the configuration. You can also remove a configured plug-in for an extension point. Without plug-ins configured for an extension point, the system is unable to interact in any way with the types of entities for which the extension point is intended to operate upon.
Extension points are configured at the organization level. This has the following implications:
The same behavior applies to all entities (such as course offerings, semesters, etc.) across the entire organization.
Removing or changing plug-ins for an extension point impacts the behavior across the entire organization.
Different behavior based on different extension point configurations is not possible (for a single organization), and custom behavior for different org units require customization of the plug-ins themselves.
Access and configure an extension point
You can access and configure an extension points from the Configuration tab of IPSIS Integration 1.0.
To access and configure an extension point
From the Admin Tools menu, click IPSIS Administration.
Click the IPSIS Integration 1.0 tile.
Click the Configuration tab.
Under Extension Points, click to expand a source system integration name. For example, IPSIS Platform.Figure: A list of Extension Points configured for IPSIS Platform.
Click the name of an extension point to open the settings page.
The currently configured (and enabled) plug-ins appear under Active Plug-ins. Plug-ins not enabled for an extension point appear under Available Plug-ins.Figure: The Edit Extension Point page.
The page allows an administrator to create, modify, or remove a plug-in configuration for a given extension point, provided that the administrator has the Manage IPSIS Configuration Options permission enabled. Specific actions include:
Add an available plug-in to the list of active plug-ins
Remove a plug-in from the list of active plug-ins
Change the sort order of the active plug-ins
Remove the entire configuration
Set custom properties of a plug-in
The active and available plug-in lists are mutually exclusive - adding an item to one list removes it from the other.
Add an extension point plug-in
You can add a plug-in to an extension point using the Configuration tab of IPSIS Integration 1.0.
To add a plug-in
From the Admin Tools menu, click IPSIS Administration.
Click the IPSIS Integration 1.0 tile.
On the Configuration tab, click the extension point that you want to add the plug-in to.
Under Available Plug-ins, select the check box beside the plug-in name.
Click Add to Configuration.Figure: The Add to Configuration button of the Available Plug-ins section.
Click Save and Close.
The plug-in is added to the selected extension point.
Sort the order of extension point plug-ins
You can change the order of plug-ins that are added to an extension point.
To change the order of a plug-in
From the Admin Tools menu, click IPSIS Administration.
Click the IPSIS Integration 1.0 tile.
On the Configuration tab, click the extension point that you want to change the order of plug-ins for.
Click and hold the drag handle to the left of the name of the plug-in that you want to reorder. Move it to the desired order.
Click Save and Close.
Remove an extension point plug-in
You can remove a plug-ins from an extension point.
To remove a plug-in
From the Admin Tools menu, click IPSIS Administration.
Click the IPSIS Integration 1.0 tile.
On the Configuration tab, click the extension point that you want to remove from the plug-in.
Under Active Plug-ins, select the check box beside the plug-in name.
Click Remove from Configuration.
Click Save and Close.
Set custom properties for a plug-in
Custom properties for a plug-in allow you to alter the behavior of a plug-in. The most common scenario is to instruct a translator to extract data from a different field in a request message.
To set custom properties for a plug-in
From the Admin Tools menu, click IPSIS Administration.
Click the IPSIS Integration 1.0 tile.
On the Configuration tab, click the extension point that you want to change plug-in custom properties for.
Click the context menu beside the name of the plug-in.
Click Edit Custom Properties.
Change the properties for the plug-in based on the plug-in documentation.
Click Save.
Custom properties are saved for the selected plug-in.
About org unit type mapping
The Org Unit Type Mappings configuration is required on a per source system basis to tell the integration what kind of org unit types in Brightspace are affected when requests are received from a Student Information System (SIS). A mapping is required for each org unit type that is going to be accepted from the SIS so that the implementation knows which corresponding org unit type should be used in Brightspace. Each record is associated with a specific source system.
An org unit type mapping is required so that IPSIS knows how to interpret messages of a particular type from a source system. For example, a SIS might communicate messages about Faculties, but IPSIS should interpret those as Departments in Brightspace. That is, when the SIS instructs IPSIS to create a Faculty, the org unit type mapping tells IPSIS to create a Department in Brightspace.
You must coordinate with the source system vendor to obtain the org unit type text strings communicated to IPSIS in its messages. The text strings may depend on the source system vendor, or on how the source system has been configured.
Multiple mappings for an org unit type are also valid. For instance, an institution might want entities referred to in the SIS as course offerings and might want sections to be created in Brightspace as course offerings. In this case, two mappings are needed for Brightspace course offering org unit type.
Note: Multiple mappings are not allowed for the same SIS Org Unit Type. Without a mapping for an SIS org unit type, IPSIS is unable to create, update, and delete that type of entity in Brightspace. If a certain SIS org unit type is to be ignored by IPSIS, exclude a mapping.
Add an org unit type mapping
You can map an org unit type name from your SIS to the corresponding org unit type in Brightspace.
To add an org unit type mapping
From the Admin Tools menu, click IPSIS Administration.
Click the IPSIS Integration 1.0 tile.
On the Configuration tab, under Source Systems, click the source system that you want to add org unit type mappings for.
From the Edit Source System page, do the following:
Click Add Org Unit Type Mapping.Figure: The Add Org Unit Type Mapping button on the Edit Source System page.In the SIS Org Unit Type field, enter an org unit type.From the LE Org Unit Type drop-down list, select an org unit type to map the SIS org unit type to.Figure: The Add Org Unit Type Mapping dialog.
Click Save.
A new org unit type is mapped for the selected source system.
Add role mappings
The Role Mappings configuration is required on a per source system basis to tell the integration which Brightspace roles correspond with the roles in the SIS integration messages. Each role that is accepted from the SIS needs to be mapped to ensure that the implementation knows which corresponding role will be used in Brightspace. Each record is associated with a specific source system.
To add role mappings
From the Admin Tools menu, click IPSIS Administration.
Click the IPSIS Integration 1.0 tile.
On the Configuration tab, click the source system that you want to add role mappings for.
From the Edit Source System page, do the following:Click Add Role Mapping.Figure: The Add Role Mapping button on the Edit Source System page.In the SIS Role field, enter a new SIS role.In the LE Role drop-down list, select a role that you want to map the SIS role to.Figure: The Add Role Mapping dialog.
Click Save.
New role mappings are mapped for the selected source system.



--------------------------------------------------


About the Batches tab

You can use the Batches tab of the IPSIS Administration page to review a list of all batches run from a source system ,  view audit and error messages for specific batches, and provides the ability to sort batches based on the start date of the batch.
Important: This topic details IPSIS Integration 1.0, which is a legacy integration that managed all SIS integrations implemented prior to the release of Brightspace 10.7.2.
You can filter log entries by:
The source system related to the batch
Completion status
Important: This topic details IPSIS Integration 1.0, which is a legacy integration that managed all SIS integrations implemented prior to the release of Brightspace 10.7.2.
Retry Latest Batch
Under Admin Tools, and under SIS Integration click IPSIS Administration.
Click Dashboard.
Under Latest Run, beside the most recent batch run, click Re-Run Batch. Only the most recent batch will have the Re-Run Batch option available.
Autogenerate an IPSIS User
The IPSIS user and a unique role for SIS are automatically generated upon completion of the configuration phase. A stepper control during the configuration phase introduces additional clarity when setting up a source system.
If an autogenerated user or role is deleted from Brightspace through user tools, the deleted user or role is automatically restored when the administrator visits the SIS integration dashboard.
About the Org Units page
The Org Units page lists org units created by IPSIS. Org units not created or updated through IPSIS are not shown. You can filter log entries by:
The source system that created or most recently modified the org unit (via the Source drop-down filter).
The type of org unit created, defined by the SIS-to-org unit type mapping (use the Type drop-down filter).
 



--------------------------------------------------


About D2L Standard CSV

D2L Standard CSV is a source system that integrates with the Integration Pack for Student Information Systems (IPSIS) platform to import information from information systems into Brightspace. It is a D2L proprietary standard created using comma-separated values (CSV) delimited text files.
You can use D2L Standard CSV files to import information from a Student Information System (SIS) or Human Resource Information System (HRIS) using the IPSIS Administration interface in Brightspace.
Important: The files that are required for D2L Standard CSV are text files saved in a CSV format. Generating content for these files will require data access to extract data from your SIS/HRIS. Some SIS/HRIS systems provide you with data export mechanisms which should be used as per your vendor instructions. We recommend that you contact your information system and seek guidance on best practices for extracting the required data into the needed CSV file format. A manifest is required when using version 1.1 or higher of D2L Standard CSV. 
D2L Standard CSV supports version 1.0, 1.1, and 2.0. To view the latest version of D2L Standard CSV search the Community for D2L Standard CSV – Version 2.0. 
About D2L Standard CSV iterations
Currently, there are three iterations of IPSIS CSV source system options within the IPSIS Platform. These source systems use a proprietary D2L standard specification, as opposed to the IMS Global Specification. These source systems are:

IPSIS Integration 1.0: This is a legacy version of CSV source system that was designed to support the IMS Global Learning Consortium's Learning Information Services specification. It was expanded to support D2L defined CSV files.


Standard CSV: A simplified version of IPSIS Integration 1.0 that replaces translators and handlers with  setup questions. This is also a legacy source system.


D2L Standard CSV: There are currently three versions of D2L Standard CSV, including 1.0, 1.1, and 2.0.

For more information about D2L Standard CSV iterations, refer to the IPSIS - Legacy CSV to D2L Standard CSV - Versions, Migrations and Capabilities product blog on Brightspace Community.
Before you begin with D2L Standard CSV
You must ensure that you have worked with a D2L Implementation Consultant to set up the IPSIS Platform and enabled IPSIS Administration in Brightspace before you can use D2L Standard CSV. Before you begin:

Refer to the About the IPSIS Platform topic to learn more about the IPSIS Platform and how D2L Standard CSV is a source system that integrates with that platform.


Refer to the Enable the IPSIS Platform in Brightspace topic to learn about how to work with your D2L Implementation Consultant to enable and configure IPSIS Platform.


Refer to the  About IPSIS Administration (Plug & Play UI) in Brightspace topic.





--------------------------------------------------


Prepare CSV files using the D2L Standard CSV format

This page explains how to create and build CSV files in the D2L Standard CSV format. It provides:

Common file content rules and recommended file naming conventions.


Accepted  D2L Standard CSV files required for integration with IPSIS.


Sample structures and formats for each CSV file type.

Common CSV file content rules
CSV files must be UTF-8 encoded.
CSV files should contain differential SIS data (deltas) rather than complete SIS data drops.
Values in files are case-sensitive. The instructions will detail the required case.
An empty value is represented with two commas with no spaces between them. (for example, ,, indicates blank value, whereas ,  , indicates a space character, which is parsed as an invalid value).
The csv files must have a header (first line) that must be an exact match (casing and commas) to that listed in the examples in the sections below.
Subsequent lines in the file contain the data to be processed (created, updated, deleted)
Sending an UPDATE action when the object does not exist results in a CREATE request. Common behavior is to use only the UPDATE or DELETE actions.
A manifest is required when using version 1.1 or higher of D2L Standard CSV. 
Accepted D2L Standard CSV 1.0 and 1.1 file formats
The file formats accepted by D2L Standard CSV 1.0 and 1.1. are:
Orgs
Users (V1 or V1.1)
Enrollments
Manifest (Required for V1.1)
Manager Dashboard and Learning Groups Attributes
Files are to be uploaded in a zip archive. The recommended naming convention is:
D2LStdCSV-{YYYYmmddHHMMSS}.zip
Note: Only .zip (case sensitive, lowercase only) archives are permitted to be uploaded to SFTP.
Files are processed in alphabetical order. It is recommended to send orgs, users, enrollments, then attributes.
Recommended CSV file naming conventions
The recommended naming convention for individual D2L Standard CSV files are:
01-Departments- {YYYYmmddHHMMSS}.csv
02-Semesters- {YYYYmmddHHMMSS}.csv
03-Templates-{YYYYmmddHHMMSS}.csv
04-Offerings-{YYYYmmddHHMMSS}.csv
05-Sections-{YYYYmmddHHMMSS}.csv
06-Users-{YYYYmmddHHMMSS}.csv
07-Enrollments-{YYYYmmddHHMMSS}.csv
08-Attributes-{YYYYmmddHHMMSS}.csv
manifest.json
About Org Units and Org Unit Types
You can use D2L Standard CSV to create an organizational structure in Brightspace. This structure is based upon the Org Units defined in a CSV file and mapped to objects in Brightspace. Note the following best general practices when sending org unit information:

If sending many Org Unit Types in one CSV file, ensure that hierarchy is respected in the file. For example, Departments should be sent before Course Templates. Failing to send a parent Org Unit Type before the creation of the child results in the child Org Unit failing.


If sending user relationships, ensure that parents/guardians hierarchy is respected in the file. For example, parents/guardians should be sent before learners. Failing to do so results in the relationship failing.


The Org Unit naming conventions (Name/Code) should follow that described in your SIS. Brightspace can accept as many Org Units as needed, Org Unit names and codes can be fed as-is through the CSV files as long as names or codes respect Brightspace illegal character requirements and are unique across different Org Unit. Org unit codes are truncated if more than 50 characters, this could lead to duplication of org unit codes in Brightspace or failure to create an org unit. Illegal characters include :%&#*?<>|\"' and leading or trailing spaces.

Departments, Semesters, Course Templates, Course Offerings and Course Sections
Processing these Org Units creates the org structure in your Brightspace environment. These must be sent at least once to instruct D2L Standard CSV on which org units it is able to control. Once IPSIS controls an org unit, all future changes to that org unit must be made only through the D2L Standard CSV integration to ensure accurate ownership of the data.
You should only resend Org Units when a new Department or Semester needs to be added or updated in the org structure in the learning environment.
D2L Standard CSV can:
Create a new Org Unit if it doesn’t exist
Map to an existing Org Unit if it was created by a different source then D2L Standard CSV
Update the name of an Org Unit that it controls
Course Template: assign and update parent Department based on the Department code
Course Offering: assign and update parent Course Template and Semester based on the parent code
Course Offering: Update all course details including course offering name, dates
Course Section: Deleting a course section automatically unenrolls users from the deleted section
Delete an Org Unit that it controls
D2L Standard CSV will not:
Update Org Unit codes
Delete manually created Org Units unless they been mapped with D2L Standard CSV
Delete an Org Unit if it has children linked to it (children must be deleted first)Exception: if in the UI sections have been set up to be deleted, Course Offerings can be deleted if a Section is linked to it
Supported Org Unit types
The D2L Standard CSV integration creates, updates, and deletes specific Org Units types. 
The following Org Unit types are supported by D2L Standard CSV 1.0 and 1.1:
Departments
Semesters
Course Templates
Course Offerings
Sections
Note: Any Org Unit types not listed must be managed outside the D2L Standard CSV integration.
Users
Processing the user type creates, updates, inactivates or deletes users in Brightspace. Depending on the version of the User file you use, the user type could also create, update, or delete the parent-child relationship in Brightspace. Users must be sent at least once to instruct IPSIS on which User profiles it is able to create, update, or delete and manage enrollments of.
Illegal characters: \ / :  ? " < > | ' , ;
D2L Standard CSV can:
Create a new user if it doesn’t already exist
Update username, First Name, Last Name, Password, and EmailPassword is not required
Update the Org level role
Activate, inactivate, or delete a user
Create, update, or delete a parent-child relationship (v 1.1)
If a user exists with same OrgDefinedID then it can be mapped to the existing user
Update a parent-child relationship for Brightspace Parent & Guardian
OR
If a user exists with same ‘Username’ then it can be mapped to the existing user
D2L Standard CSV will not:
Update OrgDefinedId
Delete manually created users unless they have been mapped with D2L Standard CSV
Note: Brightspace Parent & Guardian allows authorized parents and guardians to log in to Brightspace to see their child's classroom activity feed, shared Portfolio items, upcoming online assignments, upcoming quizzes, grade items, and course grades. This helps parents engage with their young learners and maintain awareness of their upcoming work. For more information on Brightspace Parent & Guardian click here.
Enrollments
Processing the enrollment type enrolls or unenrolls users in Brightspace at the course section level. Enrollments should be sent when changes are made in the information system to accurately reflect those changes in Brightspace. An unenrollment should only be sent once. Resending the same unenrollment will cause warnings in your IPSIS log.
D2L Standard CSV can:
Enroll users in course sections
Un-enroll users in course sections
D2L Standard CSV will not:
Enrolls users at other org levels
JSON manifest file
When a new feature is added to D2L Standard CSV that results in a breaking change to the file format, D2L releases the change by updating a manifest file. The manifest is  a JavaScript Object Notation (JSON) file that declares the version of D2L Standard CSV that you are using. Below is the expected data structure to be included in the JSON file:
{
"version":"1.1"
}
Important: The manifest file must be included with every zip package of CSV files sent to IPSIS. If a manifest file is not included, the version defaults to 1.0. The file must be named manifest.json in lowercase. The version in the JSON file must match the version of IPSIS that your CSV outputs are currently aligned to.
Orgs
Orgs - Department
The following lists 3 rows of sample content for a Department (along with the required header line). File consists of 11 mandatory columns, each must be populated with a valid value or left empty depending on the file format.type,action,code,name,start_date,end_date,is_active,department_code,template_code,semester_code,offering_codedepartment,UPDATE,sampledeptA,sample Department A,,,,,,,department,UPDATE,sampledeptB,sample Department B,,,,,,,department,UPDATE,sampledeptC,sample Department C,,,,,,,
 
Column
Field
Required
Possible Values
Notes
1
type
Required
department
Must be lowercase
2
action
Optional
CREATE, UPDATE, DELETE
Case insensitive. If not specified, default is UPDATE
3
code
Required
 

The course you use must be a unique value to identify any one specific Org Unit and is case sensitive. it can be any alphanumeric value, however should not include commas.
Codes with more than 50 characters will be truncated.

4
name
Required
 
Name of Department
5
start_date
N/A
 
Ignored
6
end_date
N/A
 
Ignored
7
is_active
N/A
 
Ignored
8
department_code
N/A
 
Ignored
9
template_code
N/A
 
Ignored
10
semester_code
N/A
 
Ignored
11
offering_code
N/A
 
Ignored
Orgs - Semester
The following lists 3 rows of sample content for a Semester (along with the required header line). File consists of 11 mandatory columns, each must be populated with a valid value or left empty depending on the file format. type,action,code,name,start_date,end_date,is_active,department_code,template_code,semester_code,offering_codesemester,UPDATE,FA2015,Fall 2015,,,,,,,semester,UPDATE,WI2016,Winter 2016,,,,,,,semester,UPDATE,SU2016,Summer 2016,,,,,,,
 
Column
Field
Required
Possible Values
Notes
1
type
Required

semester
 

Must be lowercase
2
action
Optional
CREATE, UPDATE, DELETE
Case insensitive. If not specified, default is UPDATE
3
code
Required
 

The course you use must be a unique value to identify any one specific Org Unit and is case sensitive. it can be any alphanumeric value, however should not include commas.
Codes with more than 50 characters will be truncated.

4
name
Required
 
Name of Semester
5
start_date
N/A
 
Ignored
6
end_date
N/A
 
Ignored
7
is_active
N/A
 
Ignored
8
department_code
N/A
 
Ignored
9
template_code
N/A
 
Ignored
10
semester_code
N/A
 
Ignored
11
offering_code
N/A
 
Ignored
Orgs - Course Template
The following lists 3 rows of sample content for a course template Org Unit (along with the required header line). File consists of 11 mandatory columns, each must be populated with a valid value or left empty depending on the file format. type,action,code,name,start_date,end_date,is_active,department_code,template_code,semester_code,offering_codecourse template,UPDATE,templatecode1,template name1,,,,parentdeptcode1,,,course template,UPDATE,templatecode2,template name2,,,,parentdeptcode1,,,course template,UPDATE,templatecode3,template name3,,,,parentdeptcode9,,,
 
Column
Field
Required
Possible Values
Notes
1
type
Required
course template
Must be lowercase
2
action
Optional
CREATE, UPDATE, DELETE
Case insensitive. If not specified, default is UPDATE
3
code
Required
 

The code you use must be a unique value to identify any one specific Org Unit and is case sensitive. It can be any alphanumeric value, however should not include comma’s.
Codes with more than 50 characters will be truncated.

4
name
Required
 
Name of course template
5
start_date
N/A
 
Ignored
6
end_date
N/A
 
Ignored
7
is_active
N/A
 
Ignored
8
department_code
Required
 
Department Org Unit code
9
template_code
N/A
 
Ignored
10
semester_code
N/A
 
Ignored
11
offering_code
N/A
 
Ignored
Orgs - Course Offering
The following lists 3 rows of sample content for a course offering (along with the required header line). File consists of 11 mandatory columns, each must be populated with a valid value or left empty depending on the file format. type,action,code,name,start_date,end_date,is_active,department_code,template_code,semester_code,offering_codecourse offering,UPDATE,offering_code1,offering name 1,2015-07-07,2015-10-23,1,,templatecode2,Semestercode1,course offering,UPDATE,offering_code2,offering name 2,2015-07-07,2015-10-23,1,,templatecode2,Semestercode1,course offering,UPDATE,offering_code3,offering name 3,2015-07-07,2015-10-23,1,,templatecode3,Semestercode1,
 
Column
Field
Required
Possible Values
Notes
1
type
Required
course offering
Must be lowercase
2
action
Optional
CREATE, UPDATE, DELETE

Case insensitive. If not specified, default is UPDATE.

3
code
Required
 

The code you use must be a unique value to identify any one specific Org Unit and is case sensitive. It can be any alphanumeric value, however should not include commas.
Codes with more than 50 characters will be truncated.

4
name
Required
 

Name of course offering. Course names with commas need to be wrapped in double quotes
"course,name"

5
start_date
Optional
yyyy-mm-dd yyyy-mm-ddThh:mm:ss.fff
If no time is specified default time is T00:00:00.000
6
end_date
Optional
yyyy-mm-dd yyyy-mm-ddThh:mm:ss.fff
If no time is specified default time is T00:00:00.000
7
is_active
Optional
1. 0. TRUE, FALSE
If not specified, default is 1. Case insensitive.
8
department_code
N/A
 
Ignored
9
template_code
Required
 
Course template Org Unit code
10
semester_code
Required
 
Semester Org Unit code
11
offering_code
N/A
 
Ignored
Orgs - Course Section
The following lists 3 rows of sample content for a course section (along with the required header line). File consists of 11 mandatory columns, each must be populated with a valid value or left empty depending on the file format. type,action,code,name,start_date,end_date,is_active,Department_code,template_code,Semester_code,offering_codecourse section,UPDATE,sample_section1,section name 1,,,,,,,offering_code1course section,UPDATE,sample_section2,section name 2,,,,,,,offering_code1course section,UPDATE,sample_section3,section name 3,,,,,,,offering_code2
 
Column
Field
Required
Possible Values
Notes
1
type
Required
course section
Must be lowercase
2
action
Optional
CREATE, UPDATE, DELETE
Case insensitive. If not specified, default is UPDATE
3
code
Required
 

The code you use must be a unique value to identify any one specific Org Unit and is case sensitive. It can be any alphanumeric value, however should not include commas.
Codes with more than 50 characters will be truncated

4
name
Required
 
Name of course offering
5
start_date
N/A
 
Ignored
6
end_date
N/A
 
Ignored
7
is_active
N/A
 
Ignored
8
department_code
N/A
 
Ignored
9
template_code
N/A
 
Ignored
10
semester_code
N/A
 
Ignored
11
offering_code
Required
 
Course offering org code
Users
Users (Version 1.0 - excluding relationships)
The following lists 2 rows of sample content for a user (along with the required header line). File consists of 10 mandatory columns, each must be populated with a valid value or left empty depending on the file format.  type,action,username,org_defined_id,first_name,last_name,password,is_active,role_name,emailuser,UPDATE,TEST1,orgdeftest1,first,last,,1,Instructor,test1@somedomain.eduuser,UPDATE,john.smith,55120,John,Smith,,1,Learner,john.smith@yourdomain.edu
 
Column
Field
Required
Possible Values
Notes
1
type
Required
user
Must be lowercase.
2
action
Optional
CREATE, UPDATE, DELETE
Case insensitive. If not specified, default is UPDATE.
3
username
Required
 
Username
4
org_defined_id
Required
 

The code you use for the OrgDefinedId  must be a unique value used to identify any one specific user only. D2L recommends using SIS SourceID.

5
first_name
Required
 
 
6
last_name
Required
 
 
7
password
Optional
 

If a password is not specified, Brightspace will generate a password.
If a password is not specified and you are logging in using native authentication, on the Brightspace login page, click Forgot your password? to reset your password.

8
is_active
Required
1, 0, TRUE, FALSE
Case insensitive.
9
role_name
Required
 
Role name at the organization level
10
email
Optional
 
 
Users (Version 1.1 - including relationships)
The following lists 3 rows of sample content for a user (along with the required header line). File consists of 10 mandatory columns, each must be populated with a valid value or left empty depending on the file format.  type,action,username,org_defined_id,first_name,last_name,password,is_active,role_name,email, relationshipsuser,UPDATE,TEST1,orgdeftest1,first,last,,1,Parent,test1@somedomain.eduuser,UPDATE,TEST1,guardian.test,first,last,,1,Parent,test1@somedomain.eduuser,UPDATE,sam.child,orgdefinedtest2,First2,Last2,,1,Learner,email3@email.com,"[{""Type"": ""Parent"", ""Id"": ""orgdeftest1""}, {""Type"": ""Guardian"", ""Id"": ""guardian.test""}]"
 
Column
Field
Required
Possible Values
Notes
1
type
Required
user
Must be lowercase.
2
action
Optional
CREATE, UPDATE, DELETE
Case insensitive. If not specified, default is UPDATE.
3
username
Required
 
Username
4
org_defined_id
Required
 
The code you use for the OrgDefinedId  must be a unique value used to identify any one specific user only. 						D2L recommends using SIS SourceID.
5
first_name
Required
 
 
6
last_name
Required
 
 
7
password
Optional
 

If a password is not specified, Brightspace will generate a password.
If a password is not specified and you are logging in using native authentication, on the Brightspace login page, click Forgot your password? to reset your password.

8
is_active
Required
1, 0, TRUE, FALSE
Case insensitive.
9
role_name
Required
 
Role name at the organization level
10
email
Optional
 
 
11
relationships
Optional
Parent, Guardian

JSON object including relationship type and OrgDefinedId of parent/guardian.
Explicitly updates, to remove a relationship, relationship should not be in file.

Enrollments
The following lists 3 rows of sample content for an enrollment (along with the required header line). File consists of 5 mandatory columns, each must be populated with a valid value or left empty depending on the file format. type,action,child_code,role_name,parent_codeenrollment,UPDATE,orgdeftest1,Instructor,test_section_code1enrollment,UPDATE,56795,Learner,test_section_code2enrollment,DELETE,56418,Learner,test_section_code3
 
Column
Field
Required
Possible Values
Notes
1
type
Required
user
Must be lowercase.
2
action
Optional
CREATE, UPDATE, DELETE
Case insensitive. If not specified, default is UPDATE.
3
child_code
Required
 
OrgDefinedId
4
role_name
Required
 
Course level role. This role can be different than the role used when creating a user.
5
parent_code
Required
 
Course section org code




--------------------------------------------------


File Relationships

The following diagram shows the relationships mapped from one action to another. The codes in the linked boxes should match to create a successful link from the lower action to the one above it. The creation process should flow from top to bottom, hence the need to add numbers to file names.

 




--------------------------------------------------


Use D2L Standard CSV with IPSIS

Enable IPSIS Administration and IPSIS Platform Tool
From the Admin Tools menu, click Organization Tools.
On the Tool Availability page, set the Availability toggle for IPSIS administration and IPSIS Platform to On.
Enable IPSIS Administration Permissions
Setting
Allow users to 
Users will see
Also required
Applicable org unit
IPSIS Administration - Access IPSIS Administration Console
Access the Dashboard, Audit Log, System Log, Org Units, and Batches pages
The IPSIS Administration link in Admin Tools
None
Organization
IPSIS Administration - Manage IPSIS Bulk Operations
Initiate a batch and choose batch options (LIS)
-
Access IPSIS Administration Console
Organization
IPSIS Administration - View IPSIS Configuration Options
Access the Configuration page
The read-only source system properties pages and the read-only extension point configuration pages
Access IPSIS Administration Console
Organization
IPSIS Administration - Manage IPSIS Configuration Options
View and edit the Configuration pageView and edit the SourcedId page
-
Access IPSIS Administration Console and View IPSIS Configuration Options
Organization
IPSIS Administration - Subscribe to Batch Job Notifications
Subscribe to IPSIS Platform - Batch Completion Summary instant notifications through the Notifications tool
-
None
Organization
User Information Privacy
See Usernames
-
None
Organization
Org Unit Type Editor
Can Create and Edit Org Unit Types
-
None
Organization
Security
See Roles and Permissions
 
None
Organization
Update the configuration of your D2L Standard CSV source system
 Brightspace automatically defaults to your most common settings. However, these settings can be edited at any time with the appropriate permissions. 
To update the configuration of your D2L Standard CSV source system:
From the Admin Tools menu, select IPSIS Administration.
Select the Configuration tab and update the configuration details as listed in the following sections.
SFTP Credentials
Each source system has its own unique SFTP credentials. These credentials can be found on the Configuration screen. D2L recommends generating a new password when you initially create your source system. SFTP credentials are used to upload files.
To generate a new password:
On the Configuration tab click Generate Password.
Record the Address, Username, and Password.
Select Save Configuration.
Note: Once the page has been saved, the password is hidden and is not recoverable. Passwords can be regenerated. SFTP credentials must be updated when transferring zip to the SFTP.
Source System 
In the SIS Name field, enter the name of your SIS. It is recommended to keep this up to date.
Overwriting Brightspace
Choose to allow, not allow, or sometimes allow the SIS to overwrite changes made in Brightspace. 
 If you select sometimes allow, more granular configuration of what the SIS is allowed to overwrite is displayed.
People
SIS Role Mappings
This section contains freeform text fields to map SIS specific role names to Brightspace role names.
To add additional SIS specific role names to map to Brightspace roles, click + Add Role.
Note: Instructor and Learner roles are included by default but they can be deleted.
Deletion
This section provides the three following options on how a DELETE command updates a user’s profile in Brightspace.
Do Nothing – the user mapping is deleted from IPSIS mappings, but the user remains unchanged in Brightspace.
Inactivate that user in Brightspace – the user mapping is deleted from IPSIS mappings and the user is marked inactive in Brightspace.
Delete the user from Brightspace – the user mapping is deleted from IPSIS mappings and the user is deleted from Brightspace. When a user is deleted in Brightspace that user's user progress is lost.
Map SIS entries to course and sections
This section provides the option to map SIS entries based on code to existing org units that were created outside of the SIS (manually, using bulk operations, or APIs). If mappings are turned off, duplicates may be created.
SIS Group Mappings: Freeform text fields to map SIS specific org unit names to Brightspace Org Unit Type names.
Click + Add Org Unit Type to add additional SIS specific org unit type names.
The following Org Unit Types are mandatory:
CourseOffering
CourseSection
CourseTemplate
Department
Semester
Note: Other Org Unit support requires manifest version 2.0.
Deletion
This section provides three options on how a DELETE command updates an org unit in Brightspace.
Do Nothing – the org unit mapping is deleted from IPSIS mappings, but the org unit remains unchanged in Brightspace.
Inactivate course offering – the org unit mapping is deleted from IPSIS mappings, the course offering is marked inactive in Brightspace. Requires all users to be unenrolled before the course can be marked inactive.
Delete the course or section – the org unit mapping is deleted from IPSIS mappings, the section, course offering, and enrollments are deleted from Brightspace.
Map SIS entries to course and sections
This section provides the option to map SIS entries based on code to existing org units that were created outside of the SIS (manually, bulk operations, API). If mappings are off, duplicates may be created.
Course Content
This section provides the ability to copy course content from a master course or a course template to the newly created course. 
Select Yes and choose one of the following:
Parent course template of the new course: Content is copied from the parent Course Template to the new child Course Offering
Sibling course where the Org Unit Code matches the parent template: Content is copied form a Master Course Offering to the sibling Course Offering when the Master Course Offering and Course Template share the same Org Unit Code
Departments, Semesters and Other Org Units
This section provides the option to map SIS entries based on code to existing org units that were created outside of the SIS (manually, using bulk operations, using APIs). If mappings are turned off, duplicates may be created.
Update User Sourced Id in IPSIS Dashboard
Administrators using Standard CSV and D2L Standard CSV can manually update the Sourced Id (associated with OrgDefinedId) for users in the IPSIS Administration Dashboard, allowing users to modify the unique identifier of a user in case of changes.
Navigate to IPSIS Administration.
Select User Sourced Id.
Manually search for users by Sourced Id.
Update users' Sourced Id as needed.
Click Submit
CSV Functions and Processing
Copy Course Content to New Course
You will be directed to the D2L Standard CSV dashboard. The dashboard is the landing page of the IPSIS Administration Interface.Brightspace offers the ability to copy content from an existing Org Unit when creating a new course.
From IPSIS Administration - Configuration page, scroll down to the Courses and Sections area.
Under When creating a new course, copy content form an existing Org Unit?, select Yes and choose one of the following:Parent course template of the new courseContent will be copied from the parent Course Template to the new child Course OfferingSibling course where the Org Unit Code matches the parent templateContent will be copied form a Master Course Offering to the sibling Course Offering when the Master Course Offering and Course Template share the same Org Unit Code
Processing CSV files
Any CSV file must include differentials only and be zipped. .zip archives can be uploaded to Brightspace two ways:  
Manually by dragging a zip archive from your computer to the drag and drop UI found on in IPSIS Administration - Dashboard.
Programmatically by uploading a zip folder containing the CSV file(s) to the SFTP site provisioned during your initial set up.Brightspace monitors the SFTP site on ten-minute intervals for new zip folders.Note: Only .zip (case sensitive, lowercase only) archives are permitted to be uploaded to SFTP.
D2L Standard CSV Validation Mode
Validation mode is available to IPSIS clients using D2L Standard CSV to help validate CSV files before loading them into IPSIS. Running a .zip file in validation mode allows the IPSIS platform to run all files and provide feedback on missing columns and enumeration (enum) issues.
When in validation mode, files run but do not process any changes in Brightspace. A summary of the run is provided in the IPSIS Administration dashboard.
Use the Mode selector in the IPSIS Administration > D2L Standard CSV page to choose between the available modes (Enable, Disable, Validation).
The validation process includes:
.zip includes CSV files and manifest when required (v1.1, v2.0)
File naming convention meets requirements (orgs, users, enrollments)
Column headers meet requirements
Appropriate number of commas, correct escaping of data
Formats meet requirements (such as date)
Required fields are populated
Encoding is UTF-8
Invalid characters are not included in Org unit codes and names:Org Illegal characters: : % & # * ? < > | \ " ' and leading or trailing spaces.Users Illegal characters: \ / :  ? " < > | ' , ;
Attributes - If header begins with 'LMS Username', the file is assumed to be an attribute file and is sent to Manager Dashboard
Files do not have empty rows
The validation process does not include:
Validation of data in file as it would run against the Learning Environment or with each file. For example, if a Course Template has a parent Department, and the Department was not sent in the Department file, it does not result in an error.
Run the CSV validation process
Access the IPSIS administration dashboard.
Select D2L Standard CSV.
Use the Mode selector to choose Validate.
Use drag and drop or the SFTP server to upload the file for validation.Files are processes immediately when uploaded using the drag and drop function. Files uploaded to the SFTP server are triggered to run periodically.
If you are satisfied that the D2L Standard CSV file does not include any issues, use the mode selector to switch to Enabled mode and run the file again.
Re-Run Batch
IPSIS administrators can re-run the most recent match from the IPSIS Administration Dashboard. 
The Re-Run Batch button is associated with a specific batch on the Dashboard, making it clear which batch is being rerun.
Only the most recent batch can be rerun.
Any previous batches or batches in progress will generate an error.
Troubleshooting
The Dashboard provides the processing status of the latest batch. Both the Dashboard and Batches pages will show a final indicator if the batch completed successfully or with errors. Each batch has a quick link to the Audit Log and if completed with errors to Error Messages.
Review all logs to verify all files processed as expected. If error messages were logged, expand the error to review the metadata captured to identify the error, correct the data in your SIS and export a new zip folder with a CSV file that only contains the necessary changes to correct the errors. The goal is to have the batches completed without error.



--------------------------------------------------


About D2L Standard CSV 2.0/2.1

As a product in the Integration Pack for Information Systems (IPSIS) platform, D2L Standard CSV is used for integrating with SIS/HRIS systems by using simple, D2L-defined Comma-Separated Value (CSV) files that extract data from the information system and import it into Brightspace. These CSV files are text-based files that approximate tables of data in the information system through the use of commas to separate columns. In these files, a value in any one column must not have a comma as part of the text.
D2L Standard CSV is one of the many information system integration options that are commonly used by D2L clients to load and manage courses, semesters, users, and enrollments from their information systems  into Brightspace through a collection of CSV files and some level of automation.
D2L Standard CSV 2.1 is the  latest major version in the D2L family of CSV source system options in the IPSIS platform. 
 The following previous CSV source systems are considered legacy solutions or older versions of the file format for D2L Standard CSV:
IPSIS Integration 1.0 (legacy)
Standard CSV (legacy)
D2L Standard CSV 1.0 and 1.1 (older versions of the CSV file format)
For more information about the each version of D2L Standard CSV and their capabilities, see the IPSIS - Legacy CSV To D2L Standard CSV - Versions, Migrations And Capabilities blog post.
Before you use D2L Standard CSV
Before you start using D2L Standard CSV, note the following important information and expectations:
Access to the data in your information system is required to create extract files used for the import process.
Some information systems have built-in integrations and data export mechanisms that you can use to import data into Brightspace. D2L strongly recommends reading the information system's documentation before using, and then contacting your information system provider to seek guidance on best practices for extracting the required data into the necessary CSV file format.
When a feature is added to D2L Standard CSV that results in a breaking change to the file format, D2L releases the change by increasing the manifest version, indicated in the Manifest.json file. Currently, D2L Standard CSV supports version 1.0, 1.1, 2.0, and 2.1.
After you consult with your D2L Implementation Consultant, D2L Standard CSV is considered a self-serve tool where you create the extract files and transfer them to Brightspace.
The D2L Standard CSV documentation describes the required format of each file for use with SFTP and drag-and-drop. It also describes the results of each action or command you send in the CSV files.
A manifest is required when using version 1.1 or higher of D2L Standard CSV. The manifest is a JSON file that announces the version of D2L Standard CSV you are using.




--------------------------------------------------


Get started with D2L Standard CSV

The following sections describe how to initially set up and configure D2L Standard CSV integration. You must complete these tasks before you can use the D2L Standard CSV integration to import information from your SIS to Brightspace.
Before you begin
If you are currently using the D2L Standard CSV integration, identify your current CSV system and, if necessary, migrate to the new CSV format.
If you are currently using D2L Holding Tank and want to migrate to D2L Standard CSV, review the End Of Life Notice For: SIS - Holding Tank blog post.

Ensure that you have enabled IPSIS Administration and IPSIS platform in Brightspace and have assigned an administrator the required permissions to administer IPSIS. Refer to the Enable the IPSIS Platform in Brightspace topic for details.


Review the About IPSIS Administration (Plug & Play UI) in Brightspace topic.

Once you have completed adding D2L Standard CSV integration to IPSIS Administration, do the following:

Review the Prepare CSV files using the D2L Standard CSV format topic to ensure you have prepared all required files properly.

Add D2L Standard CSV integration to IPSIS Administration
Once you have completed initial set up of IPSIS Platform, you can add the D2L Standard CSV source system to IPSIS Administration. When you initially set up the D2L Standard CSV integration from IPSIS Administration, you can choose how you want the SIS to work with Brightspace using the options available from the Configure Your Integration step.
Note: After initially configuring the integration, you can change the configuration options as needed. From IPSIS Administration, click D2L Standard CSV, and then click the Configuration tab.
Select D2L Standard CSV as your SIS
The first step is select which SIS source system you wish to add.
To select your SIS

From your organization home page, click  Admin Tools.


Under SIS Integration, click IPSIS Administration.


Click Add SIS.


Under Select System Type, select D2L Standard CSV.Figure: The Select your SIS page with D2L Standard CSV selected.


Click Next.

Name and configure your source system
Next, you must name your SIS and configure how your SIS manages changes made in Brightspace.
To name configure your source system

Under Source System, enter an SIS name.


Under Overwriting Brightspace, specify if you want to allow the SIS to overwrite changes in Brightspace:Figure: The Source System section of the Configure Your Integration page.
Yes
No
Sometimes: Select specific people, enrollment, course, section, department, semester, and other org unit fields that you want to allow the SIS to overwrite in Brightspace.

Map SIS role names to Brightspace roles
The next section of the Configure Your Integration page enables you to map role names that exists in your SIS to corresponding user role names in Brightspace.Note: Instructor and Learner roles are included by default; however, you can choose to delete them.Figure: The People section of the Configure Your Integration page.
To map user roles

Under People, click the dropdown under Brightspace Role to select from existing roles. 


If desired,  click + Add Role to add additional SIS role names to map to Brightspace roles.


Under Deletion, specify how a DELETE command in the SIS updates a user's profile in Brightspace. Available options include:
Do nothing: The user mapping is deleted from IPSIS mappings, but the user remains unchanged in Brightspace.Inactivate that user in Brightspace: The user mapping is deleted from IPSIS mappings and the user is marked inactive in Brightspace.Delete the user from Brightspace: The user mapping is deleted from IPSIS mappings and the user is deleted from Brightspace.Important: When a user is deleted in Brightspace, that user's user progress is lost.
Under Map SIS Entries to Existing Users, do the following:If you want to  map SIS user role names to existing Brightspace users, select Attempt to link SIS entries to users already in Brightspace and select either Usernameor Org-defined ID.
Map SIS groups to Brightspace Org Unit types
The next step in Configuring Your Integration is to map  SIS Group names to Brightspace Org Unit type names. For example, Course Offering in your SIS is mapped to CourseOffering in Brightspace. This is managed from the Courses and Sections area.

Figure: The Courses and Sections area of the Configure Your Integration page.
To map SIS group names to Brightspace Org Unit type names

Under Courses and Sections,  click the dropdown under Brightspace Org Unit Type to select from existing Org Unit Types in Brightspace. 


If desired, click + Add Org Unit Typeto add additional SIS group names to map to Brightspace org unit type names.Note: Department and Semester group names are included by default. However, you can choose to delete them.


Under Deletion,   specify what happens in Brightspace when a course or section is deleted in the SIS:

Do nothing


Inactivate course offerings, do nothing to sections


Delete the course or section from BrightspaceNote: When a course or section is deleted, enrollments in that course or section will also be deleted.The IPSIS D2L standard CSV Delete function, when configured to set Org Units as Inactive, successfully sets course offerings to Inactive after all section children have been deleted.



Under Map SIS entries to courses and sections, specify if you want the integration to map the following types of Brightspace org units to their SIS equivalents using org unit codes:
SectionsCourse Offerings
Course TemplatesNote: If mappings are turned off, duplicates may be created.

Under Course Content, specify  whether to copy course content from a master course or a course template to a newly created course. Select from the following:NoYes: If desired, select Find an Org Unit to automatically copy from based on specified criteria? and then choose one of the following options:Parent course template of the new course - Content is copied from the parent Course Template to the new child Course Offering.Sibling course where the Org Unit Code matches the parent template - Content is copied from a Master Course Offering to the sibling Course Offering when the Master Course Offering and Course Template share the same Org Unit Code.You can also choose to Send a notification when the copy jobs are complete. 
Map SIS Departments, Semesters and Other Org Units to Brightspace
The final step in Configure Your Integration is to map SIS Departments, Semesters, and other Org Units to Brightspace.Figure: The Departments, Semesters and Other Org Units section of the Configure Your Integration page.
To map SIS entries to existing org units

From the Departments, Semesters and Other Org Units section, under Map SIS entries to existing org units specify if the integration should attempt to map the following types of Brightspace org units to their SIS equivalents using org unit codes:

Departments


Semesters


Other org unit typesNote: If mappings are turned off, duplicates may be created.



Click Create Source System to move to the next step.

Generate SFTP credentials
To ensure the secure transfer of information in your SIS to Brightspace, the D2L Standard CSV integration allows you to create an SSH File Transfer Protocol (SFTP) site, a method for uploading and downloading your CSV files to a server through an encrypted channel.  
Note the following:
SFTP sites are optional and can be created after setting up the D2L Standard CSV integration. From the IPSIS Administration, select the D2L Standard CSV integration and click the Configuration tab.
Each source system has its own unique SFTP credentials that are provided when you set up your integration.  
D2L recommends generating a new password when you initially create your source system.
To generate SFTP credentials
From the Generate SFTP Credentials page, click Create SFTP Site.Figure: The Create SFTP Site button of the Generate SFTP Credentials page.
Make note of the generated Address and Username and store them in a secure location.
Click Generate Password.
Make note of the password and store it in a secure location. Note: Once the page has been saved, the password is hidden and not recoverable. Passwords can be regenerated. SFTP credentials must be updated when transferring a zip file to the SFTP.
Click Done.
Set up email notifications for D2L Standard CSV processing jobs
You can set up an email notification to alert you each time the D2L Standard CSV integration processes a job from the SIS.
Note the following:
D2L recommends using email notifications instead of SMS, as the email contains more details about the SIS run (successes, failures, and summary). The SMS message only states that a job ran.
Emails are delivered from the Notification Email setup for your environment. If you are having trouble receiving the email and have verified your email address is correct, D2L recommends contacting D2L Support for assistance verifying that your environment is properly set up for email. You may need to check your junk folder for the email, depending on your mail provider.
To set up email notifications
From the navbar, click your user profile icon, and select Notifications.
Under Contact Methods > Email Address, ensure your email address is listed.
Under Instant Notifications > IPSIS Platform - Batch Summary Completion, enable the Email checkbox.
 



--------------------------------------------------


Access the D2L Standard CSV dashboard

IPSIS Administration is an interface in Brightspace used for configuring and reviewing the status of SIS integrations with Brightspace. Once you set up an integration in IPSIS Administration, a dashboard for that integration becomes available for you to process jobs, view log messages, review the audit log, make changes the configuration of the integration, migrate from an existing SIS integration, and update the user sourced Id. From IPSIS Administration, you can access the D2L Standard CSV dashboard.
Note: To access the IPSIS Administration interface, the Access IPSIS Administration Console permission is required.
To access the D2L Standard CSV dashboard
From the Admin Tools menu, click IPSIS Administration.
Click D2L Standard CSV or the custom name of the integration. Figure: The IPSIS Administration interface displaying the D2L Standard CSV dashboard.
Click the Dashboard tab, and do any of the following:				Drag-and-drop (or browse to find) a compatible zip file onto the specified area to trigger an ad-hoc batch run.View a summary of the latest D2L Standard CSV batch (and the ability to re-run the batch to assist with troubleshooting).View links to audit and error messages logs for the latest D2L Standard CSV run.
Note: To schedule processing jobs, click the Configuration tab and set up an SFTP location to drop compatible zip files for processing. Once SFTP is enabled, the D2L Standard CSV integration checks the associated SFTP account every 10 minutes and automatically processes anything it finds. Automated processing should only be leveraged if differentials are being sent. Do not send fulls during business hours due to lengthy processing times which can impact the performance of your Brightspace instance.
Visual Tour: The D2L Standard CSV dashboard
Once you have added the D2L Standard CSV to the IPSIS Administration page, click the tile to open the dashboard. The following is an overview of the IPSIS Administration page if you select D2L Standard CSV:

Figure: An overview of the D2L Standard CSV IPSIS Administration page.

SIS integration name and mode status


SIS integration type


Select from the following tabs:

Dashboard: Upload required .zip folder for integrations and run batches.


Batches: Filter and review all batches that have been run.


Log Messages: Filter, sort, and review log messages such as Errors, Warnings, or Info.


Audit Log: Filter, sort, and review audit log messages.


Org Units: Filter and review configured Org Unit types. For example, D2L Standard CSV has CourseOffering, CourseSection, CourseTemplate, Department, or Semester Org Unit type values.


Configuration:


Migration: Migrate information from another SIS integration  set up in Brightspace.


User Source ID:



Mode: Select from Enabled, Validate, or Disabled.Note: Refer to About D2L Standard CSV Validation Mode for more information about how to use validation mode.

 



--------------------------------------------------


About the Log Messages tab

The System Log tab of D2L Standard CSV is an error log that allows you to view troubleshooting information to help diagnose issues related to your IPSIS integration.
 Filters for Entity Type, Date Range, Ordering, and Error Type make it easier to locate information and see it organized in a more accessible format. High priority error messages display prominently, errors are grouped by type, and technical details are available for each error. Authentication errors are pushed to the System Log instead of displaying in the IPSIS error log. When administrators navigate from the Dashboard or the Batches page to the Error UI, the error messages that appear are specific to a single batch.
View Log Messages
The Log Message page lists activity entries. 
From the Admin Tools menu, click IPSIS Administration.
From the drop-down list, select the date criteria to display log entries for.
The Log Level is set to Any by default, however you can choose any of the following log levels:Information: Indicates regular processing occurring within the system. Information logs provide a view of the ongoing status of the integrations.Warning: Indicates problems with processing a request. However, warning logs do not necessarily mean a misconfiguration or problem with the system.Error : Indicates an error within the system that the administrator should investigate. Error log entries may indicate system misconfiguration and may prevent the integration from working correctly.
 



--------------------------------------------------


Upload CSV files and run a batch

Upload CSV files for processing
After you create CSV files from the data in your SIS and add them to a zip file, you can upload the zip file from the Dashboard tab in IPSIS Administration. You can also upload zip files to the SFTP site created during your initial set up. Brightspace monitors the SFTP site on ten-minute intervals for new zip archives.
Important: All CSV files must include differentials only and be zipped.
From the Admin Tools menu, click IPSIS Administration.
Click D2L Standard CSV or the custom name for the integration.
From the Dashboard tab, drag-and-drop the zip file or browse to it on your computer.
Run a batch
In the IPSIS Administration interface, the Batches tab displays a history of all batch processing jobs you run on your system. It includes a summary that links you to the error and audit logs using each batch’s start and end date/time.
If necessary, you can re-run the most recent batch from the Batches tab. Any previous batches or batches in progress generate an error. 
The name of a batch's zip folder is visible in batch information in IPSIS, and in the batch notifications. Administrators can use this information to easily identify which locally saved batch matches a specific batch process in IPSIS. The zip folder name is visible in the following locations:

On the latest batch status on the IPSIS dashboard


Within each batch status on the Batches tab


As part of the Batch Identifier in the Batch filter on the Log Messages tab


In batch notifications

Note: To see the Batches tab and receive D2L Standard CSV email summaries, the user's role must be configured to Subscribe to Batch Job notifications and the Access IPSIS Administration Console permission is required. 
From the Admin Tools menu, click IPSIS Administration.
Click D2L Standard CSV or the custom name of the integration. The dashboard displays.
Click Batches. A history of all batches run on the system display. Expanding the drop-down arrow provides more details about each batch.
The Re-Run Batch button is associated with a specific batch on the dashboard, making it clear which batch is being rerun. If necessary, select the most recent batch and click Re-Run Batch.




--------------------------------------------------


About D2L Standard CSV Validation Mode

D2L Standard CSV Validation Mode
Validation mode is available to IPSIS clients using D2L Standard CSV to help validate CSV files before loading them into IPSIS. Running a .zip file in validation mode allows the IPSIS platform to run all files and provide feedback on missing columns and enumeration (enum) issues.
When in validation mode, files run but do not process any changes in Brightspace. A summary of the run is provided in the IPSIS Administration dashboard.
Use the Mode selector in the IPSIS Administration > D2L Standard CSV page to choose between the available modes (Enable, Disable, Validation).
The validation process includes:
.zip includes CSV files and manifest when required (v1.1, v2.0)
File naming convention meets requirements (orgs, users, enrollments)
Column headers meet requirements
Appropriate number of commas, correct escaping of data
Formats meet requirements (such as date)
Required fields are populated
Encoding is UTF-8
Invalid characters are not included in Org unit codes and names:Org Illegal characters: : % & # * ? < > | \ " ' and leading or trailing spaces.Users Illegal characters: \ / : * ? " < > | ' , ;
Attributes - If header begins with 'LMS Username', the file is assumed to be an attribute file and is sent to Manager Dashboard
Files do not have empty rows
The validation process does not include:
Validation of data in file as it would run against the Learning Environment or with each file. For example, if a Course Template has a parent Department, and the Department was not sent in the Department file, it does not result in an error.
Run the CSV validation process
Access the IPSIS administration dashboard.
Select D2L Standard CSV.
Use the Mode selector to choose Validate.
Use drag and drop or the SFTP server to upload the file for validation.Files are processes immediately when uploaded using the drag and drop function. Files uploaded to the SFTP server are triggered to run periodically.
If you are satisfied that the D2L Standard CSV file does not include any issues, use the mode selector to switch to Enabled mode and run the file again.




--------------------------------------------------


Update your source system configuration and users' Source ID

Update your source system configuration
Brightspace automatically defaults to your most common settings when you initially configure your D2L Standard CSV source system. However, these settings can be updated at any time, if you have the View IPSIS Configuration Options and Manage IPSIS Configuration Options permissions. 
From the Admin Tools menu, click IPSIS Administration.
Click D2L Standard CSV or the custom name of the integration. The dashboard displays.
Click Configuration.
Updated the configuration details as needed.
Click Save Configuration.
Update a user's Sourced ID
From IPSIS Administration, you can manually update the SIS Sourced ID (associated with the OrgDefinedId) for users. This allows you to modify the unique identifier of a user, if necessary. For example, you may need to modify the identifier due to a typographical error in the .CSV file.
From the Admin Tools menu, click IPSIS Administration.
Click D2L Standard CSV or the custom name of the integration. The dashboard displays.
Click User Sourced ID.
Search for users by full Sourced ID.
Update the users' Sourced IDs as needed.
Click Submit.




--------------------------------------------------


Troubleshoot processing jobs

From IPSIS Administration, the dashboard for the D2L Standard CSV integration provides the processing status of the latest batch, allowing you to review logs and identify any errors that may have occurred. 
Note: To access the IPSIS Administration interface, the Access IPSIS Administration Console permission is required.
From the Admin Tools menu, click IPSIS Administration.
Click D2L Standard CSV or the custom name of the integration. The dashboard displays.
Click any of the following tabs:
The Dashboard and Batches tabs display a final indicator if the batch completed successfully or with errors. Each batch has a quick link to the Audit Log and, if completed with errors, to Log Messages.The Log Messages tab displays log messages for all batch jobs. Defaults to logs from the last 24 hours, sorted by newest at the top. You can apply several filters to the log messages. There is a Group by message check box which, if checked, groups the log details by error message so you can resolve the same type of issue in at once.Tip: Review all logs in the Log Messages tab to verify all files processed as expected. If error messages were logged, expand the error to review the metadata captured to identify the error, correct the data in your SIS, and export a new zip archive with a CSV file that only contains the necessary changes to correct the errors. The goal is to have the batches completed without errors.The Audit Log tab displays a detailed summary of all actions taken, sorted by date (by default). You can apply several filters to the log messages.The Org Units •	 tab displays a complete list of all of the org units that D2L Standard CSV is aware of. This is a good reference for troubleshooting errors related to org units. For example, you can expect that if a particular Org Unit hasn't been created by D2L previously, than all attempted enrollments into that OrgUnit or child OrgUnits under that parent will fail..




--------------------------------------------------


Merge courses using the IPSIS Section Association interface

You can combine multiple course offerings into a single course by merging the course offerings. Merging course offerings moves all enrollments from one course offering to the destination course offering. The original course section becomes a new course section with the same name/code (different OrgUnitID) and becomes associated with the destination course offering parent.
Note the following:
By default, the IPSIS Section Association wizard prompts you to delete the original course offering. If deleted, the original course offering is sent to the recycle bin. If it is not deleted, there are 2 versions of the same course offering. The original course offering will have no section associated with it and no student enrollments. The user (instructor/student) will be enrolled in the destination course offering only and not the original course offering.
By default, merging course offerings deletes the course offerings and section associations that are no longer required.
If an instructor was enrolled into the original course offering before the section association occurred, they can still be enrolled into the course, if it's not deleted. This is the preferred and most comprehensive course merging option.
To access and use the IPSIS Section Association interface, the following IPSIS Section Association permissions (at the organization level) are required: Create Any Section Associations, Delete Any Section Associations, Edit Any Section Associations, View Any Section Associations, View Any Grades for SIS Option on Associations, and Edit Any Grades for SIS Option on Associations.

Figure: The IPSIS Section Association interface
To merge courses using the IPSIS Section Association interface
From the Admin Tools menu, click IPSIS Section Association.
From the Filters panel, under Search Area, click Course Offering.
Review the filters in the panel and make any necessary adjustments, for example, choose All under Status.
In the Search For field, enter the course offering name(s) that you want to merge with another course offering.
On the search results page, do one of the following:From the context menu of the course code, click Merge Course Offering. On the Merge Course Offering page, compile course offerings you want to merge by clicking Add Course Offering.If the course offerings you want to merge display on the same search results page, select the check boxes and click Merge Course Offering.
From the Destination Course Offering list, select Create a New Course Offering.
Click Go.
Click Next.
Review your changes and click Confirm.
Click Done.




--------------------------------------------------


D2L Standard CSV file formats

The file formats accepted by D2L Standard CSV are:
Orgs
Users
Enrollments
Manifest (required when using version 1.1 or higher of D2L Standard CSV)
Manager Dashboard and Learning Groups Attributes
Files are uploaded to a zip archive, using the following recommended naming convention:
D2LStdCSV-{YYYYmmddHHMMSS}.zip
Note: Only .zip (case sensitive, lowercase only) archives are permitted to be uploaded to SFTP.
Files are processed in alphabetical order. D2L recommends sending the files in the following order: 
orgs
users
enrollments
attributes
The recommended naming convention for CSV files is:
01-Other- {YYYYmmddHHMMSS}.csv
02-Departments- {YYYYmmddHHMMSS}.csv
03-Semesters- {YYYYmmddHHMMSS}.csv
04-Templates-{YYYYmmddHHMMSS}.csv
05-Offerings-{YYYYmmddHHMMSS}.csv
06-Sections-{YYYYmmddHHMMSS}.csv
07-Users-{YYYYmmddHHMMSS}.csv
08-Enrollments-{YYYYmmddHHMMSS}.csv
09-Attributes-{YYYYmmddHHMMSS}.csv
manifest.json
Common rules for file content
Values in files are case-sensitive. The instructions detail the required case.
An empty value is represented with two commas with no spaces between them. (for example, “,,” indicates blank value, where as “, ,” indicates a space character, which is parsed as an invalid value).
The CSV files must have a header (first line) that must be an exact match (casing and commas) to that listed in the examples in the sections below
Subsequent lines in the file contain the data to be processed (Created, updated, deleted)
CSV files must be UTF-8 encoded.
CSV files and the manifest must be contained in the zip archive.
CSV files should contain differential SIS data (deltas), rather than complete SIS data drops.
Sending an UPDATE action when the object does not exist results in a CREATE request. Common behavior is to use only the UPDATE and DELETE actions.
A manifest is required when using version 1.1 or higher of D2L Standard CSV. The manifest is a JSON file that announces the version of D2L Standard CSV you are using. For more information, view the Manifest topic.
As a best practice, do not include any Personally Identifiable Information (PII), such as users' names or social insurance numbers, in the Sourced Ids.
Org units
The following Org Unit Types are supported in the integration:
Other org units (custom org units outside of the standard D2L org structure)
Departments
Semesters
Course Templates
Course Offerings
Sections
The D2L Standard CSV integration can create, update, and delete Org Units at the levels listed above.
If sending many Org Unit Types in one CSV file, ensure that hierarchy is respected in the file (for example, Departments should be sent before Course Templates). Failing to send a parent Org Unit before the creation of the child will result in the child Org Unit failing.
If sending user relationships, ensure that the auditors and/or parents/guardians hierarchy is respected in the file (for example, parents/guardians must be sent before learners). Failing to do so results in the relationship failing.
The Org Unit naming conventions (Name/Code) should follow that described in your SIS. Brightspace can accept as many Org Units as needed, Org Unit names and codes can be fed as-is through the csv files as long as names or codes respect Brightspace illegal character requirements and are unique across different Org Unit. Org unit codes will be truncated if more than 50 characters, this could lead to duplication of org unit codes in Brightspace or failure to create an org unit.
Illegal characters: ,:%&#*?<>|\"' and leading or trailing spaces.
Other org units, departments, semesters, course templates, course offerings and course sections
Processing these org units creates the org structure in your Brightspace instance. These must be sent at least once to instruct D2L Standard CSV on which org units it can control. Once the integration controls an org unit, all future changes to that org unit must be made only through the D2L Standard CSV integration to ensure accurate ownership of the data.
You should only resend org units when they are newly created or updated in your SIS/HRIS.
D2L Standard CSV can:
Create a new org unit, if it doesn’t exist.
Map to an existing org unit if it was created by a different source then D2L Standard CSV and the option to map is selected in the configuration.
Update the name of an org unit that it controls.
Course template: assign and update parent Department based on the Department code.
Course offering: assign and update parent course template and semester based on the parent code.
Course offering: Update all course details including course offering name and dates. Inactivate Course Offering.
Course section: Deleting a course section automatically unenrolls users from the deleted section.
Delete an org unit that it controls.
D2L Standard CSV does not:
Update org unit codes.
Delete manually created org units unless they are mapped with D2L Standard CSV.
Delete an org unit if it has children linked to it (children must be deleted first).Exception: if sections are set up for deletion in the interface, course offerings can be deleted if a section is linked to it.UsersProcessing the user type creates, updates, inactivates or deletes users in Brightspace. The user type could also create, update, or delete the parent-child relationship in Brightspace. Users must be sent at least once to instruct the integration on which users it is able to create, update, or delete and manage enrollments.Illegal characters consist of: \ / :  ? " < > | ' , ;D2L Standard CSV can:Create a new user if it doesn’t already exist and enroll it in the organization.Update Username, First Name, Last Name, Preferred First Name, Preferred Last Name, Sortable Last Name (optional), Password, and Email.Password is not required and recommended not to be sent if using Single-Sign-On (SSO).Update the org level role.Activate, inactivate, or delete a user.If a user exists with same OrgDefinedID, then it can be mapped to the existing user.Update a parent/guardian-child relationship for Brightspace Parent & Guardian.Update an auditor-auditee relationship.ORIf a user exists with same ‘Username’ then it can be mapped to the existing userD2L Standard CSV does not:Update OrgDefinedId; however, this can be done manually in the IPSIS administration interface.Delete manually created users, unless they are mapped with D2L Standard CSV.Note: For users in countries including the Netherlands, Belgium and Sri Lanka, some surnames (such as Van der Speigle or Van Gogh) have one or more prefixes (known in Dutch as Tussenvoegsel) that are part of the formal last name. In some cases, the sortable last name should not include those prefixes. Administrators can indicate if a user's Legal Last Name differs from the Sortable Last Name. If clients include a Sortable Last Name, Brightspace uses the Sortable Last Name when alphabetizing user lists.EnrollmentsProcessing the enrollment type records enrolls or unenrolls users in a specific org unit in Brightspace. Enrollments should be sent when changes are made in the information system to accurately reflect those changes in Brightspace. An unenrollment should only be sent once. Resending the same unenrollment records warnings in your IPSIS log.D2L Standard CSV can:Enrolls users in org units.Un-enroll users in org units.Manager Dashboard and Learning Groups AttributesUsing D2L Standard CSV, Manager Dashboard and Learning Groups Attributes can:Establish the reporting structure that is used within Manager DashboardProvide attributes to allow for automatic membership rules to be created in Learning GroupsManager Dashboard and Learning Groups Attributes via D2L Standard CSV does not:Create new user accounts




--------------------------------------------------


D2L Standard CSV file relationships

The following file matrix image shows how each D2L Standard CSV column maps from one CSV file to the next. The codes in identical color-coded cells should match to create a successful link from one action to the next. For example, in the Department CSV file, the UPDATE action for code: testdepartment should map to  the UPDATE action for department_code: testdepartment in the Course Template CSV file.

Figure: A file matrix that shows how each Brightspace column maps from one CSV file to the next.
Orgs - Other
The following lists 3 rows of sample content for Other org units (along with the required header line). The file consists of 12 mandatory columns, each must be populated with a valid value or left empty depending on the file format.

type,action,code,name,start_date,end_date,is_active,department_code,template_code,semester_code,offering_code,custom_code
school,UPDATE,school101,Brightspace School,,,1,,,,,
program,UPDATE,program101,Brightspace Program Beginner,,,1,,,,,school101
program,UPDATE,program201,Brightspace Program Advance,,,1,,,,,school101

Column
Field
Required
Possible Values
Notes
1
type
Required
Name of other org unit set up in IPSIS Admin – Config 
Must be lowercase. Must be mapped in IPSIS Configuration.  
2
action
Optional
CREATE, UPDATE, DELETE 
Case insensitive. If not specified, default is UPDATE 
3
code
Required
 
The code you use must be a unique value to identify one specific Org Unit and is case sensitive. it can be any alphanumeric value, however should not include commas or invalid characters. Codes with more than 50 characters will be truncated. 
4
name
Required
 
Name of Other org unit.  
5
start_date
N/A
 
ignored
6
end_date
N/A
 
ignored
7
is_active
N/A
 
ignored
8
department_code
N/A
 
ignored
9
template_code
N/A
 
ignored
10
semester_code
N/A
 
ignored
11
offering_code
N/A
 
ignored
12
custom_code
Optional
 
Specifies a parent by Other Org Unit code. Supports pipe separation for multiple parents. 
Orgs - Department
The following lists 3 rows of sample content for a Department (along with the required header line). The file consists of 12 mandatory columns, each must be populated with a valid value or left empty depending on the file format.

type,action,code,name,start_date,end_date,is_active,department_code,template_code,semester_code,offering_code,custom_code 
department,UPDATE,dept_bright,Brightspace Beginner,,,,,,,,program101|school101 
department,UPDATE,dept_space,Brightspace Advance,,,,,,,,program201|school101 
department,UPDATE,dept_comb,Brigthspace 
Combined,,,,,,,,program101|program201|school101 

Column
Field
Required
Possible Values
Notes
1
type
Required
Name of other org unit set up in IPSIS Admin – Config 
Must be lowercase. 
2
action
Optional
CREATE, UPDATE, DELETE 
Case insensitive. If not specified, default is UPDATE 
3
code
Required
 
The code you use must be a unique value to identify any one specific Org Unit and is case sensitive. it can be any alphanumeric value, however should not include commas. Codes with more than 50 characters will be truncated. 
4
name
Required
 
Name of Department
5
start_date
N/A
 
ignored
6
end_date
N/A
 
ignored
7
is_active
N/A
 
ignored
8
department_code
N/A
 
ignored
9
template_code
N/A
 
ignored
10
semester_code
N/A
 
ignored
11
offering_code
N/A
 
ignored
12
custom_code
Optional
 
Other Org Unit code. Supports pipe separation for multiple parents. 
Orgs - Semester
The following lists 3 rows of sample content for a Semester (along with the required header line). The file consists of 12 mandatory columns, each must be populated with a valid value or left empty depending on the file format.

type,action,code,name,start_date,end_date,is_active,department_code,template_code,semester_code,offering_code,custom_code 
semester,UPDATE,sem_bright,Beginner Semester,,,,,,,,program101 
semester,UPDATE,sem_space,Advance Semester,,,,,,,,program101 
semester,UPDATE,sem_2020,2020 Semester,,,,,,,,program101|program201 

Column
Field
Required
Possible Values
Notes
1
type
Required
semester
Must be lowercase. 
2
action
Optional
CREATE, UPDATE, DELETE 
Case insensitive. If not specified, default is UPDATE 
3
code
Required
 
The code you use must be a unique value to identify any one specific Org Unit and is case sensitive. it can be any alphanumeric value, however should not include commas. Codes with more than 50 characters will be truncated. 
4
name
Required
 
Name of Semester
5
start_date
N/A
 
ignored
6
end_date
N/A
 
ignored
7
is_active
N/A
 
ignored
8
department_code
N/A
 
ignored
9
template_code
N/A
 
ignored
10
semester_code
N/A
 
ignored
11
offering_code
N/A
 
ignored
12
custom_code
Optional
 
Other Org Unit code. Supports pipe separation for multiple parents. 
Orgs - Course Template
The following lists 3 rows of sample content for a course template Org Unit (along with the required header line). The file consists of 12 mandatory columns, each must be populated with a valid value or left empty depending on the file format.

type,action,code,name,start_date,end_date,is_active,department_code,template_code,semester_code,offering_code,custom_code 
course template,UPDATE,ct_bright,BP Beginner,,,,dept_bright,,,,program101 
course template,UPDATE,ct_space,BP Advance,,,,dept_space,,,,program201 
course template,UPDATE,ct_comb,BP Combined 
Courses,,,,dept_bright,,,,program101|program201 

Column
Field
Required
Possible Values
Notes
1
type
Required
course template
Must be lowercase. 
2
action
Optional
CREATE, UPDATE, DELETE 
Case insensitive. If not specified, default is UPDATE 
3
code
Required
 
The code you use must be a unique value to identify any one specific Org Unit and is case sensitive. it can be any alphanumeric value, however should not include commas. Codes with more than 50 characters will be truncated. 
4
name
Required
 
Name of course template 
5
start_date
N/A
 
ignored
6
end_date
N/A
 
ignored
7
is_active
N/A
 
ignored
8
department_code
Required
 
Department Org Unit code Supports pipe separation for multiple parents 
9
template_code
N/A
 
ignored
10
semester_code
N/A
 
ignored
11
offering_code
N/A
 
ignored
12
custom_code
Optional
 
Other Org Unit code. Supports pipe separation for multiple parents. 
Orgs - Course Offering
The following lists 4 rows of sample content for a course offering (along with the required header line). The file consists of 12 mandatory columns, each must be populated with a valid value or left empty depending on the file format.

type,action,code,name,start_date,end_date,is_active,department_code,template_code,semester_code,offering_code,custom_code 
course offering,UPDATE,brightbeg101,Beginner Course Name1,2020-01-01,2020-12-02,1,dept_bright,ct_bright,sem_bright|sem_2020,,program101|school101 
course offering,UPDATE,brightbeg102,Beginner Course Name2,2020-01-01,2020-12-02,1,dept_bright,ct_bright,sem_bright|sem_2020,,program101|school101 
course offering,UPDATE,brightadv201,Advance Course Name1,2020-01-01,2020-12-02,1,dept_space,ct_space,sem_space|sem_2020,,program201|school101 
course offering,UPDATE,brightcomb,Combined Course Name,2020-01-01,2020-12-02,1,dept_space,ct_comb,sem_bright|sem_2020,,program101|program201|school101 

Column
Field
Required
Possible Values
Notes
1
type
Required
course offering
Must be lowercase. 
2
action
Optional
CREATE, UPDATE, DELETE 

Case insensitive. If not specified, default is UPDATE.

3
code
Required
 
The code you use must be a unique value to identify any one specific Org Unit and is case sensitive. it can be any alphanumeric value, however should not include commas. Codes with more than 50 characters will be truncated. 
4
name
Required
 
Name of course offering 
5
start_date
Optional
yyyy-mm-dd yyyy-mm-ddThh:mm:ss.fff  
If no time is specified default time is T00:00:00.000 
6
end_date
Optional
yyyy-mm-dd yyyy-mm-ddThh:mm:ss.fff  
If no time is specified default time is T00:00:00.000 
7
is_active
Optional
1, 0, TRUE, FALSE 
If not specified, default is 1. Case insensitive. 
8
department_code
N/A
 
ignored
9
template_code
Required
 
Course template Org Unit code Supports pipe separation for multiple parents 
10
semester_code
Required
 
Semester Org Unit code Supports pipe separation for multiple parents 
11
offering_code
N/A
 
ignored
12
custom_code
Optional
 
Other Org Unit code. Supports pipe separation for multiple parents. 
Orgs - Course Section 
The following lists 5 rows of sample content for a course section (along with the required header line). The file consists of 12 mandatory columns, each must be populated with a valid value or left empty depending on the file format.

type,action,code,name,start_date,end_date,is_active,department_code,template_code,semester_code,offering_code,custom_code 
course section,UPDATE,sec101,Beginner Course Name AM,,,,,,,brightbeg101, 
course section,UPDATE,sec102,Beginner Course Name,,,,,,,brightbeg102, 
course section,UPDATE,sec103,Beginner Course Name PM,,,,,,,brightbeg101, 
course section,UPDATE,sec201a,Advance Course Name,,,,,,,brightadv201, 
course section,UPDATE,seccomb,Combined Course Name,,,,,,,brightcomb, 

Column
Field
Required
Possible Values
Notes
1
type
Required
course section
Must be lowercase. 
2
action
Optional
CREATE, UPDATE, DELETE 
Case insensitive. If not specified, default is UPDATE 
3
code
Required
 
The code you use must be a unique value to identify any one specific Org Unit and is case sensitive. it can be any alphanumeric value, however should not include commas. Codes with more than 50 characters will be truncated. 
4
name
Required
 
Name of course section
5
start_date
N/A
 
ignored
6
end_date
N/A
 
ignored
7
is_active
N/A
 
ignored
8
department_code
N/A
 
ignored
9
template_code
N/A
 
ignored
10
semester_code
N/A
 
ignored
11
offering_code
Required
 
Course offering org code Pipe separation not supported 
12
custom_code
N/A
 
Not supported. Must be null.




--------------------------------------------------


Users

The following lists 5 rows of sample content for a user (along with the required header line). The file consists of 13 mandatory columns, each must be populated with a valid value or left empty depending on the file format.

type,action,username,org_defined_id,first_name,last_name,password,is_active,role_name,email,relationships,pref_first_name,pref_last_name  
user,UPDATE,jparent,jparent1,Joseph,Parent,,1,Parent,jparent@brightspacedemo.com,,Joe, user,UPDATE,pparent,pparent1,Patty,Parent,,1,Parent,pparent@brightspacedemo.com,,Patricia, user,UPDATE,tteacher,tteacher1,Tammy,Teacher,,1,Teacher,tteacher@brightspacedemo.com,,Tamtam, user,UPDATE,sstudent,sstudent1,Sammy,Student,,1,Student,sstudent@brightspacedemo.com,Parent:jparent1|Parent:pparent1,Sam, user,UPDATE,wstudent,wstudent1,Will,Student,,1,Student,wstudent@brightspacedemo.com,Parent:jparent1|Parent:pparent1,Joe Jr., 

Column
Field
Required
Possible Values
Notes
1
type
Required
user
Must be lowercase. 
2
action
Optional
CREATE, UPDATE, DELETE 
Case insensitive. If not specified, default is UPDATE 
3
username
Required
 
username
4
org_defined_id
Required
 
The code you use for the OrgDefinedId must be a unique value used to identify any one specific user only. D2L recommends using SIS SourceID.  
5
first_name
Required
 
 
6
last_name
Required
 
 
7
password
Optional
 
If a password is not specified, Brightspace will generate a password. If a password is not specified and you are logging in using native authentication, on the Brightspace login page, click Forgot your password? to reset your password. 
8
is_active
Required
1, 0, TRUE, FALSE 
Case insensitive. 
9
role_name
Required
 
Role name at the organization level 
10
email
Optional
 
 
11
relationships
Optional
Parent,Auditor Format:  Parent:orgdefinedid 
Supports pipe separation for multiple parents.   Explicitly updates, to remove a relationship, relationship should not be in file. 
12
pref_first_name
Optional
 
 
13
pref_last_name
Optional
 
 




--------------------------------------------------


Users (Version 2.1 – including Sort Last Name)

The following lists 5 rows of sample content for a user (along with the required header line). The file consists of 14 mandatory columns, each must be populated with a valid value or left empty depending on the file format.

type,action,username,org_defined_id,first_name,last_name,password,is_active,role_name,email,relationships,pref_first_name,pref_last_name,sort_last_name
user,UPDATE,jparent,jparent1,Joseph,Parent,,1,Parent,jparent@brightspacedemo.com,,Joe,, 
user,UPDATE,pparent,pparent1,Patty,Parent,,1,Parent,pparent@brightspacedemo.com,,Patricia,,van de
user,UPDATE,tteacher,tteacher1,Tammy,Teacher,,1,Teacher,tteacher@brightspacedemo.com,,Tamtam,,user,UPDATE,sstudent,sstudent1,Sammy,Student,,1,Student,sstudent@brightspacedemo.com,Parent:jparent1|Parent:pparent1,Sam,,user,UPDATE,wstudent,wstudent1,Will,Student,,1,Student,wstudent@brightspacedemo.com,Parent:jparent1|Parent:pparent1,Joe Jr.,,van den

Column
Field
Required
Possible Values
Notes
1
type
Required
user
Must be lowercase. 
2
action
Optional
CREATE, UPDATE, DELETE 
Case insensitive. If not specified, default is UPDATE 
3
username
Required
 
username
4
org_defined_id
Required
 
The code you use for the OrgDefinedId must be a unique value used to identify any one specific user only. D2L recommends using SIS SourceID.  
5
first_name
Required
 
 
6
last_name
Required
 
 
7
password
Optional
 
If a password is not specified, Brightspace will generate a password. If a password is not specified and you are logging in using native authentication, on the Brightspace login page, click Forgot your password? to reset your password. 
8
is_active
Required
1, 0, TRUE, FALSE 
Case insensitive. 
9
role_name
Required
 
Role name at the organization level 
10
email
Optional
 
 
11
relationships
Optional
Parent,Auditor Format:  Parent:orgdefinedid 
Supports pipe separation for multiple parents.   Explicitly updates, to remove a relationship, relationship should not be in file. 
12
pref_first_name
Optional
 
 
13
pref_last_name
Optional
 
 
14
sort_last_name
Optional
 
 




--------------------------------------------------


Manager Dashboard and Learning Groups Attributes

The following lists 3 rows of sample content for an Attributes file (along with the required header line). The file consists of 13 columns, each of which must be populated with a valid value or left empty depending on the file format.

LMS Username,Company Employee Id,Company Name,Department,Division,Employee Role,Hired Date,Location,Manager,Region,Role Category,Team, Affiliated Org Units 
Manny Manager,ID-004,D2L,Production,HQ,Department Manager,2017-05-22,HQ,Leslie Smith,Canada,,Manny's Team,1501
 john.smith,ID-005,D2L,Production,HQ,Junior Team Lead,2018-01-15,HQ,Manny Manager,Canada,,Manny's Team,, 
Sophia Smith,ID-006,D2L,Production,HQ,Senior Team Lead,2018-01-15,HQ,Manny Manager,Canada,,Manny's Team,, 

Column
Field
Required
Notes
1
LMS Username
Required
Username
2
Company Employee ID 
Optional
String
3
Company Name 
Optional
String
4
Department
Optional
String
5
Division
Optional
String
6
Employee Role 

Optional
Recommended


String 
Displayed in Manager Dashboard and Learning Groups 

7
Hired Date 
Optional
YYYY-MM-DD 
8
Location
Optional
String
9
Manager

Optional
Recommended


Username 
Creates the reporting structure hierarchy used in Manager Dashboard 

10
Region
Optional
String
11
Role Category
Optional
String
12
Team

Optional
Recommended


String 
Displayed in Manager Dashboard. Used for the Team Name in the reporting hierarchy structure. 

13
Affiliated Org Units 
Optional
Org Unit Code 




--------------------------------------------------


Enrollments

The following lists 5 rows of sample content for an enrollment (along with the required header line). The file consists of 5 mandatory columns, each must be populated with a valid value or left empty depending on the file format.

type,action,child_code,role_name,parent_code 
enrollment,UPDATE,sstudent1,Student,sec101 
enrollment,UPDATE,tteacher1,Teacher,sec101 
enrollment,UPDATE,tteacher1,Teacher,sec102 
enrollment,UPDATE,tteacher1,Student,sec103 
enrollment,UPDATE,wstudent1,Student,sec101 

Column
Field
Required
Possible Values
Notes
1
type
Required
enrollment
Must be lowercase. 
2
action
Optional
CREATE, UPDATE, DELETE 
Case insensitive. If not specified, default is UPDATE 
3
child_code
Required
 
OrgDefinedId
4
role_name
Required
 
Org unit role. This role can be different than the role used when creating a user. 
5
parent_code
Required
 
Org unit code for enrollment 




--------------------------------------------------


Ellucian ILP

Ellucian’s Intelligent Learning Platform (ILP) provisions users, org units, and enrollments from Banner by Ellucian or Colleague by Ellucian student information systems (SIS’s) to the Brightspace platform. The Ellucian ILP integration with IPSIS is based on the LIS 2.0 specification. For more information on the LIS 2.0 adapter in IPSIS, see The LIS v2.0 Adapter section.
Before you begin an Ellucian ILP integration
To make use of this integration, administrators must:
Purchase an ILP SaaS environment from Ellucian (http://www.ellucian.com/Software/Ellucian-Intelligent-Learning-Platform/).
Purchase D2L Standard SIS integration.
For more information, contact your D2L Account Manager.
 
Ellucian ILP mapping values
The following table shows how the Ellucian ILP values relate to those in the Brightspace platform.
 
User
Ellucian ILP
Brightspace platform
id
Org Defined Id
firstName
User First Name
lastName
User Last Name
preferredfirstName
User Preferred First Name
email
Email
userName
UserName
primaryInstitutionrole
Org Role
 
Term
Ellucian ILP
Brightspace platform
id
Org Unit Code
name
Org Unit Name
 
Course Section
Ellucian ILP
Brightspace platform
id
Section SIS Id, Section Code
title
Course SIS Id, Course Name, Section Name
label
Course Code
parent
Template SIS Id, Template Name, Template Code
department
Department Name
term
Semester Id
departmentId
Department SIS Id, Department Code
startDate
Course Start Date
endDate
Course End Date
status
Course is Active
 
Association
Ellucian ILP
Brightspace platform
sectionAssociationId
Course Offering Code
label
Not mapped
title
Course Offering Name
courseSectionIds
Section Org Unit Code
Note: Section association requests do not include the start and end date. As a result, Brightspace uses the oldest start date and latest end date from the two courses being merged.
Mandatory Last Date of Attendance
Administrators can apply a Last Date of Attendance (LDA) to Ellucian ILP integrations that require instructors to enter LDA information for specific grade items.
From the Admin Tools menu, under SIS Integrations, select IPSIS Administration.
Under IPSIS Administration, select Ellucian ILP.
Click Configurations.
Under Grades Export, in the Require Last Date of Attendance field, enter grade items that require instructors to enter a date of last attendance for learners.
Click Save Configuration.




--------------------------------------------------


Manifest

A manifest is required for D2L Standard CSV. The manifest is a JSON file that announces the version of D2L Standard CSV you are using, the version in the JSON files should match the version of IPSIS that your CSV outputs are currently aligned to. Below is the expected data structure to be included in the JSON file, using D2L Standard CSV version 2.0.
{
"version":"2.0"
}
 
For D2L Standard CSV Version 2.1, the expected data structure is as follows:
{
"version":"2.1"
}



--------------------------------------------------


Set up OneRoster v1.1 integration

OneRoster is the standard IMS Global specification designed to allow secure sharing of class rosters and related data between a student information system (SIS) and any other system. OneRoster 1.1 is a major upgrade to the educational content, tool, and platform roster related standard.
OneRoster  supports spreadsheet (CSV) export-import as well as direct system exchanges using REST API’s. IPSIS in the Brightspace platform supports the IMS OneRoster v1.1 specification, which allows secure sharing of class rosters and related data between a student information system (SIS) and the Brightspace platform. More specifically, the Brightspace platform is IMS Global Certified in the following conformance certifications:
OneRoster v1.1 CSV Rostering Import Bulk
OneRoster v1.1 CSV Rostering Import Delta
OneRoster v1.1 REST Data Consumer Rostering Core
Set up roles for OneRoster
Before you configure your OneRoster integration in the IPSIS administration area, you must complete the following:
Review the roles that are configured in your SIS and the corresponding roles that are mapped. The following roles are available in OneRoster:AdministratorAideGuardianParentProctorRelativeStudentTeacher
For any of the above roles you want to send into the Brightspace platform, you must set up a mapping when you create the SIS integration. If there isn’t already an appropriate role in the Brightspace platform, create one before you configure your SIS Integration.
Set up Org Unit Types:
Review the org unit types that are configured in your SIS and the corresponding roles that are mapped. The following org types are available in OneRoster:NationalStateLocalDistrictSchool (mandatory)Department
For any of the above org unit types that you want to send into the Brightspace platform, you must set up a mapping when you create the SIS Integration, which map to org unit types in the LMS. If there isn’t already an appropriate org unit type in the Brightspace platform, create one before you configure your SIS integration.
About user relationships
Note: This information is for K-12 clients who want to use Brightspace Parent & Guardian.
Your institution is responsible for maintaining the accuracy of user relationships in your Student Information System (SIS). Consult with your advisers to ensure you adhere to your institution’s privacy and security policies, and applicable laws. For example, your institution or jurisdiction might have a policy or law that specifies when a child turns 18, the parent/legal guardian should no longer have access to their child's content, unless the child consents to granting access; this case needs to be handled while generating and sending Parent/Guardian-child relationships to Brightspace.
Configure a REST SIS integration
In your organization’s SIS, generate a OneRoster Consumer for the Brightspace platform with which to call into your SIS. Note: The process for this varies depending on your SIS. Consult your SIS representative for more information.
Record the OAuth Credentials from your SIS.
Record the URL of your SIS’s OneRoster endpoint. For example, https://www.sis.com/school/api. Note: Do not include ims/oneroster/v1p1 on the end of the URL. D2L does this within the IPSIS Service.
Complete the configuration in the new IPSIS administration area. 
From the Data Exchange Format drop-down list, select REST.Note: If you have existing records you want to match with the OneRoster data, ensure that for the questions pertaining to linking Brightspace platform data with their SIS equivalents, you select the appropriate options.
In the Scheduled Updates field, select the time each day that you want your REST integration to update automatically.
When you save your integration, it will begin to process when the time of the next scheduled update occurs. If you want to run your integration immediately, on the Batches page, from the Run Update Now button, select Resync all SIS records.
Configure a CSV SIS integration
Create a CSV file with your roster related data.
Complete the configuration in the new IPSIS administration area (see the IPSIS administration for new SIS integrations section). From the Data Exchange Format drop-down list, select CSV drag & drop.Note: If you have existing records you want to match with the OneRoster data, ensure that for the questions pertaining to linking Brightspace platform data with their SIS equivalents, you select the appropriate options.
On the Batches page, drag and drop or browse and select a ZIP file containing the CSV file with your roster related data.
Your integration begins to process automatically.
Verify a OneRoster integration
There are several ways to verify a OneRoster integration:
To find out if a REST integration completed, go to the Audit log (in the original IPSIS administration interface) and refresh the page to check if all the record types you expected (user, org unit, and so on) have run.
To find out if a CSV integration completed, do one of the following:When you drag and drop or select a CSV ZIP file, a processing indicator displays on the Batches page of that source system. When it is done, refresh the page and the indicator updates to display Completed.Go to the Audit log and refresh the page to check if all the record types you expected (user, org unit, and so on) have run.
To find out if either type of integration completed, do either of the following:For org units, you can use the Org Unit Editor to review all org units that were created and make updates, if necessary.For users, you can use the Users tool to review all users that were created and make updates, if necessary.
Troubleshooting a OneRoster integration
If on your first run of either type of OneRoster integration an error occurs, try to reprocess the integration.
To reprocess a CSV integration:
On the Batches page, drag and drop your CSV ZIP file into the designated area again.
If the CSV ZIP file is corrupt, generate a new file from your SIS and drag and drop it into the interface to process it again.
To reprocess a REST integration:
On the Batches page, from the Run Update Now button, select either of the following:Resync updates - you can select the earliest date from which you want to synchronize only updates made to the data. Then click Resync.Resync all SIS records - you can pull all of the data from your SIS again, with no time constraint.
OneRoster mapping values
OneRoster object types do not map exactly with those in the Brightspace platform. The following table shows how the OneRoster values relate to those in the Brightspace platform. 

OneRoster value


Brightspace platform value


Academic Sessions


Org Units*


Orgs


Org Units*


Courses


Course Templates


Classes


Course Offering & Course Section


Users


User


Enrollments


Enrollment

*The org unit type that each object is mapped to depends on the configuration of the mapping sections for the SIS integration in the IPSIS administration area.
REST mapping values
Academic Sessions

OneRoster


Supported values


Brightspace platform


Required


SourcedId


 


Internal tracking


Y


Status


active, tobedeleted


Active


Y


DateLastModified


YYYY-MM-DDTHH:mm:SS.sssZ


Internal tracking


Y


MetaData


 


Mapped


 


Title


 


Org Unit Name and Org Unit Code


Y


StartDate


YYYY-MM-DD


Internal tracking


Y


EndDate


YYYY-MM-DD


Internal tracking


Y


Type


 


Org Unit Type


Y


Parent


 


Mapped


 


Children


 


Mapped


 


SchoolYear


 


Mapped


 

Orgs

OneRoster


Supported values


Brightspace platform


Required


SourcedId


 


Internal tracking


Y


Status


active, tobedeleted


Active


Y


DateLastModified


YYYY-MM-DDTHH:mm:SS.sssZ


Internal tracking


Y


MetaData


 


Mapped


 


Name


 


Org Unit Name and Org Unit Code


Y


Identifier


 


Org Unit Code (if provided)


N


StartDate


YYYY-MM-DD


Internal tracking


Y


EndDate


YYYY-MM-DD


Internal tracking


Y


Type


 


Org Unit Type


Y


Parent


 


Parents


N


Children


 


Mapped


 

Courses

OneRoster


Supported values


Brightspace platform


Required


SourcedId


 


Internal tracking


Y


Status


active, tobedeleted


Active


Y


DateLastModified


YYYY-MM-DDTHH:mm:SS.sssZ


Internal tracking


Y


MetaData


 


Mapped


 


Title


 


Org Unit Name and Org Unit Code


Y


SchoolYear


 


Parents


N


CourseCode


 


Org Unit Code (if provided)


N


Grades


 


Mapped


 


Subjects


 


Mapped


 


Org


 


Parents


N


StartDate


YYYY-MM-DD


Internal tracking


 


EndDate


YYYY-MM-DD


Internal tracking


 


SubjectCodes


 


Mapped


 


Resources


 


Mapped


 

Classes

OneRoster


Supported values


Brightspace platform


Required


SourcedId


 


Internal tracking


Y


Status


active, tobedeleted


Active


Y


DateLastModified


YYYY-MM-DDTHH:mm:SS.sssZ


Internal tracking


Y


MetaData


 


Mapped


 


Title


 


Org Unit Name and Org Unit Code


Y


ClassCode


 


Org Unit Code (if provided)


N


ClassType


 


Mapped


 


StartDate


YYYY-MM-DD


Course Start Date


N


EndDate


YYYY-MM-DD


Course End Date


N


Location


 


Mapped


 


Grades


 


Mapped


 


Subjects


 


Mapped


 


Course


 


Parents


N


School


 


Parents


Y


Terms


 


Parents


N


SubjectCodes


 


Mapped


 


Periods


 


Mapped


 


Resources


 


Mapped


 

Users

OneRoster


Supported values


Brightspace platform


Required


SourcedId


 


OrgDefinedId


Y


Status


active, tobedeleted


IsActive


Y


DateLastModified


YYYY-MM-DDTHH:mm:SS.sssZ


Internal tracking


Y


MetaData


 


Mapped


 


UserName


 


UserName


Y


UserIds


 


Mapped


 


EnabledUser


 


IsActive


Y


GivenName


 


FirstName


Y


FamilyName


 


LastName


Y


MiddleName


 


MiddleName


N


Role


 


Role In Org


Y


Identifier


 


OrgDefinedId (if provided)


N


Email


 


ExternalEmail


N


Sms


 


MobilePhone


N


Phone


 


HomePhone


N


Agents


 


Mapped


 


Orgs


 


Upper Org Unit Enrollments (with role in org)


 


Grades


 


Mapped


 


Password


 


Mapped


 

Enrollments

OneRoster


Supported values


Brightspace platform


Required


SourcedId


 


Internal tracking


Y


Status


active, tobedeleted


Active


Y


DateLastModified


YYYY-MM-DDTHH:mm:SS.sssZ


Internal tracking


Y


MetaData


 


Mapped


 


User


 


User to Enroll


Y


Class


YYYY-MM-DD


Class & Section to Enroll in


Y


School


YYYY-MM-DD


Mapped


 


Role


 


Role


Y


Primary


 


Mapped


 


BeginDate


 


Mapped


 


EndDate


 


Mapped


 

 
CSV mapping values
Academic Sessions
OneRoster
Supported values
Brightspace mappings
Required
Notes

SourcedId


 


 

Y

 


Status


active, tobedeleted


 

N

Field is required for files in delta mode.


DateLastModified


 


 

N

Field is required for files in delta mode.
Date Format YYYY-MM-DDTHH:mm:SS.sssZ


Title


 


Org Unit Name and Org Unit Code

Y

 


Type


 


 

Y

Org Unit Type


StartDate


 


 

Y

YYYY-MM-DD


EndDate


 


 

Y

YYYY-MM-DD


ParentSourcedId


 


 

N

Not Used


SchoolYear


 


 

N

Not Used

 
Orgs
OneRoster
Supported values
Brightspace mappings
Required
Notes

SourcedId


 


 


Y

 

Status


active, tobedeleted


 


N

Field is required for files in delta mode.

DateLastModified


 


 


N

Field is required for files in delta mode.Date Format YYYY-MM-DDTHH:mm:SS.sssZ

Name


 


Org Unit Name and Org Unit Code


Y

If the Identifier field is empty, the Name is copied in the Org Unit Code in Brightspace

Type


national, state, local, district, school, department


 


Y


Defines the OrgUnitType in Brightspace.
http://www.imsglobal.org/oneroster-v11-final-specification#_Toc480452024


Identifier


 


Org Unit Code (if provided)


N

 

ParentSourcedId


 


 


N

This field specifies the parent org unit.
 
Courses
OneRoster
Supported values
Brightspace mappings
Required
Notes

SourcedId


 


 


Y

 

Status


active, tobedeleted


 


N

Field is required for files in delta mode.

DateLastModified


 


 


N

Field is required for files in delta mode.Date Format YYYY-MM-DDTHH:mm:SS.sssZ

SchoolYearSourcedId


 


 


N

Not used

Title


 


Org Unit Name and Org Unit Code


Y

Creates a Brightspace Course Template.If the CourseCode field is empty, the Title is copied into the OrgUnitCode.

CourseCode


 


Org Unit Code


N

If provided

Grades


 


 


N

Not used

OrgSourcedId


 


 


Y

This field specifies the parent org unit.

Subjects


 


 


N

Not used

SubjectCodes


 


 


N

Not used
 
Classes
OneRoster
Supported values
Brightspace mappings
Required
Notes

SourcedId


 


 


Y

 

Status


active, tobedeleted


 


N

Field is required for files in delta mode.

DateLastModified


 


 


N


Field is required for files in delta mode.
Date Format YYYY-MM-DDTHH:mm:SS.sssZ


Title


 


Org Unit Name and Org Unit Code


Y

Creates a Brightspace Section and Course Offering.If the ClassCode field is empty, the Title is copied into the Org Unit Code.

Grades


 


 


N

Not used

CourseSourcedId


 


 


Y

This field specifies the parent org unit

ClassCode


 


Org Unit Code (if provided)


N

If provided

ClassType


 


 


Y

Not used

Location


 


 


N

Not used

SchoolSourcedId


 


 


Y

Not used

TermsSourcedIds


 


 


N

Not used

Subjects


 


 


N

Not used

SubjectCodes


 


 


N

Not used

Periods


 


 


N

Not used
 
Users
OneRoster
Supported values
Brightspace mappings
Required
Notes

SourcedId


 


OrgDefinedId


Y

If the Identifier field is not populated, the SourcedId is copied into the OrgDefinedId.

Status


active, tobedeleted


 


N

Field is required for files in delta mode.

DateLastModified


 


 


N


Field is required for files in delta mode.
Date Format YYYY-MM-DDTHH:mm:SS.sssZ


EnabledUser


 


 


Y

Not used

OrgSourcedIds


 


Upper Org Unit Enrollments (with role in org)

Y
Enrollment in the school org units
Role
administrator, aide, guardian, parent, proctor, relative, student, teacher
 
Y
Role in org

UserName


 


UserName


Y

 

UserIds


 


 


N

Not used

GivenName


 


FirstName


Y

 

FamilyName


 


LastName


Y

 

MiddleName


 


MiddleName


N

 

Identifier


 


OrgDefinedId


N

If provided

Email


 


ExternalEmail


N

 

Sms


 


MobilePhone


N

 

Phone


 


HomePhone


N

 

AgentSourcedIds


 


 


N

Used for Brightspace Parent & Guardian. This field asserts the parent-child relationship. Both the child and parent rows must reference each other’s sourcedIds.

Grades


 


 


N

Not used

Password


 


Password


N

 
 
Enrollments
OneRoster
Supported values
Brightspace mappings
Required
Notes

SourcedId


 


 


Y

 

Status


active, tobedeleted


 


N

Field is required for files in delta mode.

DateLastModified


 


 


N


Field is required for files in delta mode.
Date Format YYYY-MM-DDTHH:mm:SS.sssZ


UserSourcedId


 


 


Y

User to Enroll

ClassSourcedId


YYYY-MM-DD


 


Y

Brightspace enrollment

SchoolSourcedId


 


 


N

Not used

Role


administrator, aide, guardian, parent, proctor, relative, student, teacher


Role


Y

 

Primary


 


 


N

Not used

BeginDate


 


 


N

YYYY-MM-DD

EndDate


 


 


N

YYYY-MM-DD




--------------------------------------------------


About OneRoster CSV

This document describes details of the OneRoster CSV configuration, requirements, and recommendations for implementing integration with your Student Information System (SIS). 
Brightspace synchronizes with the SIS when using OneRoster CSV in Bulk mode.  Enrollments that are no longer included in the OneRoster CSV file, when using Bulk mode, are treated as unenrollments in Brightspace. 
This approach only applies to sections that are included in the OneRoster CSV file.  Enrollments that are no longer included for sections that are also excluded from the OneRoster CSV file are ignored, as these are typically for sections from previous terms.
For CSV integrations, support for the OneRoster v1.1 specification allows administrators to upload a OneRoster 1.1 compliant package that contains the required roster related data (schools, classes, users, enrollments, etc.) and see the imported results in the Brightspace platform. The new IPSIS user interface allows administrators to upload a package using the drag-and-drop method.
Important: This document is specific to OneRoster CSV requirements. The CSV files that are required for the OneRoster are text files saved in a Comma Separated Values (CSV) format. CSV files are only expected to be UTF-8 encoded. Generating content for the files will require some sort of data access from your SIS system. Some SIS systems provide you with data export mechanisms which should be used as per your vendor instructions. 
We recommend that you contact your source system provider and seek guidance on best practices for extracting the required data into the needed CSV file format.
Supported OneRoster CSV files
The following files are supported by OneRoster CSV:

manifest.csv


orgs.csv


academicSessions.csv


courses.csv


users.csv


enrollments.csv

When you use OneRoster CSV in Bulk mode, it provides the Student Information System (SIS) the ability to automatically unenroll users from courses and sections when they are no longer included in the OneRoster CSV bulk file. It also provides the ability to keep Brightspace in sync with the SIS when using OneRoster CSV in Bulk mode as unenrollments are not explicitly sent in the OneRoster files.



--------------------------------------------------


How IPSIS relates to Brightspace Organization Structure

OneRoster CSV
OneRoster CSV integration accepts your data in a set of Comma Separated Values (CSV) files, uploaded via a zip archive of CSV files.
The file formats you will be working with are and will be processed in the following order:
manifest.csv
academicsessions.csv
orgs.csv
courses.csv
classes.csv
users.csv
enrollments.csv
Mapping Values
The below mapping table explains how the OneRoster object types relate to the D2L Brightspace environment. 
OneRoster
D2L Brightspace
Academic Sessions

Org Units*

Orgs
Org Units*
Courses
Course Templates
Classes
Course Offering and Course Section
Users
User
Enrollments
Enrollment
*The org unit type each object is mapped to is dependent on the D2L SIS Integration configuration setup in the IPSIS Administration UI mapping section. 
The OneRoster CSV integration is capable of creating, updating  at the levels listed above. Anything outside this list should be managed outside this integration.
The Org Unit naming conventions (Name/Code) should follow that described in your SIS. Brightspace can accept as many Org Units as needed, Org Unit names and codes can be fed as-is through the CSV files as long as names or codes respect Brightspace illegal character requirements.
Manifest
The manifest must be included with each package. The manifest contains the version and the list of files that are being sent to Brightspace. It also specifies Delta versus Bulk.

Academic Sessions, Orgs, Schools, Courses, Classes
These must be sent at least once to instruct IPSIS on which Org Unit it is able to control.
You should only resend Org Unit files when they need to be added or updated in the org structure in the learning environment.
OneRoster CSV can:
Create a new Org Unit if it doesn’t exist
Map to an existing Org Unit if it was created by a different source to OneRoster
Update the name or code of an Org Unit that it controls
Course Template: assign and update parent Schools based on the School code
Course Offering: assign and update parent Schools based on the School code
Course Offering: assign and update parent Course Template and Semester based on the parent code
Course Offering: Update all course details including course offering name
Update Org Unit codes
Copy Course Content to New Course
Delete an Org Unit if the delta file is sent with Status tobedelete and the Org Unit has no enrollments
OneRoster CSV will not:
Delete manually created Org Units unless they been mapped with OneRoster CSV
Delete an Org Unit if it has children linked to it (children must be deleted first)
Maintain start or end dates for any org unit type

Users
            Processing the user type creates, updates or inactivates users in Brighspace. Users must be sent at least once to instruct IPSIS on which User profiles it is able to create, update and manage enrollments of. Users are automatically enrolled into the school.            OneRoster CSV can:
Create new user if it doesn’t already exist
If a user exists with same ‘OrgDefinedID’ then it can be mapped to the existing userOR
If a user exists with same ‘Username’ then it can be mapped to the existing user
Update First Name, Last Name, Password and Email
Password is not required
Update the Org level role
Activate, or Inactivate a user
Update the OrgDefinedId or Username

            OneRoster CSV will not:
Delete users
Enrollments
Processing the enrollment type enrolls or unenrolls users in Brightspace at the course section level. Enrollments should be sent when changes are made in the information system to accurately reflect those changes in Brightspace. An unenrollment should only be sent once. Resending the same unenrollment will cause warnings in your IPSIS log.
OneRoster CSV can:
Enroll users in Course Offerings and sections
Un-enroll users from Course Offerings and sections
OneRoster CSV cannot:
Enroll users at other org levels
Limitations and Assumptions
Limitations
Unenrollments at Upper Org Units
Enrollments via the User’s Org property cannot be unenrolled via the OneRoster integration at this time.
Unsupported characters
There are several characters that we do not currently support being entered for the Org Unit CodeUnsupported Characters: \ : * ? “ ” < > | ‘  # , % &Comes from
Academic Sessions TitleCourse Title or Course CodeClass Title or Class CodeOrg Name or Org Identifier
Truncations
Org Unit Code – Length 50
Academic Sessions TitleCourse Title or Course CodeClass Title or Class CodeOrg Name or Org Identifier




--------------------------------------------------


CSV File Format

Common File Content Rules
Values in files are case-sensitive.
An empty value is represented with two commas with no spaces between them (For example, excluding brackets, [,,] indicates blank value, where as [,  ,] indicates a space character, which is parsed as an invalid value).
The CSV files must have a header (first line) that must be an exact match (casing) to that listed in the examples in the sections below.
Subsequent lines in the file contain the data to be processed (Inserted, updated, deleted).
File names are standard (users, orgs, etc).
Manifest
The following lists sample content for manifest (along with the required header line):
Filename must be manifest.csv.
Value can be one of the following options:
Bulk - For importing bulk snapshots. The status and datelastmodified fields must be left blank if using bulk mode. Bulk mode does implicit deletes for enrollments only.Delta - For importing deltas. The status and datelastmodified fields must be populated. This is the only mode that allows explicit deletes.Absent - If a file is not sent, it must be marked as absent. 

propertyName,value
manifest.version,1.0
oneroster.version,1.1
file.academicSessions,delta
file.categories,absent
file.classes,delta
file.classResources,absent
file.courses,delta
file.courseResources,absent
file.demographics,absent
file.enrollments,delta
file.lineItems,absent
file.orgs,delta
file.users,delta
file.resources,absent
file.results,absent

Academic Sessions
The following lists two rows of sample content for Academic Session (along with the required header line). The file consists of nine  mandatory columns, and each must be populated with a valid value or left empty depending on the file format. 
sourcedId,status,dateLastModified,title,type,startDate,endDate,parentSourcedId,schoolYearTERM_LW11,active,2016-04-30T00:00:00Z,Spring TERM_LW11,term,2017-04-30,2017-06-30,,2017GRADINGPERIOD_LW11,active,2016-04-30T00:00:00Z,Full Spring GRADINGPERIOD_LW11,gradingPeriod,2017-04-30,2017-06-30,TERM_LW11,2017
 
Column
Field
Required
Possible Values
Notes
1
SourceId
Y
 
Not visible in UI
2
Status
Y
active or tobedeleted
ActiveRequired if DateLastModified present and if sending Deltas
3
DateLastModified
N
YYYY-MM-DDTHH:mm:SS:ssZ
*Internal Tracking*
4
Title
Y
 
Org Unit Name and Org Unit Code
5
StartDate
Y
YYYY-MM-DD
Ignored
6
EndDate
Y
YYYY-MM-DD
Ignored
7
Type
Y
gradingPeriod, semester, schoolyear, term
Org Unit Type
8
ParentSourceId
N
 
Ignored
9
School Year
Y
 
Not mapped
Orgs
The following lists four rows of sample content for Orgs (along with the required header line). The file consists of seven mandatory columns, and each must be populated with a valid value or left empty depending on the file format. 

sourcedId,status,dateLastModified,name,type,identifier,parentSourcedId
DISTRICT_LW11,active,2016-04-30T00:00:00Z,DISTRICT_LW11,district,,
SCHOOL_LW111,active,2016-04-30T00:00:00Z,SCHOOL_LW111,school,,DISTRICT_LW11
DISTRICT_LW12,active,2016-04-30T00:00:00Z,DISTRICT_LW12,district,,
SCHOOL_LW121,active,2016-04-30T00:00:00Z,SCHOOL_LW121,school,,DISTRICT_LW12

 
Column
Field
Required
Possible Values
Notes
1
SourceId
Y
 
Not visible in UI
2
Status
N
active or tobedeleted
ActiveRequired if DateLastModified present and if sending Deltas
3
DateLastModified
N
YYYY-MM-DDTHH:mm:SS:ssZ
*Internal Tracking*
4
Title
Y
 
Org Unit Name and Org Unit Code (If Identifier is not populated)
5
Identifier
N
 
Org Unit Code (If provided)
6
Type
Y
School, district, local, state, national
Org Unit Type
7
ParentSourcedId
N
 
Parent Org Unit SourcedId
Courses
The following lists two rows of sample content for Courses (along with the required header line). The file consists of 10 mandatory columns, and each must be populated with a valid value or left empty depending on the file format. 

sourcedId,status,dateLastModified,schoolYearSourcedId,title,courseCode,grades,orgSourcedId,subjects,subjectCodes
COURSE_LW11,active,2017-04-30T00:00:00Z,,The ways of the Force,COURSE_LW11,,SCHOOL_LW111,,
COURSE_LW12,active,2017-04-30T00:00:00Z,,French As A Second Language,COURSE_LW12,,SCHOOL_LW111,,

 
Column
Field
Required
Possible Values
Notes
1
SourceId
Y
 
Not visible in UI
2
Status
N
active or tobedeleted
ActiveRequired if DateLastModified present and if sending Deltas
3
DateLastModified
N
YYYY-MM-DDTHH:mm:SS:ssZ
*Internal Tracking*
4
Title
Y
 
Org Unit Name and Org Unit Code (If Identifier is not populated)
5
SchoolYearSourceId
N
 
Parent Org Unit SourceId (Semester)
6
CourseCode
N
 
Org Unit Code (if provided)
7
Grades
N
 

Ignored

8
Subjects
N
 
Ignored
9
OrgSourceId
Y
 
Parent Org Unit SourceId (i.e. School)
10
SubjectCodes
N
 
Ignored
Classes
The following lists three rows of sample content for Classes (along with the required header line). The file consists of 14 mandatory columns, and each must be populated with a valid value or left empty depending on the file format. Each record will be created as a Course Offering with a single Section under it.

sourcedId,status,dateLastModified,title,grades,courseSourcedId,classCode,classType,location,schoolSourcedId,termSourcedIds,subjects,subjectCodes,periods
CLASS_LW111,active,2017-04-30T00:00:00Z,The Force 101,,COURSE_LW11,CLASS_LW111,scheduled,,SCHOOL_LW111,TERM_LW11,,,
CLASS_LW112,active,2017-04-30T00:00:00Z,The Force Advanced,,COURSE_LW11,CLASS_LW112,scheduled,,SCHOOL_LW111,TERM_LW11,,,
CLASS_LW121,active,2017-04-30T00:00:00Z,French - Reading LW1,,COURSE_LW12,CLASS_LW121 fr-reading,scheduled,,SCHOOL_LW111,TERM_LW11,,,

 
Column
Field
Required
Possible Values
Notes
1
SourceId
Y
 
Not visible in UI
2
Status
N
active or tobedeleted
ActiveRequired if DateLastModified is present 
3
DateLastModified
N
YYYY-MM-DDTHH:mm:SS:ssZ
*Internal Tracking*
4
Title
Y
 
Org Unit Name and Org Unit Code 
5
ClassCode
N
 
Org Unit Code (If provided)
6
ClassType
Y
 
Ignored
7
Location
N
 

Ignored

8
Grades
N
 
Ignored
9
Subjects
N
 
Ignored
10
CourseSourceId
Y
 
Parent Org Unit SourceId (Course Template)
11
SchoolSourceId
Y
 
Parent Org Unit SourceId (i.e. School)
12
TermsSourceId
Y
 
Parent Org Unit SourceId (i.e. Term)
13
SubjectCodes
N
 
Ignored
14
Periods
N
 
Ignored
Users
The following lists five rows of sample content for Users (along with the required header line). File consists of 18 mandatory columns, and each must be populated with a valid value or left empty depending on the file format. 

sourcedId,status,dateLastModified,enabledUser,orgSourcedIds,role,username,userIds,givenName,familyName,middleName,identifier,email,sms,phone,agentSourcedIds,grades,password
STUDENT_LW11,active,2017-04-30T00:00:00Z,TRUE,SCHOOL_LW111,student,STUDENT_LW11,,Luke,Walker,,,email@email.com,,,"PARENT_LW11,TEACHER_LW11,GUARDIAN_LW11",,
STUDENT_LW12,active,2017-04-30T00:00:00Z,TRUE,SCHOOL_LW111,student,STUDENT_LW12,,Prince,Lee,,,email@email.com,,,"PARENT_LW11,GUARDIAN_LW11",,
PARENT_LW11,active,2017-04-30T00:00:00Z,TRUE,SCHOOL_LW111,parent,PARENT_LW11,,Bartholomew,Vadery,,,email@email.com,,,"STUDENT_LW11,STUDENT_LW12",,
GUARDIAN_LW11,active,2017-04-30T00:00:00Z,TRUE,SCHOOL_LW111,guardian,GUARDIAN_LW11,,Obi,Kennedy,,,email@email.com,,,"STUDENT_LW11,STUDENT_LW12",,
TEACHER_LW11,active,2017-04-30T00:00:00Z,TRUE,SCHOOL_LW111,teacher,TEACHER_LW11,,Mac,Yodad,,,email@email.com,,,"STUDENT_LW12,STUDENT_LW11",,

 
Column
Field
Required
Possible Values
Notes
1
SourcedId
Y
 
OrgDefinedId if identifier is not provided
2
Status
N
active or tobedeleted
Active by default (depends on UI setting)Require if DateLastModified presentInactive or tobedeleted inactivates user
3
DateLastModified
N
YYYY-MM-DDTHH:mm:SS*,s*ssZ
*Internal Tracking*
4
EnabledUser
Y
true or false
Active in LMS if true
5
OrgSourceIds
Y
 
School org unit enrollment
6
Role
Y
 
Role in Organization
7
UserName
Y
 

UserName

8
UserIds
N
 
Ignored
9
GivenName
Y
 
FirstName
10
FamilyName
Y
 
LastName
11
MiddleName
N
 
MiddleName
12
Identifier
N
 
OrgDefinedId (If provided)
13
Email
N
 
ExternalEmail
14
Sms
N
 
Ignored
15
Phone
N
 
Ignored
16
AgentSourcedIds
N
 
Used to indicate parent/guardian relationship
17
Grades
N
 
Not mapped
18
Password
N
 
 
Enrollments
The following lists one row of sample content for Enrollments (along with the required header line). File consists of 10 mandatory columns, and each must be populated with a valid value or left empty depending on the file format.  A specified user will be enrolled into a Course Offering and Section

sourcedId,status,dateLastModified,classSourcedId,schoolSourcedId,userSourcedId,role,primary,beginDate,endDate
STUDENT_CLASS_LW1111,active,2017-04-30T00:00:00Z,CLASS_LW111,SCHOOL_LW111,STUDENT_LW11,student,,,

 
Column
Field
Required
Possible Values
Notes
1
SourceId
Y
 
*Internal Tracking*
2
Status
N
active or tobedeleted
Active by default Require if DateLastModified present
3
DateLastModified
N
YYYY-MM-DDTHH:mm:SS:ssZ
*Internal Tracking*
4
UserSourcedId
Y
 
User to Enroll
5
ClassSourcedId
Y
 
Class to Enroll in
6
SchoolSourcedId
Y
true or false
Not mapped
7
Role
Y
The only permitted values are administrator, proctor, student, and teacher.

Role in course offering org unit

8
Primary
N
 
Not mapped
9
BeginDate
N
 
Not mapped
10
EndDate
N
 
Not mapped
 



--------------------------------------------------


Using OneRoster

Set Up
On the IPSIS Administration page, select the Configuration tab.
Configure your integration:Review and edit settings and complete mappings.PeopleInstructor and Learner are defaulted, but can be deleted.Click + Add Role to add additional SIS specific role names to map to Brightspace role. The following are the roles available in OneRoster:AdministratorAideGuardianParentProctorRelativeStudentTeacherCourses and SectionsThe following are the org types available in OneRoster:NationalStateLocalDistrictSchoolOnce complete, select Create Source System.
Once the source system is created, administrators can select from OAuth1a or OAuth2 as the preferred authentication method.
Generate SFTP credentials:Click Create SFTP Site.Click Generate Password.
Save Address, Username and Password
SFTP credentials are used to upload files.Password is hidden and is not recoverable once the page has been saved. Password can be regenerated, SFTP credentials will need to be updated when transferring zip to the SFTP.Note: Passwordless authentication with an SSH Public key is not currently configurable.
Select Done.
You will be directed to the OneRoster CSV dashboard. The dashboard is the landing page of the IPSIS Administration Interface. To see more details, click here to access Brightspace Community.
Use academic session information for course start and end dates
On the IPSIS administration page the Use course offering dates checkbox allows you to use academic session information for course offering start and end dates. This checkbox is set to off by default. This option allows you to choose if academic session (semester, term, school year, or grading period) dates are associated to the course offering (this option defaults to term). The start date and end date of a course can also be offset by a specified number of days. If multiple academic sessions are set for a single course offering, the first Academic Session received from the SIS will be used for the start and end dates.
Processing CSV Files
Any CSV file must be zipped. ZIP folders be uploaded to Brightspace two ways: 
Manually by dragging a ZIP archive from your computer to the drag and drop UI found in IPSIS Administration - Dashboard
Programmatically by uploading a ZIP archive containing the CSV file(s) to the SFTP site provisioned during your initial set up.
Brightspace monitors the SFTP site on ten minute intervals for new ZIP folders.
Copy Course Content to New Course
Brightspace offers the ability to copy content from an existing Org Unit when creating a new course.
From IPSIS Administration – Configuration, scroll down to Courses and Sections.
From When creating a new course, copy content from an existing Org Unit?, select Yes.Parent course template of the new courseContent will be copied from the parent Course Template to the new child Course Offering.Sibling course where the Org Unit Code matches the parent template
Content will be copied from a Master Course Offering to the sibling Course Offering when the Master Course Offering and Course Template share the same Org Unit Code.
Files are not duplicated when copying a course.
Troubleshooting
The Dashboard provides the processing status of the latest batch. Both the Dashboard and Batches pages will show a final indicator if the batch completed successfully or with errors. Each batch has a quick link to Audit Log and if completed with errors to Error Messages.
Review all logs to verify all files processed as expected. If error messages were logged, expand the error to review the meta data captured to identify the error, correct the data in your SIS and export a new ZIP folder with a CSV file that only contains the necessary changes to correct the errors. The goal is to have the batches completed without errors.
Common Errors
ArgumentException Exception while processing message.Exception Message: Invalid Request TypeName provided. No Mapping found for Type:district in Source System:27. Parameter name: TypeNameException Type: System.ArgumentExceptionTypically occurs when the source system is missing Org Unit Type mappings in the Configuration UI and a request of that type is sent.
 
CourseCreationException Exception while processing message.Exception Message: Invalid codeException Type: D2L.LP.OrgUnits.Courses.CourseCreationExceptionTypically occurs when the Class Request has Invalid characters in the classCode field. If classCode was not provided then the Invalid characters are in the title field. Invalid characters: \ : * ? “ ” < > | ‘  # , % &
 
RoleMappingNotFoundException Exception while processing message.Exception Message: No role mapping found for source system: OneRoster - Drag and Drop identifier: guardianException Type: D2L.IM.Platform.Exceptions.RoleMappingNotFoundExceptionTypically occurs when the source system is missing role mappings in the Configuration UI and a request of that type is sent.
 
DataNotFoundException Exception while processing message.Exception Message: RoleMapping not found for guardianException Type: D2L.Data.DataNotFoundExceptionTypically occurs when the source system is missing role mappings in the Configuration UI and a request of that type is sent.
 
DataNotFoundException Exception while processing message.Exception Message: ReplaceEnrollmentReadIMHandler.Process - IMExternalOrgUnitInfo is null.Exception Type: D2L.Data.DataNotFoundExceptionRecordType: EnrollmentTypically occurs when either an incorrect code for the class or user is sent to the LMS.
 
JsonReaderException Exception while processing message.Exception Message: Could not convert string to DateTime: 4/30/2016T00:00:00.000Z. Path 'StartDateUtc', line 1, position 183.Exception Type: Newtonsoft.Json.JsonReaderExceptionTypically occurs when the date format of one of the Date or DateTime fields not following the correct formatting.Supported format: yyyy-mm-ddThh:mm:ssZ
 
OrgUnitMappingNotFoundException Exception while processing message.Exception Message: No org unit mapping found for source system: 27 identifier: SOMETHINGException Type: D2L.IM.Platform.Exceptions.OrgUnitMappingNotFoundExceptionTypically occurs when the request has an org unit type that does not have a mapping configured in the source system. Example: Request to create a District is received by the source system has not mapped District to anything.




--------------------------------------------------


Set up OneRoster 1.1 REST

For REST integrations, IPSIS allows you to schedule data to be pulled from your organization's SIS to populate the required roster related data (including schools, classes, users, enrollments, and others) in the Brightspace platform. The new IPSIS user interface includes a schedule to allow you to configure the time of day when the data pulls occur.
REST endpoints used:

Type


URL


Orgs


ims/oneroster/v1p1/orgs


Academic Sessions


ims/oneroster/v1p1/academicSessions


Courses


ims/oneroster/v1p1/courses


Classes


ims/oneroster/v1p1/classes


Users


ims/oneroster/v1p1/users


Enrollments


ims/oneroster/v1p1/enrollments

Before you can use the OneRoster REST integration to import information from your SIS to Brightspace, you need to perform the following initial set up and configuration tasks.
Enable IPSIS Administration and IPSIS platform
Before you can assign IPSIS role permissions and access the IPSIS Administration, you must first turn on the IPSIS Administration and IPSIS Platform tools.
From the Admin Tools menu, click Organization Tools.
On the Tool Availability page, enable IPSIS Administration and IPSIS Platform.
Set up a user role and assign permissions for IPSIS Administration
To administer IPSIS in Brightspace, you must set up a user role and assign permissions first.
Tip: You can adjust these permissions for specific roles. For example, you can set a certain role to be able to do everything except manage IPSIS admin configuration options. A Super Administrator may have all permissions, but an Administrator may have only the following permissions: Access IPSIS Administration Console, Manage IPSIS Bulk Operations, and Subscribe to Batch Job Notifications.
From the Admin Tools menu, click Roles and Permissions.
Create or select a role for administering IPSIS.
From the Edit Permissions page, assign the following IPSIS Administration permissions:Access IPSIS Administration console - This sets whether a user can see IPSIS Administration in their Admin Tools menu under the SIS Integration sectionManage IPSIS Bulk Operations - This allows users to upload files for processing, and review log and troubleshooting details of past runsView IPSIS Configuration Options - This allows users to access the Configuration tab within the IPSIS Admin pageManage IPSIS Configuration Options - This allows users to edit the settings within the Configuration tab, this includes IPSISSFTP account managementSubscribe to Batch Job Notifications - This allows users to sign up for notifications to be sent to them when a batch job finishes
Assign the following additional permissions:User Information Privacy > See UsernamesUser Information Privacy > See Org Defined IDsOrg Unit Type Editor > Can Create and Edit Org Unit TypesSecurity > See Roles and Permissions
Set up email notifications for OneRoster REST processing jobs
You can set up an email notification to alert you each time the OneRoster REST integration processes a job from the SIS.
Note the following:
D2L recommends using email notifications instead of SMS, as the email contains more details about the SIS run (successes, failures, and summary). The SMS message only states that a job ran.
Emails are delivered from the NotificationEmail setup for your environment. If you are having trouble receiving the email and have verified your email address is correct, D2L recommends contacting D2L Support for assistance verifying that your environment is properly set up for email. You may need to check your junk folder for the email, depending on your mail provider.
To set up email notifications
From the navbar, click your user profile icon, and select Notifications.
Under Contact Methods > Email Address, ensure your email address is listed.
Under Instant Notifications > IPSIS Platform - Batch Summary Completion, enable the Email checkbox.




--------------------------------------------------


OneRoster REST for Blackbaud

The Integration Pack for Student Information System (IPSIS) platform
The Integration Pack for Student Information Systems (IPSIS) platform is an integration platform in Brightspace that consists of common components and a collection of products that allow you to import information from your organization's information system to Brightspace, for example, your organization structure, users, and enrollment information. Once that information is imported into Brightspace, you can continue to update your information system and import that information to Brightspace using the IPSIS platform.
Supported information systems
The IPSIS platform integrates with the following common types of information systems:
Student Information Systems (SIS) - A software tool used by educational organizations to manage students, courses, and enrollments.
Human Resource Systems (HRIS) - A software tool used by corporate organizations to manage employees and their data.
Learner Information Systems (LIS) - A software tool used by educational organizations to manage the registration of student enrollments.
Components and products in the IPSIS platform
Under the IPSIS platform, there are common components and several products with unique features to integrate your specific information system with Brightspace. The collection of components and products are:
D2L Standard CSV – Used for integrating with SIS/HRIS systems by using D2L-defined Comma-Separated Value (CSV) files.
Ellucian ILP – Used for integrating with Banner or Colleague systems, based on LIS specifications.
OneRoster CSV or OneRoster REST – Used for integrating with K-12 information systems that support the IMS Global Learning Consortium’s OneRoster specification.
LIS v2.0 Adapter - Used for integrating with information systems that support the IMS Global Learning Consortium's LIS specification.
SIS Course Merge - An interface in Brightspace used to enable instructors to merge and unmerge multiple IPSIS-processed courses into and out of one parent course offering.
Section Association Interface (UI) - An interface in Brightspace used to manually manipulate relationships between enrollable courses or sections in an SIS and course offerings in Brightspace.
IPSIS Administration Interface (Admin UI) - An administration interface in Brightspace used for configuring and reviewing the status of SIS integrations with Brightspace.
OneRoster is an IMS standard designed to allow secure sharing of class rosters and related data between a student information system (SIS) and any other system.  The OneRoster standard supports spreadsheet-style (CSV) export-import as well as direct system exchanges using REST API’s. This administration guide focuses on the REST specification.
Before you use OneRoster REST 1.1
D2L supports the IMS OneRoster v1.1 specification and recertifies against the IMS Global product certification suite yearly. D2L supports the following Conformance Certifications:
REST Data Provider Gradebook Push Core
REST Data Consumer Rostering Core
The Brightspace implementation of the OneRoster v1.1 specification lets administrators schedule data to be pulled from their SIS to populate the required roster related data (schools, classes, users, enrollments, etc.) in the Brightspace platform. The new IPSIS OneRoster REST user interface includes a schedule to allow administrators to configure the time of day when the data pulls occur. Additionally, for an SIS partner supporting the Gradebook service, administrators can set the grades to be returned with the daily data sync and/or allow a faculty member to initiate a manual sync.
Endpoints used
Type
URL
GET
ims/oneroster/v1p1/academicSessions
GET
ims/oneroster/v1p1/classes
GET
ims/oneroster/v1p1/enrollments
GET
ims/oneroster/v1p1/orgs
GET
ims/oneroster/v1p1/orgs/{id}
GET
ims/oneroster/v1p1/schools/{id}
GET
ims/oneroster/v1p1/schools/{id}/classes
GET
ims/oneroster/v1p1/schools/{id}/courses
GET
ims/oneroster/v1p1/schools/{id}/enrollments
GET
ims/oneroster/v1p1/users
GET
ims/oneroster/v1p1/categories
PUT
ims/oneroster/v1p1/lineitems
PUT
ims/oneroster/v1p1/results
How OneRoster REST is mapping to Brightspace
Below are the mapping values between a OneRoster object type and a Brightspace object type
One Roster
D2L Brightspace
Academic Sessions
Org Units*
Orgs	
Org Units*
Schools	
Org Units*
Courses	
Course Template
Classes	
Course Offering & Course Section
Users	
User
Enrollments	
Enrollment
LineItems	
Grade Item
Results	
Grade Value
*Org unit types are typically custom org unit types that can be mapped during the configuration process.
Academic Sessions
OneRoster			
Supported Values
Used by Brightspace for
Required
sourcedId
 
N/A
Y
status
active or tobedeleted
Create/Replace or Delete 
Y
dateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
metadata
N/A
N/A
 
title
 
Org Unit Name and Org Unit Code
Y
startDate
YYYY-MM-DD
Exposed for academic session in gradebook
Y
endDate
YYYY-MM-DD
Exposed for academic session in gradebook
Y
type
Semester, Term, Grading Period, SchoolYear
Org Unit Type
Y
parent
N/A
N/A
N/A
Children
N/A
N/A
N/A
SchoolYear
N/A
N/A
N/A
 
Orgs
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Replace or Delete
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Name
 
Org Unit Name and Org Unit Code
Y
Identifier
 
Org Unit Code (If provided)
N
StartDate
YYYY-MM-DD
N/A
Y
EndDate
YYYY-MM-DD
N/A
Y
Type
District, Department, Local, National, School, State
Org Unit Type
Y
Parent
 
Parent Org Units
Required to create org structure
Children
N/A
N/A
N/A
 
Courses
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Title
 
Org Unit Name and Org Unit Code
Y
SchoolYear
 
Parent Org Units
N
CourseCode
 
Org Unit Code (If provided)
N
Grades
N/A
N/A
 
Subjects
N/A
N/A
 
Org
 
Parent Org Units
Required to create org structure
StartDate
YYYY-MM-DD
N/A
 
EndDate
YYYY-MM-DD
N/A
 
SubjectCodes
N/A
N/A
 
Resources
N/A
N/A
 
 
Classes
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active or Inactive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
Title
 
Org Unit Name and Org Unit Code
Y
ClassCode
 
Org Unit Code (If provided)
N
ClassType
N/A
Location
N/A
Grades
N/A
Subjects
N/A
Course
 
Parent Org Units
Y
School
 
Parent Org Units
Y
Terms
 
Parent Org Units
Y
SubjectCodes
N/A
Periods
N/A
Resources
N/A
 
Users
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
OrgDefinedId
Y
Status
active or tobedeleted
IsActive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
UserName
 
UserName
Y
UserIds
Not Mapped
EnabledUser
 
IsActive
Y
GivenName
 
FirstName
Y
FamilyName
 
LastName
Y
MiddleName
 
MiddleName
N
Role
 
Role In Org
Y
Identifier
 
OrgDefinedId (If provided)
N
Email
 
ExternalEmail
N
Sms
 
N/A
N
Phone
 
N/A
N
Agents
 
Brightspace Parent & Guardian
N
Orgs
Upper Org Unit Enrollments (With Role in Org)
Grades
N/A
Password
 
User Password
N
 
Enrollments
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
 
Y
MetaData
N/A
User
 
User to Enroll
Y
Class
 
Course Offering & Section to Enroll in
Y
School
N/A
Role
 
Role
Y
Primary
N/A
BeginDate
N/A
EndDate
N/A
Assumptions and Limitations
Assumptions
D2L can work with any SIS that supports OneRoster 1.1 REST and is certified with IMS Global or working towards their certification.
REST Process
Scheduled runs run from the previous run date of the data extract to the start date of the current data extract. If this is the first run, it acts like a sync operation and runs with no start date to the date range.
There is an option to trigger a run manually from the previous run date, from a specific date or for all records in the system
Call Order: The order that the various endpoints or consuming the various files are called in.Academic SessionsOrgsSchoolsCoursesClassesUsersEnrollments
The order that data is sent back to Blackbaud:Lineitems (sent on demand or nightly based on grade export settings)Results (sent on demand or nightly based on grade export permissions)
Grade Export
For a grade to be exported, the course must have been created through OneRoster SIS integration and the OneRoster IPSIS source system must have Grades Export enabled. The course may only be mapped to one active source system with grades. Grades must belong to Grade Categories that are retrieved from the SIS and the grade must have an Academic Session selected.
Academic Sessions
The Academic Session (Terms) dropdown menu is visible when creating a new grade item. The menu is populated by finding all org units created by the same SIS as the course where the SIS mapping is for Academic Session. The academic session must be a parent to the course offering.
Categories
Categories are  required for the integration. Categories created by Blackbaud have the Export to SIS option selected. This category is used to link grade items so that Brightspace knows which grade items should and should not be sent.
How the grade sync works
Categories are synched if they meet any of the following conditions:
Category has never been sent
Category has been updated since it was last sent (this includes name, delete, restore from delete)
Category failed to be sent during the last export
Grade items (line items) are synced if they meet any of the following conditions:
Line item has never been sent
Line item has been updated since it was last sent (This includes name, academic session, points, delete, restore from delete)
Line item failed to be sent during the last export

An assignment and due date are sent with the lineitem. Below is the logic Brightspace uses when sending dates:
Lineitem (Grade) Assign Date is determined as follows:Use Activity Start Date if it exists, if notUse Activity Due Date if it exists, if notUse Activity End Date if it exists, if notUse Academic Session End Date
Lineitem (Grade) Due Date is determined as follows:Use Activity Due Date if it exists, if notUse Activity End Date if it exists, if notUse Academic Session End Date

Note: The line item sourced id that gets sent is class-specific and is generated like this: {lineItemSourcedId}_{classSourcedId}
Grades (results) are synced if they meet any of the following conditions:
Result has never been sent
Result has been updated since it was last sent
Result failed to be sent during the last export
Parent line item has been modified since the last export
Note: Line items and Results that were sent to the SIS as deleted do not appear in the Export History UI.
Limitations
Records with a status of tobedeleted are only deleted if the child is deleted
Enrollments using the User’s Org property cannot be unenrolled via the OneRoster integration at this time.
Unsupported characters: there are several characters that are not supported in the Brightspace Org Unit Code. These characters are replaced with an underscore (_). Unsupported Characters: \ :  ? “ ” < > | ‘  # , % &
Truncations: The max length for the Org Unit Code in Brightspace is 50 characters. If it exceeds this length, it is truncated in the UI.
OneRoster allows multiple ScoreStatus: Brightspace only sends fully graded or exempt
You will work with your Brightspace Implementation Consultant to set up your OneRoster REST source system. Brightspace automatically defaults to your most common settings. However, these settings can be edited at any time with the appropriate permissions.
Before the source system can be configured, make sure you have the following items completed:
General Requirements
Contact your OneRoster representative to obtain your API information. You will need:
Endpoint URL
Authentication Endpoint
Client Id
Client Secret
Configuration
After the initial set up, you can update the configuration of your OneRoster REST source system:
From the Admin Tools menu, select IPSIS Administration, select the Configuration tab
Credentials provided during initial set up will appear first, these credentials can be edited if required.
Source System fields:SIS Name: The SIS Name field is editable and is recommended to be kept up to date.Scheduled Updates: The time that Brightspace will automatically sync with the SIS. It is recommended that this process is completed overnight.Overwriting Brightspace: Granular choices to identify which fields in Brightspace your SIS can overwrite.
People
SIS Role Mappings: This section contains the OneRoster specific role to map SIS role names to Brightspace role names. Teacher and Student roles are included by default, but they can be deleted. The following are the roles available in OneRoster:
Administrator
Aide
Guardian
Parent
Proctor
Relative
Student
Teacher

            To add additional SIS specific role names to map to Brightspace roles, click + Add Role.Note: If the SIS sends a role that is not configured, it results in an error and the user cannot be created.Map SIS Entries to Existing Users: Provides the option to map SIS entries based on username or OrgDefinedId to existing users that were created outside of the SIS (manually, bulk operations, API, etc.). If mappings are off, duplicates may be created.Courses and Sections
Courses and Sections - Mappings: This section contains the OneRoster specific org unit types to map SIS orgs to Brightspace org names.
Click + Add Org Unit Type to add additional SIS specific org unit names. The following Org Unit Types are required for Blackbaud:SIS OrgsDistrictSchoolAcademic Session TypeSemesterTermSchoolYearGradingPeriodSIS Group	Course OfferingCourse Section	Course TemplateSection Association
Deletion: Provides two options on how a tobedeleted status affects an org unit in Brightspace.Do Nothing – the org unit mapping will be deleted from IPSIS mappings, but the org unit will remain unchanged in BrightspaceInactivate course offering – the org unit mapping will be deleted from IPSIS mappings, the course offering will be marked inactive in Brightspace, section and enrollments will remain
Map SIS entries to courses and sections: Provides the option to map SIS entries based on org unit code to existing org units that were created outside of the SIS (manually, bulk operations, API, etc.). It is not recommended to turn these on for any org units created by your SIS unless you confirmed the codes are unique across schools and school years.
 Course Content: Provides the ability to copy course content from a master course or a course template to the newly created course. Select Yes and choose one of the following:If Find an Org Unit to automatically copy from based on specified criteria? is not selected, content is copied from a Master Course Offering to the sibling Course Offering when the Master Course Offering and Course Template share the same Org Unit CodeIf Find an Org Unit to automatically copy from based on specified criteria? is selected, you can choose from two options:Parent course template of the new courseContent is copied from the parent Course Template to the new child Course OfferingSibling course where the Org Unit Code matches the parent template. Content is copied from the source course offering to the new child Course Offering based on the source course being manually added to Brightspace with the same org unit code as the parent template.

Grades Export
Provides the option to allow grade syncs of all modified grade items at the time of the Scheduled Update, and/or, to allow Teacher initiated grade export from the course offering.

Departments, Semesters and Other Map SIS entries to existing org units: Provides the option to map SIS entries based on org unit code to existing org units that were created outside of the SIS (manually, bulk operations, API, etc.). It is not recommended to turn these on for any org units created by your SIS unless you confirmed the codes are unique across schools and school years.
Once complete, select Save Configuration.
 
Troubleshooting
The Dashboard provides the processing status of the latest batch. Both the Dashboard and Batches pages show a final indicator if the batch completed successfully or with errors. Each batch has a quick link to the Audit Log and if completed with errors to Error Messages.
Review all logs to verify all records processed as expected. If error messages were logged, expand the error to review the metadata captured to identify the error, correct the data in your SIS and either wait until the next day for the Scheduled Update or request an update from the Dashboard. The goal is to have the runs completed without error.
How to sync Grades
Grades can be sent nightly with the daily roster update, on demand via the grades interface, or both. These options are set up in IPSIS Administration > Configuration > Export Grades.
To send grades, a category, grade item, and grade are required. See the Grades Export section for overall rules to send a grade.
Create a Category
In the Manage Grades area, click New and select Category.
Fill in the required information.
Choose Export to SIS. These categories are noted in the Manage Grades UI with an SIS icon.
Click Save and Close.
Create a Grade Item
In the Manage Grades area, click New and select Item.
Set the desired preferences and options for the category.
Choose an Academic Session from the dropdown menu.
Map the grade item to the Category synced with the SIS.
Click Save and Close.
Export to SIS
To manually sync grades to the SIS:
From the course home page, navigate to Grades> Enter Grades > Export to SIS
On the Export Grades UI, you are presented with a summary page that includes:Section: a dropdown menu that allows you to choose between different sections in the course (if multiple sections are present)Academic Session: a dropdown menu that allows you to choose between different School Years associated with the course (if multiple academic sessions are used)Overview: Lists the number of Categories and the number of grades within the categories that meet the criteria selected in Section and Academic Session above and can be exportedScheduled Export: only visible if configured in SIS Integration configuration and can be edited in the Configuration tab in IPSIS Administration
Click Export. The page refreshes and takes you to the View All Exports page. This UI provides an overview of who sent the grades and when.Once the export has completed, click the Export Name to view details that include: Course name, Export start and end dates, and User who initiated the export
Note: If grades are sent via the nightly sync the IPSIS Service user is displayed
Successful and failed export details for Categories, Grade Items and Results:You can navigate back to historical exports, using Grades > Enter Grades > Export to SIS and click View Export History at the top right.
Use academic session information for course start and end dates 
On the IPSIS administration page, the Course offering dates check box allows you to use academic session information for course offering start and end dates.
This check box is set to off by default. This option allows you to choose if academic session (semester, term, school year, or grading period) dates are associated to the course offering (this option defaults to term).
The start date and end date of a course can also be offset by a specified number of days. If multiple academic sessions are set for a single course offering, the first Academic Session received from the SIS will be used for the start and end dates.



--------------------------------------------------


OneRoster REST for GG4L School Passport

The Integration Pack for Student Information System (IPSIS) platform
The Integration Pack for Student Information Systems (IPSIS) platform is an integration platform in Brightspace that consists of common components and a collection of products that allow you to import information from your organization's information system to Brightspace, for example, your organization structure, users, and enrollment information. Once that information is imported into Brightspace, you can continue to update your information system and import that information to Brightspace using the IPSIS platform.
This new Integration Pack for Student Information Systems (IPSIS) source system is available for PowerSchool using School Passport by Global Grid 4 Learning (GG4L). This source system provides an out-of-the-box rostering integration option for customers using PowerSchool, and includes a service provided by GG4L to set up School Passport connections between Brightspace and the PowerSchool student information system.
 
Note: Rostering includes user management, enrollment, and Org Structure, including School[Dept], Course [Template], and Class [Course Offering+ Section]. Rostering is a prerequisite for the Grade Passback functionality that will be available as a paid add-on in a future release. 
For more information, refer to Introducing a New PowerSchool Integration Powered by Global Grid 4 Learning (GG4L)
Supported information systems
The IPSIS platform integrates with the following common types of information systems:
Student Information Systems (SIS) - A software tool used by educational organizations to manage students, courses, and enrollments.
Human Resource Systems (HRIS) - A software tool used by corporate organizations to manage employees and their data.
Learner Information Systems (LIS) - A software tool used by educational organizations to manage the registration of student enrollments.
Components and products in the IPSIS platform
Under the IPSIS platform, there are common components and several products with unique features to integrate your specific information system with Brightspace. The collection of components and products are:
D2L Standard CSV – Used for integrating with SIS/HRIS systems by using D2L-defined Comma-Separated Value (CSV) files.
Ellucian ILP – Used for integrating with Banner or Colleague systems, based on LIS specifications.
OneRoster CSV or OneRoster REST – Used for integrating with K-12 information systems that support the IMS Global Learning Consortium’s OneRoster specification.
LIS v2.0 Adapter - Used for integrating with information systems that support the IMS Global Learning Consortium's LIS specification.
SIS Course Merge - An interface in Brightspace used to enable instructors to merge and unmerge multiple IPSIS-processed courses into and out of one parent course offering.
Section Association Interface (UI) - An interface in Brightspace used to manually manipulate relationships between enrollable courses or sections in an SIS and course offerings in Brightspace.
IPSIS Administration Interface (Admin UI) - An administration interface in Brightspace used for configuring and reviewing the status of SIS integrations with Brightspace.
OneRoster is an IMS standard designed to allow secure sharing of class rosters and related data between a student information system (SIS) and any other system.  The OneRoster standard supports spreadsheet-style (CSV) export-import as well as direct system exchanges using REST API’s. This administration guide focuses on the REST specification.
Before you use OneRoster REST 1.1
D2L supports the IMS OneRoster v1.1 specification and recertifies against the IMS Global product certification suite yearly. D2L supports the following Conformance Certifications:
REST Data Provider Gradebook Push Core
REST Data Consumer Rostering Core
The Brightspace implementation of the OneRoster v1.1 specification lets administrators schedule data to be pulled from their SIS to populate the required roster related data (schools, classes, users, enrollments, etc.) in the Brightspace platform. The new IPSIS OneRoster REST user interface includes a schedule to allow administrators to configure the time of day when the data pulls occur. Additionally, for an SIS partner supporting the Gradebook service, administrators can set the grades to be returned with the daily data sync and/or allow a faculty member to initiate a manual sync.
Endpoints used
Type
URL
GET
ims/oneroster/v1p1/academicSessions
GET
ims/oneroster/v1p1/classes
GET
ims/oneroster/v1p1/enrollments
GET
ims/oneroster/v1p1/orgs
GET
ims/oneroster/v1p1/orgs/{id}
GET

ims/oneroster/v1p1/users

How OneRoster REST is mapping to Brightspace
Below are the mapping values between a OneRoster object type and a Brightspace object type
One Roster
D2L Brightspace
Academic Sessions
Org Units*
Orgs	
					Org Units*
Schools	
					Org Units*
Courses	
 						Course Template
Classes	
Course Offering & Course Section
Users	
User
Enrollments	
Enrollment
*Org unit types are typically custom org unit types that can be mapped during the configuration process.
Academic Sessions
OneRoster			
Supported Values
Used by Brightspace for
Required
sourcedId
 
N/A
Y
status
active or tobedeleted
Create/Replace or Delete 
Y
dateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
metadata
N/A
N/A
 
title
 
Org Unit Name and Org Unit Code
Y
startDate
YYYY-MM-DD
Exposed for academic session in gradebook and course offering
Y
endDate
YYYY-MM-DD
Exposed for academic session in gradebook and course offering
Y
type
Semester, Term, Grading Period, SchoolYear
Org Unit Type
Y
parent
N/A
N/A
N/A
Children
N/A
N/A
N/A
SchoolYear
N/A
N/A
N/A
 
Orgs
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Replace or Delete
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Name
 
Org Unit Name and Org Unit Code
Y
Identifier
 
Org Unit Code (If provided)
N
StartDate
YYYY-MM-DD
N/A
Y
EndDate
YYYY-MM-DD
N/A
Y
Type
District, Department, Local, National, School, State
Org Unit Type
Y
Parent
 
Parent Org Units
Required to create org structure
Children
N/A
N/A
N/A
 
Courses
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Title
 
Org Unit Name and Org Unit Code
Y
SchoolYear
 
Parent Org Units
N
CourseCode
 
Org Unit Code (If provided)
N
Grades
N/A
N/A
 
Subjects
N/A
N/A
 
Org
 
Parent Org Units
Required to create org structure
StartDate
YYYY-MM-DD
N/A
 
EndDate
YYYY-MM-DD
N/A
 
SubjectCodes
N/A
N/A
 
Resources
N/A
N/A
 
 
Classes
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active or Inactive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
Title
 
Org Unit Name and Org Unit Code
Y
ClassCode
 
Org Unit Code (If provided)
N
ClassType
N/A
Location
N/A
Grades
N/A
Subjects
N/A
Course
 
Parent Org Units
Y
School
 
Parent Org Units
Y
Terms
 
Parent Org Units
Y
SubjectCodes
N/A
Periods
N/A
Resources
N/A
 
Users
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
OrgDefinedId
Y
Status
active or tobedeleted
IsActive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
UserName
 
UserName
Y
UserIds
Not Mapped
EnabledUser
 
IsActive
Y
GivenName
 
FirstName
Y
FamilyName
 
LastName
Y
MiddleName
 
MiddleName
N
Role
 
Role In Org
Y
Identifier
 
OrgDefinedId (If provided)
N
Email
 
ExternalEmail
N
Sms
 
N/A
N
Phone
 
N/A
N
Agents
 
Brightspace Parent & Guardian
N
Orgs
  Upper Org Unit Enrollments (With Role in Org)
Grades
N/A
Password
 
User Password
N
 
Enrollments
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
 
Y
MetaData
N/A
User
 
User to Enroll
Y
Class
 
Course Offering & Section to Enroll in
Y
School
N/A
Role
 
Role
Y
Primary
N/A
BeginDate
N/A
EndDate
N/A
Assumptions and Limitations
Assumptions
D2L can work with any SIS that supports OneRoster 1.1 REST and is certified with IMS Global or working towards their certification.
REST Process
Scheduled runs run from the previous run date of the data extract to the start date of the current data extract. If this is the first run, it acts like a sync operation and runs with no start date to the date range.
There is an option to trigger a run manually from the previous run date, from a specific date or for all records in the system
Call Order: The order that the various endpoints or consuming the various files are called in.Academic SessionsOrgsSchoolsCoursesClassesUsersEnrollments
Limitations
Records with a status of tobedeleted are only deleted if the child is deleted
Enrollments using the User’s Org property cannot be unenrolled via the OneRoster integration at this time.
Unsupported characters: there are several characters that are not supported in the Brightspace Org Unit Code. These characters are replaced with an underscore (_). Unsupported Characters: \ :  ? “ ” < > | ‘  # , % &
Truncations: The max length for the Org Unit Code in Brightspace is 50 characters. If it exceeds this length, it is truncated in the UI.
Configuration options for OneRoster REST
You will work with your Brightspace Implementation Consultant to set up your OneRoster REST source system. Brightspace automatically defaults to your most common settings. However, these settings can be edited at any time with the appropriate permissions.
Before the source system can be configured, make sure you have the following items completed:
General Requirements
Contact your OneRoster representative to obtain your API information. You will need:
Endpoint URL
Consumer Key
Consumer Secret
OAuth Signature Method = SHA-256
Configuration
After the initial set up, you can update the configuration of your OneRoster REST source system:
From the Admin Tools menu, select IPSIS Administration, select the Configuration tab
Credentials provided during initial set up will appear first, these credentials can be edited if required.
Source System fields:
SIS Name: The SIS Name field is editable and is recommended to be kept up to date.
Scheduled Updates: The time that Brightspace will automatically sync with the SIS. It is recommended that this process is completed overnight.
Overwriting Brightspace: Granular choices to identify which fields in Brightspace your SIS can overwrite.
People
SIS Role Mappings: This section contains the OneRoster specific role to map SIS role names to Brightspace role names. Teacher and Student roles are included by default, but they can be deleted. The following are the roles available in OneRoster:
Administrator
Aide
Guardian
Parent
Proctor
Relative
Student
Teacher

            To add additional SIS specific role names to map to Brightspace roles, click + Add Role.Note: If the SIS sends a role that is not configured, it results in an error and the user cannot be created.Map SIS Entries to Existing Users: Provides the option to map SIS entries based on username or OrgDefinedId to existing users that were created outside of the SIS (manually, bulk operations, API, etc.). If mappings are off, duplicates may be created.Courses and Sections
Courses and Sections - Mappings: This section contains the OneRoster specific org unit types to map SIS orgs to Brightspace org names.
Click + Add Org Unit Type to add additional SIS specific org unit names. The following Org Unit Types are required for ClassLink:SIS OrgsDistrictSchoolLocal, National, State, and Department are optionalAcademic Session TypeSemesterTermSchoolYearGradingPeriodSIS GroupCourse OfferingCourse SectionCourse TemplateSection Association
Deletion: Provides two options on how a tobedeleted status affects an org unit in Brightspace.Do Nothing – the org unit mapping will be deleted from IPSIS mappings, but the org unit will remain unchanged in BrightspaceInactivate course offering – the org unit mapping will be deleted from IPSIS mappings, the course offering will be marked inactive in Brightspace, section and enrollments will remain
Map SIS entries to courses and sections: Provides the option to map SIS entries based on org unit code to existing org units that were created outside of the SIS (manually, bulk operations, API, etc.). It is not recommended to turn these on for any org units created by your SIS unless you confirmed the codes are unique across schools and school years. If they are not unique, the SIS may overwrite existing org units with data from other org units.
 Course Content: Provides the ability to copy course content from a master course or a course template to the newly created course. Select Yes and choose one of the following:If Find an Org Unit to automatically copy from based on specified criteria? is not selected, content is copied from a Master Course Offering to the sibling Course Offering when the Master Course Offering and Course Template share the same Org Unit CodeIf Find an Org Unit to automatically copy from based on specified criteria? is selected, you can choose from two options:Parent course template of the new courseContent is copied from the parent Course Template to the new child Course OfferingSibling course where the Org Unit Code matches the parent template. Content is copied from the source course offering to the new child Course Offering based on the source course being manually added to Brightspace with the same org unit code as the parent template.
Course Offering Dates: Allows you to use academic session information for course offering start and end dates. This check box is set to off by default. This option allows you to choose if academic session (semester, term, school year, or grading period) dates are associated to the course offering (this option defaults to term). The start date and end date of a course can also be offset by a specified number of days. If multiple academic sessions are set for a single course offering, the first Academic Session received from the SIS will be used for the start and end dates.
Departments, Semesters, and Other: Map SIS entries to existing org units: Provides the option to map SIS entries based on org unit code to existing org units that were created outside of the SIS (manually, bulk operations, API, etc.). It is not recommended to turn these on for any org units created by your SIS unless you confirmed the codes are unique across schools and school years.
Once complete, select Save Configuration.
When you’re ready to sync data. Navigate to the IPSIS Administration - Dashboard, choose the down arrow beside Run Update Now – Resync all SIS Records to sync chosen data from ClassLink. Note: you may need to do this twice if ClassLink sends the District after sending the Schools in the org end point (it is expected that District is sent first).
Troubleshooting
The Dashboard provides the processing status of the latest batch. Both the Dashboard and Batches pages show a final indicator if the batch completed, either successfully or with errors. Each batch has a quick link to the Audit Log and if completed with errors to Error Messages.
Review all logs to verify all records processed as expected. If error messages were logged, expand the error to review the metadata captured to identify the error, correct the data in your SIS and either wait until the next day for the Scheduled Update or request an update from the Dashboard. The goal is to have the runs completed without error.



--------------------------------------------------


OneRoster REST for Classlink

The Integration Pack for Student Information System (IPSIS) platform
The Integration Pack for Student Information Systems (IPSIS) platform is an integration platform in Brightspace that consists of common components and a collection of products that allow you to import information from your organization's information system to Brightspace, for example, your organization structure, users, and enrollment information. Once that information is imported into Brightspace, you can continue to update your information system and import that information to Brightspace using the IPSIS platform.
Supported information systems
The IPSIS platform integrates with the following common types of information systems:
Student Information Systems (SIS) - A software tool used by educational organizations to manage students, courses, and enrollments.
Human Resource Systems (HRIS) - A software tool used by corporate organizations to manage employees and their data.
Learner Information Systems (LIS) - A software tool used by educational organizations to manage the registration of student enrollments.
Components and products in the IPSIS platform
Under the IPSIS platform, there are common components and several products with unique features to integrate your specific information system with Brightspace. The collection of components and products are:
D2L Standard CSV – Used for integrating with SIS/HRIS systems by using D2L-defined Comma-Separated Value (CSV) files.
Ellucian ILP – Used for integrating with Banner or Colleague systems, based on LIS specifications.
OneRoster CSV or OneRoster REST – Used for integrating with K-12 information systems that support the IMS Global Learning Consortium’s OneRoster specification.
LIS v2.0 Adapter - Used for integrating with information systems that support the IMS Global Learning Consortium's LIS specification.
SIS Course Merge - An interface in Brightspace used to enable instructors to merge and unmerge multiple IPSIS-processed courses into and out of one parent course offering.
Section Association Interface (UI) - An interface in Brightspace used to manually manipulate relationships between enrollable courses or sections in an SIS and course offerings in Brightspace.
IPSIS Administration Interface (Admin UI) - An administration interface in Brightspace used for configuring and reviewing the status of SIS integrations with Brightspace.
OneRoster is an IMS standard designed to allow secure sharing of class rosters and related data between a student information system (SIS) and any other system.  The OneRoster standard supports spreadsheet-style (CSV) export-import as well as direct system exchanges using REST API’s. This administration guide focuses on the REST specification.
Before you use OneRoster REST 1.1
D2L supports the IMS OneRoster v1.1 specification and recertifies against the IMS Global product certification suite yearly. D2L supports the following Conformance Certifications:
REST Data Provider Gradebook Push Core
REST Data Consumer Rostering Core
The Brightspace implementation of the OneRoster v1.1 specification lets administrators schedule data to be pulled from their SIS to populate the required roster related data (schools, classes, users, enrollments, etc.) in the Brightspace platform. The new IPSIS OneRoster REST user interface includes a schedule to allow administrators to configure the time of day when the data pulls occur. Additionally, for an SIS partner supporting the Gradebook service, administrators can set the grades to be returned with the daily data sync and/or allow a faculty member to initiate a manual sync.
Endpoints used
Type
URL
GET
ims/oneroster/v1p1/academicSessions
GET
ims/oneroster/v1p1/classes
GET
ims/oneroster/v1p1/enrollments
GET
ims/oneroster/v1p1/orgs
GET
ims/oneroster/v1p1/orgs/{id}
GET

ims/oneroster/v1p1/users

How OneRoster REST is mapping to Brightspace
Below are the mapping values between a OneRoster object type and a Brightspace object type
One Roster
D2L Brightspace
Academic Sessions
Org Units*
Orgs	
Org Units*
Schools	
Org Units*
Courses	
 Course Template
Classes	
Course Offering & Course Section
Users	
User
Enrollments	
Enrollment
*Org unit types are typically custom org unit types that can be mapped during the configuration process.
Academic Sessions
OneRoster			
Supported Values
Used by Brightspace for
Required
sourcedId
 
N/A
Y
status
active or tobedeleted
Create/Replace or Delete 
Y
dateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
metadata
N/A
N/A
 
title
 
Org Unit Name and Org Unit Code
Y
startDate
YYYY-MM-DD
Exposed for academic session in gradebook and course offering
Y
endDate
YYYY-MM-DD
Exposed for academic session in gradebook and course offering
Y
type
Semester, Term, Grading Period, SchoolYear
Org Unit Type
Y
parent
N/A
N/A
N/A
Children
N/A
N/A
N/A
SchoolYear
N/A
N/A
N/A
 
Orgs
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Replace or Delete
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Name
 
Org Unit Name and Org Unit Code
Y
Identifier
 
Org Unit Code (If provided)
N
StartDate
YYYY-MM-DD
N/A
Y
EndDate
YYYY-MM-DD
N/A
Y
Type
District, Department, Local, National, School, State
Org Unit Type
Y
Parent
 
Parent Org Units
Required to create org structure
Children
N/A
N/A
N/A
 
Courses
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Title
 
Org Unit Name and Org Unit Code
Y
SchoolYear
 
Parent Org Units
N
CourseCode
 
Org Unit Code (If provided)
N
Grades
N/A
N/A
 
Subjects
N/A
N/A
 
Org
 
Parent Org Units
Required to create org structure
StartDate
YYYY-MM-DD
N/A
 
EndDate
YYYY-MM-DD
N/A
 
SubjectCodes
N/A
N/A
 
Resources
N/A
N/A
 
 
Classes
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active or Inactive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
Title
 
Org Unit Name and Org Unit Code
Y
ClassCode
 
Org Unit Code (If provided)
N
ClassType
N/A
Location
N/A
Grades
N/A
Subjects
N/A
Course
 
Parent Org Units
Y
School
 
Parent Org Units
Y
Terms
 
Parent Org Units
Y
SubjectCodes
N/A
Periods
N/A
Resources
N/A
 
Users
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
OrgDefinedId
Y
Status
active or tobedeleted
IsActive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
UserName
 
UserName
Y
UserIds
Not Mapped
EnabledUser
 
IsActive
Y
GivenName
 
FirstName
Y
FamilyName
 
LastName
Y
MiddleName
 
MiddleName
N
Role
 
Role In Org
Y
Identifier
 
OrgDefinedId (If provided)
N
Email
 
ExternalEmail
N
Sms
 
N/A
N
Phone
 
N/A
N
Agents
 
Brightspace Parent & Guardian
N
Orgs
  Upper Org Unit Enrollments (With Role in Org)
Grades
N/A
Password
 
User Password
N
 
Enrollments
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
 
Y
MetaData
N/A
User
 
User to Enroll
Y
Class
 
Course Offering & Section to Enroll in
Y
School
N/A
Role
 
Role
Y
Primary
N/A
BeginDate
N/A
EndDate
N/A
Assumptions and Limitations
Assumptions
D2L can work with any SIS that supports OneRoster 1.1 REST and is certified with IMS Global or working towards their certification.
REST Process
Scheduled runs run from the previous run date of the data extract to the start date of the current data extract. If this is the first run, it acts like a sync operation and runs with no start date to the date range.
There is an option to trigger a run manually from the previous run date, from a specific date or for all records in the system
Call Order: The order that the various endpoints or consuming the various files are called in.Academic SessionsOrgsSchoolsCoursesClassesUsersEnrollments
Limitations
Records with a status of tobedeleted are only deleted if the child is deleted
Enrollments using the User’s Org property cannot be unenrolled via the OneRoster integration at this time.
Unsupported characters: there are several characters that are not supported in the Brightspace Org Unit Code. These characters are replaced with an underscore (_). Unsupported Characters: \ :  ? “ ” < > | ‘  # , % &
Truncations: The max length for the Org Unit Code in Brightspace is 50 characters. If it exceeds this length, it is truncated in the UI.
Configuration options for OneRoster REST
You will work with your Brightspace Implementation Consultant to set up your OneRoster REST source system. Brightspace automatically defaults to your most common settings. However, these settings can be edited at any time with the appropriate permissions.
Before the source system can be configured, make sure you have the following items completed:
General Requirements
Contact your OneRoster representative to obtain your API information. You will need:
Endpoint URL
Consumer Key
Consumer Secret
OAuth Signature Method = SHA-256
Configuration
After the initial set up, you can update the configuration of your OneRoster REST source system:
From the Admin Tools menu, select IPSIS Administration, select the Configuration tab
Credentials provided during initial set up will appear first, these credentials can be edited if required.
Source System fields:
SIS Name: The SIS Name field is editable and is recommended to be kept up to date.
Scheduled Updates: The time that Brightspace will automatically sync with the SIS. It is recommended that this process is completed overnight.
Overwriting Brightspace: Granular choices to identify which fields in Brightspace your SIS can overwrite.
People
SIS Role Mappings: This section contains the OneRoster specific role to map SIS role names to Brightspace role names. Teacher and Student roles are included by default, but they can be deleted. The following are the roles available in OneRoster:
Administrator
Aide
Guardian
Parent
Proctor
Relative
Student
Teacher

            To add additional SIS specific role names to map to Brightspace roles, click + Add Role.Note: If the SIS sends a role that is not configured, it results in an error and the user cannot be created.Map SIS Entries to Existing Users: Provides the option to map SIS entries based on username or OrgDefinedId to existing users that were created outside of the SIS (manually, bulk operations, API, etc.). If mappings are off, duplicates may be created.Courses and Sections
Courses and Sections - Mappings: This section contains the OneRoster specific org unit types to map SIS orgs to Brightspace org names.
Click + Add Org Unit Type to add additional SIS specific org unit names. The following Org Unit Types are required for ClassLink:SIS OrgsDistrictSchoolLocal, National, State, and Department are optionalAcademic Session TypeSemesterTermSchoolYearGradingPeriodSIS GroupCourse OfferingCourse SectionCourse TemplateSection Association
Deletion: Provides two options on how a tobedeleted status affects an org unit in Brightspace.Do Nothing – the org unit mapping will be deleted from IPSIS mappings, but the org unit will remain unchanged in BrightspaceInactivate course offering – the org unit mapping will be deleted from IPSIS mappings, the course offering will be marked inactive in Brightspace, section and enrollments will remain
Map SIS entries to courses and sections: Provides the option to map SIS entries based on org unit code to existing org units that were created outside of the SIS (manually, bulk operations, API, etc.). It is not recommended to turn these on for any org units created by your SIS unless you confirmed the codes are unique across schools and school years. If they are not unique, the SIS may overwrite existing org units with data from other org units.
 Course Content: Provides the ability to copy course content from a master course or a course template to the newly created course. Select Yes and choose one of the following:If Find an Org Unit to automatically copy from based on specified criteria? is not selected, content is copied from a Master Course Offering to the sibling Course Offering when the Master Course Offering and Course Template share the same Org Unit CodeIf Find an Org Unit to automatically copy from based on specified criteria? is selected, you can choose from two options:Parent course template of the new courseContent is copied from the parent Course Template to the new child Course OfferingSibling course where the Org Unit Code matches the parent template. Content is copied from the source course offering to the new child Course Offering based on the source course being manually added to Brightspace with the same org unit code as the parent template.
Course Offering Dates: Allows you to use academic session information for course offering start and end dates. This check box is set to off by default. This option allows you to choose if academic session (semester, term, school year, or grading period) dates are associated to the course offering (this option defaults to term). The start date and end date of a course can also be offset by a specified number of days. If multiple academic sessions are set for a single course offering, the first Academic Session received from the SIS will be used for the start and end dates.
Departments, Semesters, and Other: Map SIS entries to existing org units: Provides the option to map SIS entries based on org unit code to existing org units that were created outside of the SIS (manually, bulk operations, API, etc.). It is not recommended to turn these on for any org units created by your SIS unless you confirmed the codes are unique across schools and school years.
Once complete, select Save Configuration.
When you’re ready to sync data. Navigate to the IPSIS Administration - Dashboard, choose the down arrow beside Run Update Now – Resync all SIS Records to sync chosen data from ClassLink. Note: you may need to do this twice if ClassLink sends the District after sending the Schools in the org end point (it is expected that District is sent first).
 
Troubleshooting
The Dashboard provides the processing status of the latest batch. Both the Dashboard and Batches pages show a final indicator if the batch completed successfully or with errors. Each batch has a quick link to the Audit Log and if completed with errors to Error Messages.
Review all logs to verify all records processed as expected. If error messages were logged, expand the error to review the metadata captured to identify the error, correct the data in your SIS and either wait until the next day for the Scheduled Update or request an update from the Dashboard. The goal is to have the runs completed without error.
 



--------------------------------------------------


OneRoster REST for Infinite Campus

The Integration Pack for Student Information System (IPSIS) platform
The Integration Pack for Student Information Systems (IPSIS) platform is an integration platform in Brightspace that consists of common components and a collection of products that allow you to import information from your organization's information system to Brightspace, for example, your organization structure, users, and enrollment information. Once that information is imported into Brightspace, you can continue to update your information system and import that information to Brightspace using the IPSIS platform.
Supported information systems
The IPSIS platform integrates with the following common types of information systems:
Student Information Systems (SIS) - A software tool used by educational organizations to manage students, courses, and enrollments.
Human Resource Systems (HRIS) - A software tool used by corporate organizations to manage employees and their data.
Learner Information Systems (LIS) - A software tool used by educational organizations to manage the registration of student enrollments.
Components and products in the IPSIS platform
Under the IPSIS platform, there are common components and several products with unique features to integrate your specific information system with Brightspace. The collection of components and products are:
D2L Standard CSV – Used for integrating with SIS/HRIS systems by using D2L-defined Comma-Separated Value (CSV) files.
Ellucian ILP – Used for integrating with Banner or Colleague systems, based on LIS specifications.
OneRoster CSV or OneRoster REST – Used for integrating with K-12 information systems that support the IMS Global Learning Consortium’s OneRoster specification.
LIS v2.0 Adapter - Used for integrating with information systems that support the IMS Global Learning Consortium's LIS specification.
SIS Course Merge - An interface in Brightspace used to enable instructors to merge and unmerge multiple IPSIS-processed courses into and out of one parent course offering.
Section Association Interface (UI) - An interface in Brightspace used to manually manipulate relationships between enrollable courses or sections in an SIS and course offerings in Brightspace.
IPSIS Administration Interface (Admin UI) - An administration interface in Brightspace used for configuring and reviewing the status of SIS integrations with Brightspace.
About OneRoster 1.1 REST
OneRoster is an IMS standard designed to allow secure sharing of class rosters and related data between a student information system (SIS) and any other system.  The OneRoster standard supports spreadsheet-style (CSV) export-import as well as direct system exchanges using REST API’s. This administration guide focuses on the REST specification.
Before you use OneRoster REST 1.1
D2L supports the IMS OneRoster v1.1 specification and recertifies against the IMS Global product certification suite yearly. D2L supports the following Conformance Certifications:
REST Data Provider Gradebook Push Core
REST Data Consumer Rostering Core
The Brightspace implementation of the OneRoster v1.1 specification lets administrators schedule data to be pulled from their SIS to populate the required roster related data (schools, classes, users, enrollments, etc.) in the Brightspace platform. The new IPSIS OneRoster REST user interface includes a schedule to allow administrators to configure the time of day when the data pulls occur. Additionally, for an SIS partner supporting the Gradebook service, administrators can set the grades to be returned with the daily data sync and/or allow a faculty member to initiate a manual sync.
Endpoints used
Type
URL
GET
ims/oneroster/v1p1/academicSessions
GET
ims/oneroster/v1p1/classes
GET
ims/oneroster/v1p1/enrollments
GET
ims/oneroster/v1p1/orgs
GET
ims/oneroster/v1p1/orgs/{id}
GET
ims/oneroster/v1p1/schools/{id}
GET
ims/oneroster/v1p1/schools/{id}/classes
GET
ims/oneroster/v1p1/schools/{id}/courses
GET
ims/oneroster/v1p1/schools/{id}/enrollments
GET
ims/oneroster/v1p1/users
GET
ims/oneroster/v1p1/categories (+metadata required)
PUT
ims/oneroster/v1p1/categories (IC)
PUT
ims/oneroster/v1p1/lineitems
PUT
ims/oneroster/v1p1/results
How OneRoster REST is mapping to Brightspace
General Mapping Values
Below are the mapping values between a OneRoster object type and a Brightspace object type
One Roster
D2L Brightspace
Academic Sessions
Org Units*
Orgs	
Org Units*
Schools	
Org Units*
Courses	
 Course Template
Classes	
Course Offering & Course Section
Users	
User
Enrollments	
Enrollment
LineItems	
Grade Item
Results	
Grade Value
*Org unit types are typically custom org unit types that can be mapped during the configuration process.
Academic Sessions
OneRoster			
Supported Values
Used by Brightspace for
Required
sourcedId
 
N/A
Y
status
active or tobedeleted
Create/Replace or Delete 
Y
dateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
metadata
N/A
N/A
 
title
 
Org Unit Name and Org Unit Code
Y
startDate
YYYY-MM-DD
Exposed for academic session in gradebook
Y
endDate
YYYY-MM-DD
Exposed for academic session in gradebook
Y
type
 
Org Unit Type
Y
parent
N/A
N/A
N/A
Children
N/A
N/A
N/A
SchoolYear
N/A
N/A
N/A
 
Orgs
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Replace or Delete
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Name
 
Org Unit Name and Org Unit Code
Y
Identifier
 
Org Unit Code (If provided)
N
StartDate
YYYY-MM-DD
N/A
Y
EndDate
YYYY-MM-DD
N/A
Y
Type
 
Org Unit Type
Y
Parent
 
Parent Org Units
Required to create org structure
Children
N/A
N/A
N/A
 
Courses
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Title
 
Org Unit Name and Org Unit Code
Y
SchoolYear
 
Parent Org Units
N
CourseCode
 
Org Unit Code (If provided)
N
Grades
N/A
N/A
 
Subjects
N/A
N/A
 
Org
 
Parent Org Units
N
StartDate
YYYY-MM-DD
N/A
 
EndDate
YYYY-MM-DD
N/A
 
SubjectCodes
N/A
N/A
 
Resources
N/A
N/A
 
 
Classes
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active or Inactive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
Title
 
Org Unit Name and Org Unit Code
Y
ClassCode
 
Org Unit Code (If provided)
N
ClassType
N/A
Location
N/A
Grades
N/A
Subjects
N/A
Course
 
Parent Org Units
Y
School
 
Parent Org Units
Y
Terms
 
Parent Org Units
Y
SubjectCodes
N/A
Periods
N/A
Resources
N/A
 
Users
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
OrgDefinedId
Y
Status
active or tobedeleted
IsActive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
UserName
 
UserName
Y
UserIds
Not Mapped
EnabledUser
 
IsActive
Y
GivenName
 
FirstName
Y
FamilyName
 
LastName
Y
MiddleName
 
MiddleName
N
Role
 
Role In Org
Y
Identifier
 
OrgDefinedId (If provided)
N
Email
 
ExternalEmail
N
Sms
 
N/A
N
Phone
 
N/A
N
Agents
 
Brightspace Parent & Guardian
N
Orgs
  Upper Org Unit Enrollments (With Role in Org)
Grades
N/A
Password
 
User Password
N
 
Enrollments
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
 
Y
MetaData
N/A
User
 
User to Enroll
Y
Class
 
Course Offering & Section to Enroll in
Y
School
N/A
Role
 
Role
Y
Primary
N/A
BeginDate
N/A
EndDate
N/A
Assumptions and Limitations
Assumptions
D2L can work with any SIS that supports OneRoster 1.1 REST and is certified with IMS Global or working towards their certification.
REST Process
Scheduled runs run from the previous run date of the data extract to the start date of the current data extract. If this is the first run, it acts like a sync operation and runs with no start date to the date range.
There is an option to trigger a run manually from the previous run date, from a specific date or for all records in the system
Call Order: The order that the various endpoints or consuming the various files are called in.SchoolsAcademic SessionsOrgsCoursesClassesUsersEnrollments
The order that data is sent back to Infinite CampusLineitems (sent on demand or nightly based on grade export permissions)Results (sent on demand or nightly based on grade export permissions)
Grade Export
For a grade to be exported, the course must have been created through OneRoster and the OneRoster IPSIS source system must have Grades Export enabled. The course may only be mapped to one active source system with grades. Grades must belong to Grade Categories that have “Export to SIS” checked and the grade must have an Academic Session selected.
Academic Sessions
The Academic Session dropdown menu is visible when creating a new grade item. The menu is populated by finding all org units created by the same SIS as the course where the SIS mapping is for Academic Session. The academic session must be a parent to the course offering.
Categories
Infinite Campus does not support Categories; however, a Category is still required in Brightspace. This category is used to link grade items so that Brightspace knows which grade items should and should not be sent.
How the grade sync works
Grade items (line items) are synced if they meet any of the following conditions:
Line item has never been sent
Line item has been updated since it was last sent (This includes name, academic session, points, delete, restore from delete)
Line item failed to be sent during the last export
Line items use the end dates of the academic session associated to the grade; the end date is sent for both the assign and due date
Note: The line item sourced id that gets sent is class-specific and is generated like this: {lineItemSourcedId}_{classSourcedId}
Grades (results) are synced if they meet any of the following conditions:
Result has never been sent
Result has been updated since it was last sent
Result failed to be sent during the last export
Parent line item has been modified since the last export

An assignment and due date are sent with the lineitem. Below is the logic Brightspace uses when sending dates:
Lineitem (Grade) Assign Date is determined as follows:Use Activity Start Date if it exists, if notUse Activity Due Date if it exists, if notUse Activity End Date if it exists, if notUse Academic Session End Date
Lineitem (Grade) Due Date is determined as follows:Use Activity Due Date if it exists, if notUse Activity End Date if it exists, if notUse Academic Session End Date

Note: The line item sourced id that gets sent is class-specific and is generated like this: {lineItemSourcedId}_{classSourcedId}
Grades (results) are synced if they meet any of the following conditions:
Result has never been sent
Result has been updated since it was last sent
Result failed to be sent during the last export
Parent line item has been modified since the last export
Note: Line items and Results that were sent to the SIS as deleted do not appear in the Export History UI.
Limitations
Records with a status of tobedeleted are only deleted if the child is deleted
Enrollments using the User’s Org property cannot be unenrolled via the OneRoster integration at this time.
Unsupported characters: there are several characters that are not supported in the Brightspace Org Unit Code. These characters are replaced with an underscore (_). Unsupported Characters: \ : * ? “ ” < > | ‘  # , % &
Truncations: The max length for the Org Unit Code in Brightspace is 50 characters. If it exceeds this length, it is truncated in the UI.
OneRoster allows multiple ScoreStatus: Brightspace only sends fully graded or exempt
Configuration options for OneRoster REST
You will work with your Brightspace Implementation Consultant to set up your OneRoster REST source system. Brightspace automatically defaults to your most common settings. However, these settings can be edited at any time with the appropriate permissions.
Before the source system can be configured, make sure you have the following items completed:
General Requirements
Contact your Infinite Campus representative to obtain your API information. You will need:
Endpoint URL
Consumer Key
Consumer Secret
Configuration
After the initial set up, you can update the configuration of your OneRoster REST source system:
From the Admin Tools menu, select IPSIS Administration, select the Configuration tab.
Credentials provided during initial set up will appear first, these credentials can be edited if required. (Infinite Campus supports OAuth1.0a and OAuth Signature HMAC-SHA256).
Source System
SIS Name: The SIS Name field is editable and is recommended to be kept up to date.
Scheduled Updates: The time that Brightspace will automatically sync with the SIS. It is recommended that this process is completed overnight.
Overwriting Brightspace: Granular choices to identify which fields in Brightspace your SIS can overwrite.
PeopleSIS Role Mappings: This section contains the OneRoster specific role to map SIS role names to Brightspace role names. Teacher and Student roles are included by default, but they can be deleted. The following are the roles available in OneRoster:AdministratorAideGuardianParentProctorRelativeStudentTeacher
            To add additional SIS specific role names to map to Brightspace roles, click + Add Role.Note: If the SIS sends a role that is not configured, it results in an error and the user cannot be created.Map SIS Entries to Existing Users: Provides the option to map SIS entries based on username or OrgDefinedId to existing users that were created outside of the SIS (manually, bulk operations, API, etc.). If mappings are off, duplicates may be created.Courses and Sections
Courses and Sections - Mappings: This section contains the OneRoster specific org unit types to map SIS orgs to Brightspace org names.
Click + Add Org Unit Type to add additional SIS specific org unit names. The following Org Unit Types are required for Infinite Campus:SIS OrgsDistrictSchoolAcademic Session TypeSemesterTermSchoolYearGradingPeriodSIS Group	Course OfferingCourse Section	Course TemplateSection Association
Deletion: Provides three options on how a tobedeleted status affects an org unit in Brightspace.Do Nothing – the org unit mapping will be deleted from IPSIS mappings, but the org unit will remain unchanged in BrightspaceInactivate course offering – the org unit mapping will be deleted from IPSIS mappings, the course offering will be marked inactive in Brightspace, section and enrollments will remain
	Course Content :Provides the ability to copy course content from a master course or a course template to the newly created course. Select Yes and choose one of the following:Parent course template of the new courseContent is copied from the parent Course Template to the new child Course OfferingSibling course where the Org Unit Code matches the parent templateContent is copied from a Master Course Offering to the sibling Course Offering when the Master Course Offering and Course Template share the same Org Unit Code
Grades Export
Provides the option to allow grade syncs of all modified grade items at the time of the Scheduled Update, and/or, to allow Teacher initiated grade export from the course offering.
Once complete, select Save Configuration.
Troubleshooting
The Dashboard provides the processing status of the latest batch. Both the Dashboard and Batches pages show a final indicator if the batch completed successfully or with errors. Each batch has a quick link to the Audit Log and if completed with errors to Error Messages.
Review all logs to verify all endpoints processed as expected. If error messages were logged, expand the error to review the metadata captured to identify the error, correct the data in your SIS and either wait until the next day for the Scheduled Update or request an update from the Dashboard. The goal is to have the runs completed without error.
How to sync Grades
Grades can be set to sync nightly with the daily roster update, on demand via the grades interface, or both. These options are set up in IPSIS Administration > Configuration > Export Grades.
To send grades, a category, grade item, and grade are required. See the Grades Export section for overall rules to send a grade.
Create a Category
On the course home page, navigate to Grades.
In the Manage Grades area, from the New button, click Category.
Set the desired preferences and options for the category.
Click Export to SIS to indicate that all line items associated to this category should be synched with the SIS.
Click Save and Close.
Create a Grade Item
In the Manage Grades area, click New and select Item.
Set the desired preferences and options for the category.
Choose an Academic Session from the dropdown menu.
Map the grade item to the Category synced with the SIS.
Click Save and Close.
Export to SIS
To manually sync grades to the SIS:
From the course home page, navigate to Grades – Enter Grades – Export to SIS
On the Export Grades UI, you are presented with a summary page that includes:
Section: a dropdown menu that allows you to choose between different sections in the course (if multiple sections are present)
Academic Session: a dropdown menu that allows you to choose between different School Years associated with the course (if multiple academic sessions are used)
Overview: Lists the number of Categories and the number of grades within the categories that meet the criteria selected in Section and Academic Session above and can be exported
Scheduled Export: only visible if configured in SIS Integration configuration and can be edited in the Configuration tab in IPSIS Administration
Click Export. The page refreshes and takes you to the View All Exports page. This UI provides an overview of who sent the grades and when.Once the export has completed, click on the Export Name to view details that include: Course name, Export start and end dates, and User who initiated the export
Note: If grades are sent via the nightly sync the IPSIS Service user is displayed
Successful and failed export details for Categories, Grade Items and Results:
You can navigate back to historical exports, using Grades > Enter Grades > Export to SIS and click View Export History at the top right.
Use academic session information for course start and end dates
On the IPSIS administration page the Use course offering dates checkbox allows you to use academic session information for course offering start and end dates. This checkbox is set to off by default. This option allows you to choose if academic session (semester, term, school year, or grading period) dates are associated to the course offering (this option defaults to term). The start date and end date of a course can also be offset by a specified number of days. If multiple academic sessions are set for a single course offering, the first Academic Session received from the SIS will be used for the start and end dates.



--------------------------------------------------


OneRoster REST for Synergy

The Integration Pack for Student Information System (IPSIS) platform
The Integration Pack for Student Information Systems (IPSIS) platform is an integration platform in Brightspace that consists of common components and a collection of products that allow you to import information from your organization's information system to Brightspace, for example, your organization structure, users, and enrollment information. Once that information is imported into Brightspace, you can continue to update your information system and import that information to Brightspace using the IPSIS platform.
Supported information systems
The IPSIS platform integrates with the following common types of information systems:
Student Information Systems (SIS) - A software tool used by educational organizations to manage students, courses, and enrollments.
Human Resource Systems (HRIS) - A software tool used by corporate organizations to manage employees and their data.
Learner Information Systems (LIS) - A software tool used by educational organizations to manage the registration of student enrollments.
Components and products in the IPSIS platform
Under the IPSIS platform, there are common components and several products with unique features to integrate your specific information system with Brightspace. The collection of components and products are:
D2L Standard CSV – Used for integrating with SIS/HRIS systems by using D2L-defined Comma-Separated Value (CSV) files.
Ellucian ILP – Used for integrating with Banner or Colleague systems, based on LIS specifications.
OneRoster CSV or OneRoster REST – Used for integrating with K-12 information systems that support the IMS Global Learning Consortium’s OneRoster specification.
LIS v2.0 Adapter - Used for integrating with information systems that support the IMS Global Learning Consortium's LIS specification.
SIS Course Merge - An interface in Brightspace used to enable instructors to merge and unmerge multiple IPSIS-processed courses into and out of one parent course offering.
Section Association Interface (UI) - An interface in Brightspace used to manually manipulate relationships between enrollable courses or sections in an SIS and course offerings in Brightspace.
IPSIS Administration Interface (Admin UI) - An administration interface in Brightspace used for configuring and reviewing the status of SIS integrations with Brightspace.
About OneRoster 1.1 REST
OneRoster is an IMS standard designed to allow secure sharing of class rosters and related data between a student information system (SIS) and any other system.  The OneRoster standard supports spreadsheet-style (CSV) export-import as well as direct system exchanges using REST API’s. This administration guide focuses on the REST specification.
Before you use OneRoster REST 1.1
D2L supports the IMS OneRoster v1.1 specification and recertifies against the IMS Global product certification suite yearly. D2L supports the following Conformance Certifications:
REST Data Provider Gradebook Push Core
REST Data Consumer Rostering Core
The Brightspace implementation of the OneRoster v1.1 specification lets administrators schedule data to be pulled from their SIS to populate the required roster related data (schools, classes, users, enrollments, etc.) in the Brightspace platform. The new IPSIS OneRoster REST user interface includes a schedule to allow administrators to configure the time of day when the data pulls occur. Additionally, for an SIS partner supporting the Gradebook service, administrators can set the grades to be returned with the daily data sync and/or allow a faculty member to initiate a manual sync.
Endpoints used
Type
URL
GET
ims/oneroster/v1p1/academicSessions
GET
ims/oneroster/v1p1/classes
GET
ims/oneroster/v1p1/enrollments
GET
ims/oneroster/v1p1/orgs
GET
ims/oneroster/v1p1/orgs/{id}
GET
ims/oneroster/v1p1/schools/{id}
GET
ims/oneroster/v1p1/schools/{id}/classes
GET
ims/oneroster/v1p1/schools/{id}/courses
GET
ims/oneroster/v1p1/schools/{id}/enrollments
GET
ims/oneroster/v1p1/users
GET
ims/oneroster/v1p1/categories (+metadata required)
PUT
ims/oneroster/v1p1/lineitems
PUT
ims/oneroster/v1p1/results
How OneRoster REST is mapping to Brightspace
Below are the mapping values between a OneRoster object type and a Brightspace object type
One Roster
D2L Brightspace
Academic Sessions
Org Units*
Orgs	
Org Units*
Schools	
Org Units*
Courses	
Course Template
Classes	
Course Offering & Course Section
Users	
User
Enrollments	
Enrollment
LineItems	
Grade Item
Results	
Grade Value
*Org unit types are typically custom org unit types that can be mapped during the configuration process.
Academic Sessions
OneRoster			
Supported Values
Used by Brightspace for
Required
sourcedId
 
N/A
Y
status
active or tobedeleted
Create/Replace or Delete 
Y
dateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
metadata
N/A
N/A
 
title
 
Org Unit Name and Org Unit Code
Y
startDate
YYYY-MM-DD
Exposed for academic session in gradebook
Y
endDate
YYYY-MM-DD
Exposed for academic session in gradebook
Y
type
Semester, Term, Grading Period, SchoolYear
Org Unit Type
Y
parent
N/A
N/A
N/A
Children
N/A
N/A
N/A
SchoolYear
N/A
N/A
N/A
 
Orgs
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Replace or Delete
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Name
 
Org Unit Name and Org Unit Code
Y
Identifier
 
Org Unit Code (If provided)
N
StartDate
YYYY-MM-DD
N/A
Y
EndDate
YYYY-MM-DD
N/A
Y
Type
District, Department, Local, National, School, State
Org Unit Type
Y
Parent
 
Parent Org Units
Required to create org structure
Children
N/A
N/A
N/A
 
Courses
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Title
 
Org Unit Name and Org Unit Code
Y
SchoolYear
 
Parent Org Units
N
CourseCode
 
Org Unit Code (If provided)
N
Grades
N/A
N/A
 
Subjects
N/A
N/A
 
Org
 
Parent Org Units
Required to create org structure
StartDate
YYYY-MM-DD
N/A
 
EndDate
YYYY-MM-DD
N/A
 
SubjectCodes
N/A
N/A
 
Resources
N/A
N/A
 
 
Classes
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active or Inactive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
Title
 
Org Unit Name and Org Unit Code
Y
ClassCode
 
Org Unit Code (If provided)
N
ClassType
N/A
Location
N/A
Grades
N/A
Subjects
N/A
Course
 
Parent Org Units
Y
School
 
Parent Org Units
Y
Terms
 
Parent Org Units
Y
SubjectCodes
N/A
Periods
N/A
Resources
N/A
 
Users
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
OrgDefinedId
Y
Status
active or tobedeleted
IsActive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
UserName
 
UserName
Y
UserIds
Not Mapped
EnabledUser
 
IsActive
Y
GivenName
 
FirstName
Y
FamilyName
 
LastName
Y
MiddleName
 
MiddleName
N
Role
 
Role In Org
Y
Identifier
 
OrgDefinedId (If provided)
N
Email
 
ExternalEmail
N
Sms
 
N/A
N
Phone
 
N/A
N
Agents
 
Brightspace Parent & Guardian
N
Orgs
  Upper Org Unit Enrollments (With Role in Org)
Grades
N/A
Password
 
User Password
N
 
Enrollments
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
 
Y
MetaData
N/A
User
 
User to Enroll
Y
Class
 
Course Offering & Section to Enroll in
Y
School
N/A
Role
 
Role
Y
Primary
N/A
BeginDate
N/A
EndDate
N/A
Assumptions and Limitations
Assumptions
D2L can work with any SIS that supports OneRoster 1.1 REST and is certified with IMS Global or working towards their certification.
REST Process
Scheduled runs run from the previous run date of the data extract to the start date of the current data extract. If this is the first run, it acts like a sync operation and runs with no start date to the date range.
There is an option to trigger a run manually from the previous run date, from a specific date or for all records in the system
Call Order: The order that the various endpoints or consuming the various files are called in.Academic SessionsOrgsSchoolsCoursesClassesUsersEnrollments
The order that data is sent back to SynergyLineitems (sent on demand or nightly based on grade export settings)Results (sent on demand or nightly based on grade export permissions)
Grade Export
For a grade to be exported, the course must have been created through OneRoster SIS integration and the OneRoster IPSIS source system must have Grades Export enabled. The course may only be mapped to one active source system with grades. Grades must belong to Grade Categories that are retrieved from the SIS and the grade must have an Academic Session selected.
Academic Sessions
The Academic Session (Terms) dropdown menu is visible when creating a new grade item. The menu is populated by finding all org units created by the same SIS as the course where the SIS mapping is for Academic Session. The academic session must be a parent to the course offering.
Categories
Categories are  required for the integration. Categories created by Synergy have the Export to SIS option selected. This category is used to link grade items so that Brightspace knows which grade items should and should not be sent.
How the grade sync works
Grade items (line items) are synced if they meet any of the following conditions:
Line item has never been sent
Line item has been updated since it was last sent (This includes name, academic session, points, delete, restore from delete)
Line item failed to be sent during the last export

An assignment and due date are sent with the lineitem. Below is the logic Brightspace uses when sending dates:
Lineitem (Grade) Assign Date is determined as follows:Use Activity Start Date if it exists, if notUse Activity Due Date if it exists, if notUse Activity End Date if it exists, if notUse Academic Session End Date
Lineitem (Grade) Due Date is determined as follows:Use Activity Due Date if it exists, if notUse Activity End Date if it exists, if notUse Academic Session End Date

Note: The line item sourced id that gets sent is class-specific and is generated like this: {lineItemSourcedId}_{classSourcedId}
Grades (results) are synced if they meet any of the following conditions:
Result has never been sent
Result has been updated since it was last sent
Result failed to be sent during the last export
Parent line item has been modified since the last export
Note: Line items and Results that were sent to the SIS as deleted do not appear in the Export History UI.
Limitations
Records with a status of tobedeleted are only deleted if the child is deleted
Enrollments using the User’s Org property cannot be unenrolled via the OneRoster integration at this time.
Unsupported characters: there are several characters that are not supported in the Brightspace Org Unit Code. These characters are replaced with an underscore (_). Unsupported Characters: \ :  ? “ ” < > | ‘  # , % &
Truncations: The max length for the Org Unit Code in Brightspace is 50 characters. If it exceeds this length, it is truncated in the UI.
OneRoster allows multiple ScoreStatus: Brightspace only sends fully graded or exempt
Configuration options for OneRoster REST
You will work with your Brightspace Implementation Consultant to set up your OneRoster REST source system. Brightspace automatically defaults to your most common settings. However, these settings can be edited at any time with the appropriate permissions.
Before the source system can be configured, make sure you have the following items completed:
General Requirements
Contact your OneRoster representative to obtain your API information. You will need:
Endpoint URL
Authentication Endpoint
Client Id
Client Secret
Configuration
After the initial set up, you can update the configuration of your OneRoster REST source system:
From the Admin Tools menu, select IPSIS Administration, select the Configuration tab
Credentials provided during initial set up will appear first, these credentials can be edited if required.
Source System fields:SIS Name: The SIS Name field is editable and is recommended to be kept up to date.Scheduled Updates: The time that Brightspace will automatically sync with the SIS. It is recommended that this process is completed overnight.Overwriting Brightspace: Granular choices to identify which fields in Brightspace your SIS can overwrite.
People
SIS Role Mappings: This section contains the OneRoster specific role to map SIS role names to Brightspace role names. Teacher and Student roles are included by default, but they can be deleted. The following are the roles available in OneRoster:
Administrator
Aide
Guardian
Parent
Proctor
Relative
Student
Teacher

            To add additional SIS specific role names to map to Brightspace roles, click + Add Role.Note: If the SIS sends a role that is not configured, it results in an error and the user cannot be created.Map SIS Entries to Existing Users: Provides the option to map SIS entries based on username or OrgDefinedId to existing users that were created outside of the SIS (manually, bulk operations, API, etc.). If mappings are off, duplicates may be created.Courses and Sections
Courses and Sections - Mappings: This section contains the OneRoster specific org unit types to map SIS orgs to Brightspace org names.
Click + Add Org Unit Type to add additional SIS specific org unit names. The following Org Unit Types are required for Synergy:SIS OrgsDistrictSchoolLocal, National, State, and Department are optionalAcademic Session TypeSemesterTermSchoolYearGradingPeriodSIS Group	Course OfferingCourse Section	Course TemplateSection Association
Deletion: Provides two options on how a tobedeleted status affects an org unit in Brightspace.Do Nothing – the org unit mapping will be deleted from IPSIS mappings, but the org unit will remain unchanged in BrightspaceInactivate course offering – the org unit mapping will be deleted from IPSIS mappings, the course offering will be marked inactive in Brightspace, section and enrollments will remain
Map SIS entries to courses and sections: Provides the option to map SIS entries based on org unit code to existing org units that were created outside of the SIS (manually, bulk operations, API, etc.). It is not recommended to turn these on for any org units created by your SIS unless you confirmed the codes are unique across schools and school years.
 Course Content: Provides the ability to copy course content from a master course or a course template to the newly created course. Select Yes and choose one of the following:If Find an Org Unit to automatically copy from based on specified criteria? is not selected, content is copied from a Master Course Offering to the sibling Course Offering when the Master Course Offering and Course Template share the same Org Unit CodeIf Find an Org Unit to automatically copy from based on specified criteria? is selected, you can choose from two options:Parent course template of the new courseContent is copied from the parent Course Template to the new child Course OfferingSibling course where the Org Unit Code matches the parent template. Content is copied from the source course offering to the new child Course Offering based on the source course being manually added to Brightspace with the same org unit code as the parent template.

Grades Export
Provides the option to allow grade syncs of all modified grade items at the time of the Scheduled Update, and/or, to allow Teacher initiated grade export from the course offering.

Departments, Semesters and OtherMap SIS entries to existing org units: Provides the option to map SIS entries based on org unit code to existing org units that were created outside of the SIS (manually, bulk operations, API, etc.). It is not recommended to turn these on for any org units created by your SIS unless you confirmed the codes are unique across schools and school years.
Once complete, select Save Configuration.
 
Troubleshooting
The Dashboard provides the processing status of the latest batch. Both the Dashboard and Batches pages show a final indicator if the batch completed successfully or with errors. Each batch has a quick link to the Audit Log and if completed with errors to Error Messages.
Review all logs to verify all records processed as expected. If error messages were logged, expand the error to review the metadata captured to identify the error, correct the data in your SIS and either wait until the next day for the Scheduled Update or request an update from the Dashboard. The goal is to have the runs completed without error.
How to sync Grades
Grades can be sent nightly with the daily roster update, on demand via the grades interface, or both. These options are set up in IPSIS Administration > Configuration > Export Grades.
To send grades, a category, grade item, and grade are required. See the Grades Export section for overall rules to send a grade.
Category
Categories are automatically created by Synergy. These categories are noted in the Manage Grades UI with an SIS icon.
Create a Grade Item
In the Manage Grades area, click New and select Item.
Set the desired preferences and options for the category.
Choose an Academic Session from the dropdown menu.
Select the End of Course checkbox if the assignment should be sent as an End of Course assignment.
Map the grade item to the Category synced with the SIS.
Click Save and Close.
Export to SIS
To manually sync grades to the SIS:
From the course home page, navigate to Grades> Enter Grades > Export to SIS
On the Export Grades UI, you are presented with a summary page that includes:
Section: a dropdown menu that allows you to choose between different sections in the course (if multiple sections are present)
Academic Session: a dropdown menu that allows you to choose between different School Years associated with the course (if multiple academic sessions are used)
Overview: Lists the number of Categories and the number of grades within the categories that meet the criteria selected in Section and Academic Session above and can be exported
Scheduled Export: only visible if configured in SIS Integration configuration and can be edited in the Configuration tab in IPSIS Administration
Click Export. The page refreshes and takes you to the View All Exports page. This UI provides an overview of who sent the grades and when.Once the export has completed, click on the Export Name to view details that include: Course name, Export start and end dates, and User who initiated the export
Note: If grades are sent via the nightly sync the IPSIS Service user is displayed
Successful and failed export details for Categories, Grade Items and Results:
You can navigate back to historical exports, using Grades > Enter Grades > Export to SIS and click View Export History at the top right.
Use academic session information for course start and end dates 
On the IPSIS administration page the Course offering dates check box allows you to use academic session information for course offering start and end dates.
This check box is set to off by default. This option allows you to choose if academic session (semester, term, school year, or grading period) dates are associated to the course offering (this option defaults to term).
The start date and end date of a course can also be offset by a specified number of days. If multiple academic sessions are set for a single course offering, the first Academic Session received from the SIS will be used for the start and end dates.
 



--------------------------------------------------


About the LIS v2.0 Adapter

LIS refers to the IMS Global Learning Consortium's Learning Information Services specification. This specification, finalized in Q2 of 2012, has been a joint operation between numerous educational institutions, LMS, and SIS vendors (D2L included), and has been in the making since the original IMS Enterprise specification was released in 1999.
The LIS v2.0 Adapter is the D2L implementation of the IMS LIS Specification Core, Combined Sections, and Full Course Hierarchy profiles for a Learning Management System. The solution provides support for both Bulk and Real-time integration between the Student Information System and Brightspace.
For most operations D2L is considered the Synch Agent, and therefore D2L implements the web service operations which are called by the Ref Agent, which is typically a Student Information System. For a few services and operations, such as Outcomes and Bulk, D2L may also call some services and operations in the Student Information System, reversing the Synch and Ref Agent roles.

The adapter consists of a collection of LIS Services, each of which has one or more operations that an SIS can call. When the SIS calls the operation, it uses LIS translators to convert the LIS request into a more generic IPSIS Platform request. The translated requests are passed on to IPSIS handlers (components of the IPSIS Platform) to be further processed and to act against the LMS. The results of this processing are returned to the calling SIS. In the case where D2L is initiating the call, LIS handlers provide the implementation that communicates with the service operation on the SIS side.
Note: This version of the LIS v2.0 Adapter has been built to utilize the released final version of the IMS LIS 2.0 Bindings (XSD, Vocabularies, WSDL) as of April 16, 2012.
Process flow: Real-time processing (synchronous)
The SIS makes a web service request to Brightspace to affect a specific object in a specific way. Generally, there are LIS Services for Users (Person), Org Units (Group, Course Template, Course Offering, Course Section, Section Association) and Enrollments (Membership). 
On Brightspace side, each service implements a set of operations including replace (used for create/update) and delete.
The Brightspace responds synchronously to the request with predefined response codes to indicate success or failure of the operation.
Note: Multithreading of LIS event messages is supported. Brightspace recommends up to four concurrent threads at a time.
Process flow: Successful bulk processing (synchronous and asynchronous)
Bulk processing for LIS consists of a combination of synchronous and asynchronous components. All LIS Service operations respond synchronously, however there are asynchronous processes that occur between steps of the workflow.
Synchronous LIS Message: (Optional, only used when Brightspace initiates bulk integration).Brightspace sends a requestBulkDataExchange request to the SIS BulkDataExchange Service.The SIS acknowledges the request, which puts both systems into Bulk Mode. Real-time requests are rejected.
Asynchronous SIS Proprietary:The SIS begins generating the Bulk Files. (Specifics left to the SIS).The SIS uploads the files to the location that the D2L implementation can now access. Note: The D2L Download handler has been tested with HTTPS and FTP, but additional custom handlers can be written to accommodate most file transfer scenarios.
Synchronous LIS Message:The SIS sends an announceBulkDataExchange request to Brightspace containing the URLs of the bulk data files.A Bulk Job is registered in the IPSIS Platform.Brightspace acknowledges the request, and the systems enter (or remain) in Bulk Mode.
Asynchronous D2L Proprietary:The IPSIS Bulk Job Service begins processing the Bulk Files. The Bulk Job is run through a series of steps: Download the files, parse and process each file in order, generate and prepare a report on processing results and prepare to respond.
Synchronous LIS Message:Brightspace sends a reportBulkDataExchange request to the SIS BulkDataExchange Service.The SIS acknowledges the report and both systems are taken out of Bulk Mode.
Initiate a LIS batch
Batches are initiated and managed from the Dashboard of the IPSIS administration interface. The process of initiating and managing LIS batches is done in a manner consistent with all other IPSIS adapters. However, during initiation, the LIS Adapter offers unique parameters and settings to administrators.
A savepoint is a marker that references the state of the source system at a certain time for a particular type of data. The batch transfers all of the changes from the specified savepoint to the current time. Entering no savepoint will transfer the current state of all data for the selected data type. If you manually override the default savepoint, it is your responsibility to ensure that it is valid for your SIS.
An entity type represents a commonly understood type of data as defined by the LIS v2.0 specification. Consult with your SIS vendor for specifics on how the entity types map to data types within your SIS
From the Admin Tools menu, click IPSIS Administration.
On the Dashboard tab, click Initiate Batch.
On the Batch Transfer window, select the entity types and savepoints that you want to include in your transfer.
Click Start Batch.




--------------------------------------------------


OneRoster REST for Skyward

The Integration Pack for Student Information System (IPSIS) platform
The Integration Pack for Student Information Systems (IPSIS) platform is an integration platform in Brightspace that consists of common components and a collection of products that allow you to import information from your organization's information system to Brightspace, for example, your organization structure, users, and enrollment information. Once that information is imported into Brightspace, you can continue to update your information system and import that information to Brightspace using the IPSIS platform.
Supported information systems
The IPSIS platform integrates with the following common types of information systems:
Student Information Systems (SIS) - A software tool used by educational organizations to manage students, courses, and enrollments.
Human Resource Systems (HRIS) - A software tool used by corporate organizations to manage employees and their data.
Learner Information Systems (LIS) - A software tool used by educational organizations to manage the registration of student enrollments.
Components and products in the IPSIS platform
Under the IPSIS platform, there are common components and several products with unique features to integrate your specific information system with Brightspace. The collection of components and products are:
D2L Standard CSV – Used for integrating with SIS/HRIS systems by using D2L-defined Comma-Separated Value (CSV) files.
Ellucian ILP – Used for integrating with Banner or Colleague systems, based on LIS specifications.
OneRoster CSV or OneRoster REST – Used for integrating with K-12 information systems that support the IMS Global Learning Consortium’s OneRoster specification.
LIS v2.0 Adapter - Used for integrating with information systems that support the IMS Global Learning Consortium's LIS specification.
SIS Course Merge - An interface in Brightspace used to enable instructors to merge and unmerge multiple IPSIS-processed courses into and out of one parent course offering.
Section Association Interface (UI) - An interface in Brightspace used to manually manipulate relationships between enrollable courses or sections in an SIS and course offerings in Brightspace.
IPSIS Administration Interface (Admin UI) - An administration interface in Brightspace used for configuring and reviewing the status of SIS integrations with Brightspace.
About OneRoster 1.1 REST
OneRoster is an IMS standard designed to allow secure sharing of class rosters and related data between a student information system (SIS) and any other system.  The OneRoster standard supports spreadsheet-style (CSV) export-import as well as direct system exchanges using REST API’s. This administration guide focuses on the REST specification.
Before you use OneRoster REST 1.1
D2L supports the IMS OneRoster v1.1 specification and recertifies against the IMS Global product certification suite yearly. D2L supports the following Conformance Certifications:
REST Data Provider Gradebook Push Core
REST Data Consumer Rostering Core
The Brightspace implementation of the OneRoster v1.1 specification lets administrators schedule data to be pulled from their SIS to populate the required roster related data (schools, classes, users, enrollments, etc.) in the Brightspace platform. The new IPSIS OneRoster REST user interface includes a schedule to allow administrators to configure the time of day when the data pulls occur. Additionally, for an SIS partner supporting the Gradebook service, administrators can set the grades to be returned with the daily data sync and/or allow a faculty member to initiate a manual sync.
Endpoints used
Type
URL
GET
ims/oneroster/v1p1/academicSessions
GET
ims/oneroster/v1p1/classes
GET
ims/oneroster/v1p1/enrollments
GET
ims/oneroster/v1p1/orgs
GET
ims/oneroster/v1p1/orgs/{id}
GET
ims/oneroster/v1p1/schools/{id}
GET
ims/oneroster/v1p1/schools/{id}/classes
GET
ims/oneroster/v1p1/schools/{id}/courses
GET
ims/oneroster/v1p1/schools/{id}/enrollments
GET
ims/oneroster/v1p1/users
GET
ims/oneroster/v1p1/classes/{classSourcedId}/categories
PUT
ims/oneroster/v1p1/lineitems
PUT
ims/oneroster/v1p1/results
How OneRoster REST is mapping to Brightspace
Below are the mapping values between a OneRoster object type and a Brightspace object type
One Roster
D2L Brightspace
Academic Sessions
Org Units*
Orgs	
Org Units*
Schools	
Org Units*
Courses	
 Course Template
Classes	
Course Offering & Course Section
Users	
User
Enrollments
Enrollment
Categories
Grade Categories
LineItems	
Grade Item
Results	
Grade Value
*Org unit types are typically custom org unit types that can be mapped during the configuration process.
Academic Sessions
OneRoster			
Supported Values
Used by Brightspace for
Required
sourcedId
 
N/A
Y
status
active or tobedeleted
Create/Replace or Delete 
Y
dateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
metadata
N/A
N/A
 
title
 
Org Unit Name and Org Unit Code
Y
startDate
YYYY-MM-DD
Exposed for academic session in gradebook and course offering
Y
endDate
YYYY-MM-DD
Exposed for academic session in gradebook and course offering
Y
type
Semester, Term, Grading Period, SchoolYear
Org Unit Type
Y
parent
N/A
N/A
N/A
Children
N/A
N/A
N/A
SchoolYear
N/A
N/A
N/A
 
Orgs
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Replace or Delete
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Name
 
Org Unit Name and Org Unit Code
Y
Identifier
 
Org Unit Code (If provided)
N
StartDate
YYYY-MM-DD
N/A
Y
EndDate
YYYY-MM-DD
N/A
Y
Type
District, Department, Local, National, School, State
Org Unit Type
Y
Parent
 
Parent Org Units
Required to create org structure
Children
N/A
N/A
N/A
 
Courses
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
N/A
N/A
 
Title
 
Org Unit Name and Org Unit Code
Y
SchoolYear
 
Parent Org Units
N
CourseCode
 
Org Unit Code (If provided)
N
Grades
N/A
N/A
 
Subjects
N/A
N/A
 
Org
 
Parent Org Units
Required to create org structure
StartDate
YYYY-MM-DD
N/A
 
EndDate
YYYY-MM-DD
N/A
 
SubjectCodes
N/A
N/A
 
Resources
N/A
N/A
 
 
Classes
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active or Inactive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
Title
 
Org Unit Name and Org Unit Code
Y
ClassCode
 
Org Unit Code (If provided)
N
ClassType
N/A
Location
N/A
Grades
N/A
Subjects
N/A
Course
 
Parent Org Units
Y
School
 
Parent Org Units
Y
Terms
 
Parent Org Units
Y
SubjectCodes
N/A
Periods
N/A
Resources
N/A
 
Users
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
OrgDefinedId
Y
Status
active or tobedeleted
IsActive
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
N/A
Y
MetaData
Not Mapped
UserName
 
UserName
Y
UserIds
Not Mapped
EnabledUser
 
IsActive
Y
GivenName
 
FirstName
Y
FamilyName
 
LastName
Y
MiddleName
 
MiddleName
N
Role
 
Role In Org
Y
Identifier
 
OrgDefinedId (If provided)
N
Email
 
ExternalEmail
N
Sms
 
N/A
N
Phone
 
N/A
N
Agents
 
Brightspace Parent & Guardian
N
Orgs
  Upper Org Unit Enrollments (With Role in Org)
Grades
N/A
Password
 
User Password
N
 
Enrollments
OneRoster			
Supported Values
Used by Brightspace for
Required
SourcedId
 
N/A
Y
Status
active or tobedeleted
Active
Y
DateLastModified
YYYY-MM-DDTHH:mm:SS.sssZ
 
Y
MetaData
N/A
User
 
User to Enroll
Y
Class
 
Course Offering & Section to Enroll in
Y
School
N/A
Role
 
Role
Y
Primary
N/A
BeginDate
N/A
EndDate
N/A
Assumptions and Limitations
Assumptions
D2L can work with any SIS that supports OneRoster 1.1 REST and is certified with IMS Global or working towards their certification.
REST Process
Scheduled runs run from the previous run date of the data extract to the start date of the current data extract. If this is the first run, it acts like a sync operation and runs with no start date to the date range.
There is an option to trigger a run manually from the previous run date, from a specific date or for all records in the system
Call Order: The order that the various endpoints or consuming the various files are called in.Academic SessionsOrgsSchoolsCoursesClassesUsersEnrollments
The order that data is sent back to SkywardCategories (requested on demand from the Brightspace gradebook)Lineitems (sent on demand or nightly based on grade export settings)Results (sent on demand or nightly based on grade export permissions)
Grade Export
For a grade to be exported, the course must have been created through OneRoster SIS integration and the OneRoster IPSIS source system must have Grades Export enabled. The course may only be mapped to one active source system with grades. Grades must belong to Grade Categories that are retrieved from the SIS and the grade must have an Academic Session selected.
Academic Sessions
The Academic Session (Terms) dropdown menu is visible when creating a new grade item. The menu is populated by finding all org units created by the same SIS as the course where the SIS mapping is for Academic Session. The academic session must be a parent to the course offering.
Categories
Categories are  required for the integration. Categories created by Skyward have the Export to SIS option selected. This category is used to link grade items so that Brightspace knows which grade items should and should not be sent.
How the grade sync works
Grade categories are synced from Skyward on demand in the Brightspace gradebook. To sync grades, navigate to Manage Grades> More Actions> Sync Categories from SIS. Grade categories from the SIS do not map to manually created categories. If a category needs to be deleted, it must be deleted in Skyward and then resync’d in the Brightspace gradebook.
Grade items (line items) are synced if they meet any of the following conditions:
Line item has never been sent
Line item has been updated since it was last sent (This includes name, academic session, points, delete, restore from delete)
Line item failed to be sent during the last export

An assignment and due date are sent with the lineitem. Below is the logic Brightspace uses when sending dates:
Lineitem (Grade) Assign Date is determined as follows:Use Activity Start Date if it exists, if notUse Activity Due Date if it exists, if notUse Activity End Date if it exists, if notUse Academic Session End Date
Lineitem (Grade) Due Date is determined as follows:Use Activity Due Date if it exists, if notUse Activity End Date if it exists, if notUse Academic Session End Date

Note: The line item sourced id that gets sent is class-specific and is generated like this: {lineItemSourcedId}_{classSourcedId}
Grades (results) are synced if they meet any of the following conditions:
Result has never been sent
Result has been updated since it was last sent
Result failed to be sent during the last export
Parent line item has been modified since the last export
Note: The line item sourced id that gets sent is class-specific and is generated like this: {lineItemSourcedId}_{classSourcedId}
Grades (results) are synced if they meet any of the following conditions:
Result has never been sent
Result has been updated since it was last sent
Result failed to be sent during the last export
Parent line item has been modified since the last export
Limitations
Records with a status of tobedeleted are only deleted if the child is deleted
Enrollments using the User’s Org property cannot be unenrolled via the OneRoster integration at this time.
Unsupported characters: there are several characters that are not supported in the Brightspace Org Unit Code. These characters are replaced with an underscore (_). Unsupported Characters: \ :  ? “ ” < > | ‘  # , % &
Truncations: The max length for the Org Unit Code in Brightspace is 50 characters. If it exceeds this length, it is truncated in the UI.
OneRoster allows multiple ScoreStatus: Brightspace only sends fully graded or exempt
Configuration options for OneRoster REST
You will work with your Brightspace Implementation Consultant to set up your OneRoster REST source system. Brightspace automatically defaults to your most common settings. However, these settings can be edited at any time with the appropriate permissions.
Before the source system can be configured, make sure you have the following items completed:
General Requirements
Contact your OneRoster representative to obtain your API information. You will need:
Endpoint URL
Authentication Endpoint
Client Id
Client Secret
Configuration
After the initial set up, you can update the configuration of your OneRoster REST source system:
From the Admin Tools menu, select IPSIS Administration, select the Configuration tab
Credentials provided during initial set up will appear first, these credentials can be edited if required.
Source System fields:
SIS Name: The SIS Name field is editable and is recommended to be kept up to date.
Scheduled Updates: The time that Brightspace will automatically sync with the SIS. It is recommended that this process is completed overnight.
Full Sync: Syncs all data daily instead of only the changes and applies implicit unenrollment logic to unenroll users from classes when the SIS stops sending the enrollment record instead of sending a tobedeleted status to properly unenroll a user.
Overwriting Brightspace: Granular choices to identify which fields in Brightspace your SIS can overwrite.
People
SIS Role Mappings: This section contains the OneRoster specific role to map SIS role names to Brightspace role names. Teacher and Student roles are included by default, but they can be deleted. The following are the roles available in OneRoster:
Administrator
Aide
Guardian
Parent
Proctor
Relative
Student
Teacher

            To add additional SIS specific role names to map to Brightspace roles, click + Add Role.Note: If the SIS sends a role that is not configured, it results in an error and the user cannot be created.Map SIS Entries to Existing Users: Provides the option to map SIS entries based on username or OrgDefinedId to existing users that were created outside of the SIS (manually, bulk operations, API, etc.). If mappings are off, duplicates may be created.Courses and Sections
Courses and Sections - Mappings: This section contains the OneRoster specific org unit types to map SIS orgs to Brightspace org names.
Click + Add Org Unit Type to add additional SIS specific org unit names. The following Org Unit Types are required for Skyward:SIS OrgsDistrictSchoolLocal, National, State, and Department are optionalAcademic Session TypeSemesterTermSchoolYearGradingPeriodSIS Group	Course OfferingCourse Section	Course TemplateSection Association
Deletion: Provides two options on how a tobedeleted status affects an org unit in Brightspace.Do Nothing – the org unit mapping will be deleted from IPSIS mappings, but the org unit will remain unchanged in BrightspaceInactivate course offering – the org unit mapping will be deleted from IPSIS mappings, the course offering will be marked inactive in Brightspace, section and enrollments will remain
Map SIS entries to courses and sections: Provides the option to map SIS entries based on org unit code to existing org units that were created outside of the SIS (manually, bulk operations, API, etc.). It is not recommended to turn these on for any org units created by your SIS unless you confirmed the codes are unique across schools and school years.
Course Content: Provides the ability to copy course content from a master course or a course template to the newly created course. Select Yes and choose one of the following:
If Find an Org Unit to automatically copy from based on specified criteria? is not selected, content is copied from a Master Course Offering to the sibling Course Offering when the Master Course Offering and Course Template share the same Org Unit Code
If Find an Org Unit to automatically copy from based on specified criteria? is selected, you can choose from two options:Parent course template of the new courseContent is copied from the parent Course Template to the new child Course OfferingSibling course where the Org Unit Code matches the parent template. Content is copied from the source course offering to the new child Course Offering based on the source course being manually added to Brightspace with the same org unit code as the parent template.

Grades Export
Provides the option to allow grade syncs of all modified grade items at the time of the Scheduled Update, and/or, to allow Teacher initiated grade export from the course offering.
Course Offering Dates: Allows you to use academic session information for course offering start and end dates. This check box is set to off by default. This option allows you to choose if academic session (semester, term, school year, or grading period) dates are associated to the course offering (this option defaults to term). The start date and end date of a course can also be offset by a specified number of days. If multiple academic sessions are set for a single course offering, the first Academic Session received from the SIS is used for the start and end dates.
Departments, Semesters and OtherMap SIS entries to existing org units: Provides the option to map SIS entries based on org unit code to existing org units that were created outside of the SIS (manually, bulk operations, API, etc.). It is not recommended to turn these on for any org units created by your SIS unless you confirmed the codes are unique across schools and school years.
Once complete, select Save Configuration.
When you are ready to sync data, navigate to the IPSIS Administration > Dashboard, choose the down arrow beside Run Update Now > Resync all SIS Records to sync data from Skyward.Note: If Full Sync is on, click Run Update Now.
 
Troubleshooting
The Dashboard provides the processing status of the latest batch. Both the Dashboard and Batches pages show a final indicator if the batch completed successfully or with errors. Each batch has a quick link to the Audit Log and if completed with errors to Error Messages.
Review all logs to verify all records processed as expected. If error messages were logged, expand the error to review the metadata captured to identify the error, correct the data in your SIS and either wait until the next day for the Scheduled Update or request an update from the Dashboard. The goal is to have the runs completed without error.
How to sync Grades
Grades can be sent nightly with the daily roster update, on demand via the grades interface, or both. These options are set up in IPSIS Administration > Configuration > Export Grades.
To send grades, a category, grade item, and grade are required. See the Grades Export section for overall rules to send a grade.
Category
 Categories are synced on demand in the Brightspace gradebook. To sync grades, navigate to Manage Grades> More Actions > Sync Categories from SIS. These categories are noted in the Manage Grades UI with an SIS icon.
Create a Grade Item
In the Manage Grades area, click New and select Item.
Set the desired preferences and options for the Grade.
Choose an Academic Session from the dropdown menu.
Map the grade item to the Category synced with the SIS.
Click Save and Close.
Export to SIS
To manually sync grades to the SIS:
From the course home page, navigate to Grades> Enter Grades > Export to SIS
On the Export Grades UI, you are presented with a summary page that includes:
Section: a dropdown menu that allows you to choose between different sections in the course (if multiple sections are present)
Academic Session: a dropdown menu that allows you to choose between different School Years associated with the course (if multiple academic sessions are used)
Overview: Lists the number of Categories and the number of grades within the categories that meet the criteria selected in Section and Academic Session above and can be exported
Scheduled Export: only visible if configured in SIS Integration configuration and can be edited in the Configuration tab in IPSIS Administration
Click Export. The page refreshes and takes you to the View All Exports page. This UI provides an overview of who sent the grades and when.Once the export has completed, click on the Export Name to view details that include: Course name, Export start and end dates, and User who initiated the export
Note: If grades are sent via the nightly sync the IPSIS Service user is displayed
Successful and failed export details for Categories, Grade Items and Results:
You can navigate back to historical exports, using Grades > Enter Grades > Export to SIS and click View Export History at the top right.




--------------------------------------------------


Using LIS v2.0 Services

The IPSIS LIS v2.0 Adapter implements the necessary LIS Services and operations to support the following IMS LIS Profiles:
IMS Global LIS v2.0 Core Profile
IMS Global LIS v2.0 Full Course Hierarchy Profile
IMS Global LIS v2.0 Combined Sections Profile
Each service implemented by D2L as part of the LIS v2.0 Adapter has been done such that fields in the LIS requests can be mapped to D2L fields based on an institution's requirements. This is done by way of configurable and extensible Translators, which effectively map LIS fields to fields in the D2L Learning Platform.
Further details about the available mappings and behaviors are outlined within the specific LIS Service Operation and the Translator interfaces each leverages.
LIS v2.0 Service Endpoints
There are separate endpoints for HTTP and HTTPS. You must use the appropriate service endpoint for your implementation depending on how the site is seen by IIS. If your SSL Support is provided by a load balancer you may need to use the HTTP endpoints.
HTTP

Service Name


Service Endpoint


Bulk Data Exchange Management Service (BDEMS)


/d2l/im/ipsis/lis/bdemsv1p0/BulkDataExchangeManagementServices.svc


Course Offering Management Service (COMS)


/d2l/im/ipsis/lis/cmsv1p0/CourseOfferingManagementServices.svc


Course Section Management Service (CSMS)


/d2l/im/ipsis/lis/cmsv1p0/CourseSectionManagementServices.svc


Course Template Management Service (CTMS)


/d2l/im/ipsis/lis/cmsv1p0/CourseTemplateManagementServices.svc


Group Management Service (GMS)


/d2l/im/ipsis/lis/gmsv2p0/GroupManagementServices.svc


Membership Management Service (MMS)


/d2l/im/ipsis/lis/mmsv2p0/MembershipManagementServices.svc


Outcomes Management Service (OMS)


d2l/im/ipsis/lis/omsv1p0/ResultManagementServices.svc


Person Management Service (PMS)


/d2l/im/ipsis/lis/pmsv2p0/PersonManagementServices.svc


Section Association Management Service (SAMS)


/d2l/im/ipsis/lis/cmsv1p0/SectionAssociationManagementServices.svc

HTTPS

Service Name


Service Endpoint


Bulk Data Exchange Management Service (BDEMS)


/d2l/im/ipsis/lis/ssl/bdemsv1p0/BulkDataExchangeManagementServices.svc


Course Offering Management Service (COMS)


/d2l/im/ipsis/lis/ssl/cmsv1p0/CourseOfferingManagementServices.svc


Course Section Management Service (CSMS)


/d2l/im/ipsis/lis/ssl/cmsv1p0/CourseSectionManagementServices.svc


Course Template Management Service (CTMS)


/d2l/im/ipsis/lis/ssl/cmsv1p0/CourseTemplateManagementServices.svc


Group Management Service (GMS)


/d2l/im/ipsis/lis/ssl/gmsv2p0/GroupManagementServices.svc


Membership Management Service (MMS)


/d2l/im/ipsis/lis/ssl/mmsv2p0/MembershipManagementServices.svc


Outcomes Management Service (OMS)	


/d2l/im/ipsis/lis/ssl/omsv1p0/ResultManagementServices.svc


Person Management Service (PMS)


/d2l/im/ipsis/lis/ssl/pmsv2p0/PersonManagementServices.svc


Section Association Management Service (SAMS)


/d2l/im/ipsis/lis/ssl/cmsv1p0/SectionAssociationManagementServices.svc

LIS v2.0 Service WSDLS
If the WSDL is required, you should not use the WSDLs found at the Service Endpoints, but rather the WSDLs found at the following locations:
HTTP

LIS Service


WSDL


Bulk Data Exchange Management Service (BDEMS)


/d2l/im/ipsis/lis/bdemsv1p0/wsdl/BulkDataExchangeManagementServicev1p0_SyncSingle_v1p0.wsdl


Course Offering Management Service (COMS)


/d2l/im/ipsis/lis/cmsv1p0/wsdl/CourseManagementServicev1p0_SyncSingle_v1p0.wsdl


Course Section Management Service (CSMS)


/d2l/im/ipsis/lis/cmsv1p0/wsdl/CourseManagementServicev1p0_SyncSingle_v1p0.wsdl


Course Template Management Service (CTMS)


/d2l/im/ipsis/lis/cmsv1p0/wsdl/CourseManagementServicev1p0_SyncSingle_v1p0.wsdl


Group Management Service (GMS)


/d2l/im/ipsis/lis/gmsv2p0/wsdl/GroupManagementServicev2p0_SyncSingle_v1p0.wsdl


Membership Management Service (MMS)


/d2l/im/ipsis/lis/mmsv2p0/wsdl/MembershipManagementServicev2p0_SyncSingle_v1p0.wsdl


Outcomes Management Service (OMS)


/d2l/im/ipsis/lis/omsv1p0/wsdl/OutcomesManagementServicev1p0_SyncSingle_v1p0.wsdl


Person Management Service (PMS)


/d2l/im/ipsis/lis/pmsv2p0/wsdl/PersonManagementServicev2p0_SyncSingle_v1p0.wsdl


Section Association Management Service (SAMS)


/d2l/im/ipsis/lis/cmsv1p0/wsdl/CourseManagementServicev1p0_SyncSingle_v1p0.wsdl

HTTPS

LIS Service 


WSDL


Bulk Data Exchange Management Service (BDEMS)


/d2l/im/ipsis/lis/ssl/bdemsv1p0/wsdl/BulkDataExchangeManagementServicev1p0_SyncSingle_v1p0.wsdl


Course Offering Management Service (COMS)


/d2l/im/ipsis/lis/ssl/cmsv1p0/wsdl/CourseManagementServicev1p0_SyncSingle_v1p0.wsdl


Course Section Management Service (CSMS)


/d2l/im/ipsis/lis/ssl/cmsv1p0/wsdl/CourseManagementServicev1p0_SyncSingle_v1p0.wsdl
 


Course Template Management Service (CTMS)


/d2l/im/ipsis/lis/ssl/cmsv1p0/wsdl/CourseManagementServicev1p0_SyncSingle_v1p0.wsdl


Group Management Service (GMS)


/d2l/im/ipsis/lis/ssl/gmsv2p0/wsdl/GroupManagementServicev2p0_SyncSingle_v1p0.wsdl


Membership Management Service (MMS)


/d2l/im/ipsis/lis/ssl/mmsv2p0/wsdl/MembershipManagementServicev2p0_SyncSingle_v1p0.wsdl


Outcomes Management Service (OMS)


/d2l/im/ipsis/lis/ssl/omsv1p0/wsdl/OutcomesManagementServicev1p0_SyncSingle_v1p0.wsdl


Person Management Service (PMS)


/d2l/im/ipsis/lis/ssl/pmsv2p0/wsdl/PersonManagementServicev2p0_SyncSingle_v1p0.wsdl


Section Association Management Service (SAMS)


/d2l/im/ipsis/lis/ssl/cmsv1p0/wsdl/CourseManagementServicev1p0_SyncSingle_v1p0.wsdl

Authentication
IPSIS LIS v2.0 Services require authentication via WS-Security or HTTP Basic Authentication, and use the D2L database to authenticate the username and password. In order for any of the services to be used, the userid used to authenticate must be associated with a source system.
The Services all handle authentication by attempting to validate the username and password against the Learning Platform. If a valid Username and Password from the Learning Platform is provided, and there is an active IPSIS source system associated with that user, then any LIS service requests will be acknowledged and processed.
If an invalid username and password is provided, or the user is not associated with an active IPSIS source system, the request will be denied with an appropriate response message as per the LIS specification. For troubleshooting purposes, debug logging can be turned on to help determine why authentication is not being successfully performed.
The IMS LIS working group has settled on the use of WS-Security or Http Basic Authentication for authenticating the sender of LIS Service Requests.
Request headers
All LIS Request Headers contain the same fields, and D2L handles them as follows:

Header


Purpose


Note


imsx_syncRequestHeaderInfo.imsx_messageIdentifier


This header is required.
The request message identifier is returned in the response (imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_messageRefIdentifier) to allow association of the response to an originating request.


Not all vendors send a valid value, so D2L handles it either way. If they do send it, D2L returns it in the response.


imsx_syncRequestHeaderInfo.imsx_version


This header is required.
The version is intended to allow the service to ensure the two systems are expecting the same version of the service.


At this point we do nothing with the incoming version.


imsx_syncRequestHeaderInfo.imsx_sendingAgentIdentifier


This header is optional (Added to 2012-01-31 WSDL).The sending agent identifier is used to identify the sending party. For outgoing requests from D2L the value is populated using the Source System Name value from IM_Sources.


Not all vendors send this, and D2L does not use it at all for incoming requests. D2L uses the userid that was used to authenticate to determine the sending party.

Response headers
All LIS Response Headers contain the same fields. D2L handles them as follows:

Header


Response


Value


imsx_syncResponseHeaderInfo.imsx_version


D2L returns "V1.0" regardless of the value in the Request Header.


 


imsx_syncResponseHeaderInfo.imsx_messageIdentifier


D2L generates and returns a unique identifier for this header.


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMajor


D2L returns the Major Status Code as defined by IMS.


Failure - When there is a problem processing the request.
Processing - When the request is processing.
Success - When the processing of the request is successful.
Unsupported - When there is no implementation for the LIS request, or there are no Translators registered for the operation.


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_severity


D2L returns the severity as defined by IMS.


Error - When something bad or unexpected has occurred. The calling system may need to take appropriate action.
Status - Information. Action not usually required by the calling system.
Warning - When something unexpected has occurred. The calling system may need to take appropriate action.


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_messageRefIdentifier


D2L returns the value from the imsx_syncRequestHeaderInfo.imsx_messageIdentifier.
If a message identifier was not sent in the request, this field will not be included.


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_description


D2L returns a message containing a human readable description of any status messages.


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMinor.imsx_codeMinorField.imsx_codeMinorFieldName


D2L returns the Minor Status Code Field Name as defined by IMS.


TargetEndSystem


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMinor.imsx_codeMinorField.imsx_codeMinorFieldValue


D2L returns the Minor Status Code Field Value as defined by IMS.


deletefailure - When there is a problem in processing a delete request.
fullsuccess - When everything is processed successfully.
invaliddata - When the request is missing required fields, and therefore processing cannot continue.
partialdatastorage - When D2L successfully saves some of the request to the database.
unknownobject - When the request references an object that is not found in IPSIS, and therefore D2L cannot take the action requested.
unsupportedLISoperation - When there is currently no implementation for the LIS request, or there are no translators registered for the operation.
idallocinusefail - When the request is trying to re-use or change an existing entity of a different type (e.g., if a replaceGroupRequest tries to change a College to a Semester).





--------------------------------------------------


The Bulk Data Exchange Management Service (BDES)

This service is used to initiate and report on Bulk SIS Integration processing.
Implemented operations
announceBulkDataExchangeasynchronously.
announceFailureBulkDataExchange
Called operations
ignoreBulkDataExchange
cancelBulkDataExchange
reportBulkDataExchange
requestBulkDataExchange
            About the announceBulkDataExchange operation
The announceBulkDataExchange operation is called by a Student Information System when it wishes to begin a Bulk Integration process. This call results in an immediate response from the system to indicate whether the request was received successfully or not, and bulk processing continues asynchronously.
            Process flow: announceBulkDataExchange
When an LIS announceBulkDataExchange request is received, D2L translates the request using the LIS translators configured for ITranslateAnnounceBulkDataExchange to transform the request into a format that IPSIS Platform can understand.
Once the request has been translated, the IPSIS Platform handlers configured for IBulkFileReadyRequestHandler are used to register the bulk request with IPSIS.
The LIS response is then generated from the handler response. The response includes a list of the supported services of the implementation using the configured ITranslateSupportedServices translator.
Bulk Processing occurs asynchronously after the announce request has been received and responded to. The IPSIS Bulk Job Background Services moves the bulk job through the following steps: Files are retrieved using IBulkFileRetriever, files are processed using IBulkFileProcessor, and a response is generated using IBulkSendReportHandler, which uses reportBulkDataExchange to notify the SIS of the results.
            Sample announceBulkDataExchange request<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"    xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">   <SOAP-ENV:Header>      <imsx_syncRequestHeaderInfo xmlns="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">         <imsx_version>V1.0></imsx_version>         <imsx_messageIdentifier>1234></imsx_messageIdentifier>      </imsx_syncRequestHeaderInfo>   <ims:imsx_epaRequestHeaderInfo xmlns:ims="http://www.imsglobal.org/xsd/gws/gwsv1p0/imsepa_v1p0"/></SOAP-ENV:Header>   <SOAP-ENV:Body>      <bdems:announceBulkDataExchangeRequest          xmlns:bdems="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">         <bdems:transactionId>Test-1234></bdems:transactionId>         <bdems:bulkBlockManifest>            <bdems:bulkBlockManifestId>Test-1234</bdems:bulkBlockManifestId>            <bdems:expiryDate>3000-01-01T00:00:00</bdems:expiryDate>            <bdems:bulkBlockDataFile>               <bdems:url>http://localhost://1234-a.xml></bdems:url&gt;               <bdems:checkSum>00</bdems:checkSum>                                      <bdems:totalSize>0</bdems:totalSize>               <bdems:savePoint>2011-11-28T10:59:35.000000Z></bdems:savePoint>               <bdems:serviceSet>                  <bdems:serviceRecord>                     <bdems:serviceName>pmsv2p0</bdems:serviceName>                     <bdems:interfaceName>personmanager</bdems:interfaceName>                     <bdems:operationSet>                        <bdems:operationName>replacePerson</bdems:operationName>                        <bdems:operationName>deletePerson</bdems:operationName>                     </bdems:operationSet>                  </bdems:serviceRecord>               </bdems:serviceSet>            </bdems:bulkBlockDataFile>            <bdems:bulkBlockDataFile>               <bdems:url>http://localhost://1234-b.xml></bdems:url&gt;               <bdems:checkSum>00></bdems:checkSum>                                      <bdems:totalSize>0></bdems:totalSize>               <bdems:savePoint>2011-11-28T10:59:35.000000Z></bdems:savePoint>               <bdems:serviceSet>                  <bdems:serviceRecord>                     <bdems:serviceName>gmsv2p0</bdems:serviceName>                     <bdems:interfaceName>groupmanager</bdems:interfaceName>                     <bdems:operationSet>                        <bdems:operationName>replaceGroup</bdems:operationName>                     </bdems:operationSet>                  </bdems:serviceRecord>               </bdems:serviceSet>            </bdems:bulkBlockDataFile>         </bdems:bulkBlockManifest>      </bdems:announceBulkDataExchangeRequest>   </SOAP-ENV:Body></SOAP-ENV:Envelope>
            announceBulkDataExchange request header and body fields
Request header fields
For more information, see Request and response headers.
Request body fields
The Template Translator Configuration processes the following fields in the request:

Property


LIS Request Mapping


Required


JobId


request.bulkBlockManifestId


Yes


Expiry DateTime


request.expiryDate


Yes


RemoteFileUrl(s)


request.bulkBlockDataFile[*].url


Yes


FileSize(s)


request.bulkBlockDataFile[*].totalSize


Yes


CheckSum(s)


request.bulkBlockDataFile[*].checkSum


Yes


Savepoint(s)


request.bulkBlockDataFile[*].savePoint


Yes


Entity Type(s)


request.bulkBlockDataFile[*].serviceSet.serviceRecord[*].interfaceName


Yes

            Sample annouceBulkDataExchange response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo         xmlns:h="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0"           xmlns="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0></imsx_version>         <imsx_messageIdentifier>BDEMS_announceBulkDataExchange_20120304T014745_2593446Z></imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success></imsx_codeMajor>            <imsx_severity>status></imsx_severity>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem></imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>fullsuccess></imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:xsd="http://www.w3.org/2001/XMLSchema">      <announceBulkDataExchangeResponse           xmlns="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">         <supportedServices>            <personInterface>               <operationName>replacePerson</operationName>               <operationName>deletePerson</operationName>            </personInterface>            <groupInterface>               <operationName>replaceGroup</operationName>               <operationName>deleteGroup</operationName>            </groupInterface>            <membershipInterface>               <operationName>replaceMembership</operationName>               <operationName>deleteMembership</operationName>            </membershipInterface>            <templateInterface>               <operationName>replaceCourseTemplate</operationName>               <operationName>deleteCourseTemplate</operationName>            </templateInterface>            <offeringInterface>               <operationName>replaceCourseOffering</operationName>               <operationName>deleteCourseOffering</operationName>            </offeringInterface>            <sectionInterface>               <operationName>replaceCourseSection</operationName>               <operationName>deleteCourseSection&</operationName>            </sectionInterface>            <associationInterface>               <operationName>replaceSectionAssociation</operationName>               <operationName>deleteSectionAssociation</operationName>            </associationInterface>         </supportedServices>      </announceBulkDataExchangeResponse>   </s:Body></s:Envelope>
            announceBulkDataExchange response header and body fields
Response header fields
For more information, see Request and response headers.
Response body fields
The Template Translator Configuration processes the following fields in the request:

Property


LIS Response Mapping


Required


JobId


request.bulkBlockManifestId


Yes


Expiry DateTime


request.expiryDate


Yes


RemoteFileUrl(s)	


request.bulkBlockDataFile[*].url


Yes


FileSize(s)


request.bulkBlockDataFile[*].totalSize


Yes


CheckSum(s)


request.bulkBlockDataFile[*].checkSum


Yes


Savepoint(s)


request.bulkBlockDataFile[*].savePoint


Yes


Entity Type(s)


request.bulkBlockDataFile[*].serviceSet.serviceRecord[*].interfaceName


Yes

            About the announceFailureBulkDataExchange operation
The AnnounceFailureBulkDataExchange operation takes an announce failure request and processes it, with the end result being that the source system corresponding to the request is taken out of bulk mode, and the corresponding record in database that encapsulates all required information for the bulk job has it's status set to canceled.
            Process flow: announceFailureBulkDataExchange
When an LIS AnnounceFailureBulkDataExchange request is received, D2L obtains the transactionId from the request and logs the failure code and description if they are provided. A separate pluggable translator is not utilized for this operation.
Once the request is translated, the IPSIS Platform handlers configured for IBulkAnnounceFailureRequestHandler are used to process the request.
The LIS response is generated from the handler response.
            Sample announceFailureBulkDataExchange request<soapenv:Envelope     xmlns:ims="http://www.imsglobal.org/xsd/gws/gwsv1p0/imsepa_v1p0"     xmlns:ims1="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0"     xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">   <soapenv:Header>      <ims:imsx_epaRequestHeaderInfo>      </ims:imsx_epaRequestHeaderInfo>      <ims1:imsx_syncRequestHeaderInfo>         <ims1:imsx_version>V1.0</ims1:imsx_version>         <ims1:imsx_messageIdentifier>1234</ims1:imsx_messageIdentifier>      </ims1:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims1:announceFailureBulkDataExchangeRequest>         <ims1:transactionId>Samp-816</ims1:transactionId>      </ims1:announceFailureBulkDataExchangeRequest>   </soapenv:Body></soapenv:Envelope>
            announceFailureBulkDataExhange request header and body fields
Request header fields
For more information, see Request and response headers.
Request body fields
The adapter accepts the following fields in the request:

Property


LIS Request Mapping


Required


TransactionId


request.transactionId


Yes


Failure Code


request.FailureReportType.failureCode


No


Failure Description


request.FailureReportType.failureDescription


No

            Sample announceFailureBulkDataExchange response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo           xmlns:h="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0"           xmlns="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>BDEMS_announceFailureBulkDataExchange_20120223T192808_3713232Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            &ltimsx_severity>status</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>fullsuccess</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            announceFailureBulkDataExchange response header and body fields
Response header fields
For more information, see Request and response headers.
Response object body fields
No fields are returned in the response body.
            About the ignoreBulkDataExchange operation
The IPSIS LIS adapter calls the IgnoreBulkDataExchange operation implemented by the SIS. The call is implemented within a handler that implements IBulkCancelRequestHandler and is configured to be run when an Ignore request is initiated somewhere within the IPSIS Platform.
            Process flow: ignoreBulkDataExchange
When an ignore bulk request is initiated (typically via the Admin Interface), the BulkManager calls the configured handler implementing IBulkCancelRequestHandler. For systems using LIS, the registered handler initiates a IgnoreBulkDataExchange request to the SIS.
            Sample ignoreBulkDataExchange request
<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" xmlns:u="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
<s:Header>
<h:imsx_syncRequestHeaderInfo xmlns:h="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0" xmlns="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<imsx_version>V1.0</imsx_version>
<imsx_messageIdentifier>1234</imsx_messageIdentifier>
<imsx_sendingAgentIdentifier>LIS_Test_System</imsx_sendingAgentIdentifier>
</h:imsx_syncRequestHeaderInfo>
<h:imsx_epaRequestHeaderInfo xmlns:h="http://www.imsglobal.org/xsd/gws/gwsv1p0/imsepa_v1p0" xmlns="http://www.imsglobal.org/xsd/gws/gwsv1p0/imsepa_v1p0"/>
</s:Header>
<s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<ignoreBulkDataExchangeRequest xmlns="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">
<transactionId>testRequest1</transactionId>
</ignoreBulkDataExchangeRequest>
</s:Body>
</s:Envelope>
            ignoreBulkDataExchange request header and body fields
Request header fields
For more information, see Request and response headers.
Request body fields

Property


Description


transactionId


The unique identifier assigned to this transaction by the service consumer's previous bulk data exchange request.

            Sample ignoreBulkDataExchange response<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ims="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">   <soapenv:Header>      <ims:imsx_syncResponseHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_statusInfo>            <ims:imsx_codeMajor>success</ims:imsx_codeMajor>            <ims:imsx_severity>status</ims:imsx_severity>            <ims:imsx_codeMinor>               <ims:imsx_codeMinorField>                  <ims:imsx_codeMinorFieldName>TargetEndSystem</ims:imsx_codeMinorFieldName>                  <ims:imsx_codeMinorFieldValue>fullsuccess</ims:imsx_codeMinorFieldValue>               </ims:imsx_codeMinorField>            </ims:imsx_codeMinor>         </ims:imsx_statusInfo>        </ims:imsx_syncResponseHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:ignoreBulkDataExchangeResponse>?</ims:ignoreBulkDataExchangeResponse>   </soapenv:Body></soapenv:Envelope>
            ignoreBulkDataExchange response header and body fields
Response header fields
The response is generated by the service provider (e.g., Oracle), and then sent back to D2L based on our sending of the above request.

Field


Return


Value


imsx_syncResponseHeaderInfo.imsx_version


The service provider returns "V1.0" regardless of the value in the Request Header.


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMajor


The service provider returns the Major Status Code as defined by IMS.


success - When the ignore request is successfully received at the service provider.
failure - When the ignore request is not received at the service provider.


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_severity


The service provider returns the severity as defined by IMS.


status


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_messageRefIdentifier


The service provider returns the value from the imsx_syncRequestHeaderInfo.imsx_messageIdentifier


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMinor.imsx_codeMinorField.imsx_codeMinorFieldValue


The service provider returns the Minor Status Code Field Value as defined by IMS.


full success - When the ignore request has been successfully received at the service provider.
invalidtransactionid - When the transactionId returned by the service consumer is unknown at the service provider. An error condition is logged at the service provider but no further processing is undertaken.

Response body fields
None.
            About the cancelBulkDataExhange operation
The CancelBulkDataExchange operation is used to send a cancel request to the SIS.
            Process flow: cancelBulkDataExchange
Generate and send a request.
Upon cancellation of a bulk job, the Bulk Manager relies on the configured IBulkCancelRequestHandler.
For systems using LIS, the registered handler initiates a CancelBulkDataExchange request to the SIS.
            Sample cancelBulkDataExchange request<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"             xmlns:u="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">    <s:Header>        <h:imsx_syncRequestHeaderInfo                        xmlns:h="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0"                        xmlns="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0"                        xmlns:xsd="http://www.w3.org/2001/XMLSchema"                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">            <imsx_version>V1.0</imsx_version>                        <imsx_messageIdentifier>1234</imsx_messageIdentifier>                        <imsx_sendingAgentIdentifier>LIS_Test_System</imsx_sendingAgentIdentifier>        </h:imsx_syncRequestHeaderInfo>        <h:imsx_epaRequestHeaderInfo xmlns:h="http://www.imsglobal.org/xsd/gws/gwsv1p0/imsepa_v1p0"                      xmlns="http://www.imsglobal.org/xsd/gws/gwsv1p0/imsepa_v1p0"/>    </s:Header>    <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">        <cancelBulkDataExchangeRequest xmlns="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">            <transactionId>testRequest1</transactionId>        </cancelBulkDataExchangeRequest>    </s:Body></s:Envelope>
            cancelBulkDataExchange request header and body fields
Request header fields
For more information, see Request and response headers.
Request body fields

Property


Description


transactionId


The unique identifier assigned to this transaction by the service consumers previous bulk data exchange request.

            Sample cancelBulkDataExchange response<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ims="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">   <soapenv:Header>      <ims:imsx_syncResponseHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_statusInfo>            <ims:imsx_codeMajor>success</ims:imsx_codeMajor>            <ims:imsx_severity>status</ims:imsx_severity>            <ims:imsx_codeMinor>               <ims:imsx_codeMinorField>                  <ims:imsx_codeMinorFieldName>?</ims:imsx_codeMinorFieldName>                  <ims:imsx_codeMinorFieldValue>fullsuccess</ims:imsx_codeMinorFieldValue>               </ims:imsx_codeMinorField>            </ims:imsx_codeMinor>         </ims:imsx_statusInfo>      </ims:imsx_syncResponseHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:cancelBulkDataExchangeResponse>TargetEndSystem</ims:cancelBulkDataExchangeResponse>   </soapenv:Body></soapenv:Envelope>
            cancelBulkDataExchange response header and body fields
Response header fields
The response is generated by the service provider (e.g., Oracle), and then sent back to D2L based on the sending of the request.

Header


Return


Value


imsx_syncResponseHeaderInfo.imsx_version


The service provider returns "V1.0" regardless of the value in the Request Header.


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMajor


The service provider will return the Major Status Code as defined by IMS.


success - When the ignore request is successfully received at the service provider.
failure - When the ignore request is not received at the service provider.


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_severity


The service provider returns the severity as defined by IMS.


status


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_messageRefIdentifier


The service provider returns the value from the imsx_syncRequestHeaderInfo.imsx_messageIdentifier


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMinor.imsx_codeMinorField.imsx_codeMinorFieldValue


The service provider returns the Minor Status Code Field Value as defined by IMS.


fullsuccess - When the ignore request is successfully received at the service provider.
invalidtransactionid - When the transactionId returned by the service consumer is unknown at the service provider. An error condition is logged at the service provider but no further processing is undertaken.

Response body fields
None.
            About the reportBulkDataExchange operation
The IPSIS LIS Adapter does not support the ReportBulkDataExchange operation, but rather calls this operation on the SIS side when a Bulk Data Exchange process is completed.
            Process flow: reportBulkDataExchange
Process and send request. Upon completion of a bulk job, the Bulk Manager relies on the configured IBulkSendReportHandler handlers. For systems using LIS, the registered handler initiates a ReportBulkDataExchange request to the SIS.
            Sample reportBulkDataExchange request<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"        xmlns:u="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">        <s:Header>                <h:imsx_syncRequestHeaderInfo                           xmlns:h="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0"                           xmlns="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0"                           xmlns:xsd="http://www.w3.org/2001/XMLSchema"                                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">                        <imsx_version>V1.0</imsx_version>                        <imsx_messageIdentifier>1234</imsx_messageIdentifier>                        <imsx_sendingAgentIdentifier>LIS_Test_System</imsx_sendingAgentIdentifier>                </h:imsx_syncRequestHeaderInfo>                <h:imsx_epaRequestHeaderInfo xmlns:h="http://www.imsglobal.org/xsd/gws/gwsv1p0/imsepa_v1p0"                       xmlns="http://www.imsglobal.org/xsd/gws/gwsv1p0/imsepa_v1p0"/>        </s:Header>        <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">                <reportBulkDataExchangeRequest xmlns="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">                        <transactionId>testRequest1</transactionId>                        <bulkBlockReport>                                <bulkBlockManifestIdRef>testRequest1</bulkBlockManifestIdRef>                                <reportSummary>                                <noofTotalFullSuccess>6</noofTotalFullSuccess>                                        <noofTotalPartialSuccess>0</noofTotalPartialSuccess>                                        <noofTotalFailure>1</noofTotalFailure>                                        <interfaceSummaryReport>                                                <interfaceName>groupmanager</interfaceName>                                                <noofFullSuccess>2</noofFullSuccess>                                                <noofPartialSuccess>0</noofPartialSuccess>                                                <noofFailure>0</noofFailure>                                        </interfaceSummaryReport>                                        <interfaceSummaryReport>                                                <interfaceName>personmanager</interfaceName>                                                <noofFullSuccess>0</noofFullSuccess>                                                <noofPartialSuccess>0</noofPartialSuccess>                                                <noofFailure>1</noofFailure>                                        </interfaceSummaryReport>                                        <interfaceSummaryReport>                                                <interfaceName>coursetemplatemanager</interfaceName>                                                <noofFullSuccess>1</noofFullSuccess>                                                <noofPartialSuccess>0</noofPartialSuccess>                                                <noofFailure>0</noofFailure>                                        </interfaceSummaryReport>                                        <interfaceSummaryReport>                                                <interfaceName>courseofferingmanager</interfaceName>                                                <noofFullSuccess>1</noofFullSuccess>                                                <noofPartialSuccess>0</noofPartialSuccess>                                                <noofFailure>0</noofFailure>                                        </interfaceSummaryReport>                                        <interfaceSummaryReport>                                                <interfaceName>coursesectionmanager</interfaceName>                                                <noofFullSuccess>1</noofFullSuccess>                                                <noofPartialSuccess>0</noofPartialSuccess>                                                <noofFailure>0</noofFailure>                                        </interfaceSummaryReport>                                        <interfaceSummaryReport>                                                <interfaceName>membershipmanager</interfaceName>                                                <noofFullSuccess>1</noofFullSuccess>                                                <noofPartialSuccess>0</noofPartialSuccess>                                                <noofFailure>0</noofFailure>                                        </interfaceSummaryReport>                                </reportSummary>                                <transactionReportList>                                        <transactionReport>                                                <transactionOpIdentifierRef>Copy3</transactionOpIdentifierRef>                                                <serviceName>pmsv2p0</serviceName>                                                <transactionFailStatusVocabulary>http://www.imsglobal.org/lis/bdemsv1p0/transactionfailstatusvocabularyv1p0</transactionFailStatusVocabulary&gt;                                                <transactionFailStatus>unknownvocabulary</transactionFailStatus>                                        </transactionReport>                                </transactionReportList>                        </bulkBlockReport>                </reportBulkDataExchangeRequest>        </s:Body></s:Envelope>
            reportBulkDataExchange request header and body fields
Request header fields
For more information, see Request and response headers.
Request body fields

Property 


Description


transactionId


The transactionId corresponding to the announce request that was sent in.


reportSummary


Lists the total number of transactions included in the announce request, and the status of each. Contains the interfaceSummaryReports.


interfaceSummaryReport


The container for the summary information about the processing of the bulk data files by the service consumer for a specific service interface.


transactionReport


The container for the status reports on all the transactions within the bulk data file that were unsuccessfully completed by the service consumer. If no reports are contained, then the announceBulkDataExchange request has been successfully completed.


reportFailureDetail


The container for the set of reports that describe the transactions that resulted in the generation of failure status codes.

            Sample reportBulkDataExchange response<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ims="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">   <soapenv:Header>      <ims:imsx_syncResponseHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_statusInfo>            <ims:imsx_codeMajor>success</ims:imsx_codeMajor>            <ims:imsx_severity>status</ims:imsx_severity>            <ims:imsx_codeMinor>               <ims:imsx_codeMinorField>                  <ims:imsx_codeMinorFieldName>TargetEndSystem</ims:imsx_codeMinorFieldName>                  <ims:imsx_codeMinorFieldValue>fullsuccess</ims:imsx_codeMinorFieldValue>               </ims:imsx_codeMinorField>            </ims:imsx_codeMinor>         </ims:imsx_statusInfo>      </ims:imsx_syncResponseHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:reportBulkDataExchangeResponse>?</ims:reportBulkDataExchangeResponse>   </soapenv:Body></soapenv:Envelope>
            reportBulkDataExchange response header and body fields
The response is generated by the service provider (e.g., Oracle), and then sent back to D2L based on the sending of the request.
Response header fields

Header


Return


Value


imsx_syncResponseHeaderInfo.imsx_version


The service provider returns "V1.0" regardless of the value in the Request Header.


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMajor


The service provider returns the Major Status Code as defined by IMS.


success - When the ignore request is successfully received at the service provider.
failure - When the ignore request is not received at the service provider.


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_severity


The service provider returns the severity as defined by IMS.


status


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_messageRefIdentifier


The service provider returns the value from the imsx_syncRequestHeaderInfo.imsx_messageIdentifier


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMinor.imsx_codeMinorField.imsx_codeMinorFieldValue


The service provider returns the Minor Status Code Field Value as defined by IMS.


fullsuccess - When the report is successfully received at the service provider and the supplied data is valid.
invalidtransactionid - When the transactionId returned by the service consumer is unknown at the service provider. An error condition is logged at the service provider but no further processing is undertaken.
incompletedata - When a mandatory part of the BulkBlockReport object has been detected as missing by the service provider.
invaliddata - When a part of the BulkBlockReport object is invalid.
expireddata - When the bulk data file expiryDate shows that the validity of the file has expired.

Response body fields
None.
            About the requestBulkDataExchange operation
The IPSIS LIS adapter calls the RequestBulkDataExchange operation implemented by the SIS. The call is implemented within a handler that implements IBulkRequestDataHandler and is configured to be run when a request is initiated somewhere within the IPSIS Platform.
            Process flow: requestBulkDataExchange
Process and send request. When an request bulk data exchange request is initiated (typically via the Admin interface), the BulkManager calls the configured handler implementing IBulkRequestDataHandler.
            Sample requestBulkDataExchange request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ims="http://www.imsglobal.org/xsd/gws/gwsv1p0/imsepa_v1p0" xmlns:ims1="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">   <soapenv:Header>      <ims1:imsx_syncRequestHeaderInfo>         <ims1:imsx_version>V1.0</ims1:imsx_version>         <ims1:imsx_messageIdentifier>1234</ims1:imsx_messageIdentifier>         <ims1:imsx_sendingAgentIdentifier>LIS_TEST_SYSTEM</ims1:imsx_sendingAgentIdentifier>      </ims1:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims1:requestBulkDataExchangeRequest>         <ims1:transactionId>060d01bf-8c5a-4e87-85f5-92a8aca30ef8</ims1:transactionId>         <ims1:filter>            <!--1 or more repetitions:-->            <ims1:filterRule>               <ims1:filterTypeVocabulary>http://www.imsglobal.org/lis/bdemsv1p0/filtertypevocabularyv1p0</ims1:filterTypeVocabulary&gt;               <ims1:filterType>object</ims1:filterType>               <!--Optional:-->               <ims1:filterValueVocabulary>http://www.imsglobal.org/lis/bdemsv1p0/filtervalueobjectvocabularyv1p0</ims1:filterValueVocabulary&gt;               <ims1:filterValue>All</ims1:filterValue>            </ims1:filterRule>         </ims1:filter>      </ims1:requestBulkDataExchangeRequest>   </soapenv:Body<</soapenv:Envelope>
            requestBulkDataExchange request header and body fields
Request header fields
For more information, see Request and response headers.
Request body fields

Property


Description


transactionId


The unique identifier assigned to this transaction by the service consumer's previous bulk data exchange request.

            Sample requestBulkDataExchange response<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ims="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0">   <soapenv:Header>      <ims:imsx_syncResponseHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_statusInfo>            <ims:imsx_codeMajor>success</ims:imsx_codeMajor>            <ims:imsx_severity>status</ims:imsx_severity>            <ims:imsx_codeMinor>               <ims:imsx_codeMinorField>                  <ims:imsx_codeMinorFieldName>TargetEndSystem</ims:imsx_codeMinorFieldName>                  <ims:imsx_codeMinorFieldValue>fullsuccess</ims:imsx_codeMinorFieldValue>               </ims:imsx_codeMinorField>            </ims:imsx_codeMinor>         </ims:imsx_statusInfo>      </ims:imsx_syncResponseHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:requestBulkDataExchangeResponse>?</ims:requestBulkDataExchangeResponse>   </soapenv:Body></soapenv:Envelope>
            requestBulkDataExchange response header and body fields
Response header fields
The response is generated by the service provider (e.g., Oracle), and sent back to D2L based on the sending of the request.

Header


Return


Value


imsx_syncResponseHeaderInfo.imsx_version


The service provider returns "V1.0" regardless of the value in the Request Header.


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMajor


The service provider returns the Major Status Code as defined by IMS.


success - When the ignore request is successfully received at the service provider.
failure - When the ignore request is not received at the service provider.


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_severity


The service provider will return the severity as defined by IMS.


status


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_messageRefIdentifier


The service provider returns the value from the imsx_syncRequestHeaderInfo.imsx_messageIdentifier.


 


imsx_syncResponseHeaderInfo.imsx_statusInfo.imsx_codeMinor.imsx_codeMinorField.imsx_codeMinorFieldValue


The service provider returns the Minor Status Code Field Value as defined by IMS.


fullsuccess - When the request has been successfully received and the target will be able to fulfill the request.
invaliddata - When the identified object data type(s) are unknown in the service provider.
savepointerror - When an error has occurred in the processing of the save-point identifier information making it impossible to read the correct objects from the database.
savepointsyncerror - When the value of the save point reference from the source was later than that of the target system. No synchronization data will be made available.

Response body fields
The response body includes a list of the supported services, which may include any of the following:
personInterface.replacePerson
personInterface.deletePerson
groupInterface.replaceGroup
groupInterface.deleteGroup
membershipInterface.replaceMembership
membershipInterface.deleteMembership
templateInterface.replaceCourseTemplate
templateInterface.deleteCourseTemplate
offeringInterface.replaceCourseOffering
offeringInterface.deleteCourseOffering
sectionInterface.replaceCourseSection
sectionInterface.deleteCourseSection
associationInterface.replaceSectionAssocation
associationInterface.deleteSectionAssociation




--------------------------------------------------


The Course Offering Management Service (COMS)

This service is used to affect D2L Course Offerings.
Implemented operations
deleteCourseOffering
replaceCourseOffering

readCourseOffering

            About the deleteCourseOffering operation
deleteCourseOffering is the operation used to delete D2L Org Units associated with LIS Course Offerings.
            Process flow: deleteCourseOffering
When a LIS deleteCourseOffering request is received, the adapter obtains the unique id for the Course Offering from the the sourcedId field of the request directly, without the use of a pluggable translator.
Once the Course Offering Id is obtained, the IPSIS Platform handlers configured for IDeleteCourseOfferingHandler are used to process the request.
The LIS response is generated from the handler response to complete the process.
            Sample deleteCourseOffering request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ims="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:deleteCourseOfferingRequest>         <ims:sourcedId>Demo_Course_Offering</ims:sourcedId>      </ims:deleteCourseOfferingRequest>   </soapenv:Body></soapenv:Envelope>
            deleteCourseOffering request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The adapter accepts the following fields in the request:

Property


LIS Request Mapping


Required


Code


deleteCourseOfferingRequest.sourcedId


Yes

            Sample deleteCourseOfferingResponse<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo          xmlns:h="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>COMS_deleteCourseOffering_20120104T232203_8033886Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>status</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>fullsuccess</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            deleteCourseOffering response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
            About the replaceCourseOffering operation
replaceCourseOffering is the operation used to create or update Brightspace Course Offerings.
When using the default configurations, upon success you can validate that the course offerings have been created or updated as appropriate through the Config Variable Browser in Brightspace, Manage Courses, or the My Courses widget.
            Process flow: replaceCourseOffering
When a LIS replaceCourseOffering request is received, the request is translated using the LIS translators configured for ITranslateCourseOffering, which transform the request into a format that the IPSIS Platform can understand.
Once the request has been translated, the IPSIS Platform handlers configured for IReplaceCourseOfferingHandler are used to process the request.
An LIS response is then generated from the handler response to complete the process.
            Sample replaceCourseOffering request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:replaceCourseOfferingRequest>         <!--Not Used by D2L-->         <ims:sourcedId>Demo_Offering</ims:sourcedId>         <ims:courseOfferingRecord>            <ims:sourcedGUID>               <ims:sourcedId>Demo_Offering</ims:sourcedId>            </ims:sourcedGUID>            <ims:courseOffering>               <ims:title>                  <ims:language>en-US</ims:language>                  <ims:textString>Demo Offering</ims:textString>               </ims:title>               <ims:parentTemplateId>Demo_Template</ims:parentTemplateId>               <!--Optional:-->               <ims:status>Active</ims:status>               <!--Optional:-->               <ims:academicSession>                  <ims:language>en-US</ims:language>                  <ims:textString>Demo_Semester</ims:textString>               </ims:academicSession>               <!--Optional:-->               <ims:org>                  <!--Optional:-->                  <ims:orgName>                     <ims:language>en-US</ims:language>                     <ims:textString>Demo_Department</ims:textString<                  </ims:orgName>               </ims:org>               <!--Zero or more repetitions:-->               <ims:timeFrame>                  <!--Optional:-->                  <ims:begin>2012-01-01T00:00:00.000000</ims:begin>                  <!--Optional:-->                  <ims:end>2012-04-01T00:00:00.000000</ims:end>               </ims:timeFrame>            </ims:courseOffering>         </ims:courseOfferingRecord>      </ims:replaceCourseOfferingRequest>   </soapenv:Body></soapenv:Envelope>
            replaceCourseOffering request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The template translator configuration accepts the following fields in the request:

Property


IS Request Mapping


Required


Code


courseOfferingRecord.sourcedGUID.sourcedId


Yes


Name


courseOfferingRecord.courseOffering.title.textString


Yes


Parent TemplateId


courseOfferingRecord.courseOffering.parentTemplateId


Yes


Parent SemesterId


courseOfferingRecord.courseOffering.academicSession.textString


No


Parent DepartmentId


courseOfferingRecord.courseOffering.org.orgName.textString


No


Start Date


courseOfferingRecord.courseOffering.timeframe(0).begin


No


End Date


courseOfferingRecord.courseOffering.timeframe(0).end


No


Status


courseOfferingRecord.courseOffering.status


No

            Sample replaceCourseOffering response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo          xmlns:h="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"         xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>CMS_replaceCourseOffering_20120113T180550_5936594Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            replaceCourseOffering response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
About readCourseOffering
readCourseOffering is the operation used to read IPSIS Platform information about LIS Course Offerings.
The LIS 2.0 adapter accepts the following fields in the request:
 
LIS XML Element
D2L Data
Required
readCourseOfferingRequest.sourcedId
OrgUnitCode
Yes
Sample readCourseOffering request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"	xmlns:ims="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">	<soapenv:Header>	<ims:imsx_syncRequestHeaderInfo>		<ims:imsx_version>V1.0</ims:imsx_version>		<ims:imsx_messageIdentifier>MessageId_774290</ims:imsx_messageIdentifier>	</ims:imsx_syncRequestHeaderInfo>	</soapenv:Header>	<soapenv:Body>		<ims:readCourseOfferingRequest>			<ims:sourcedId>Demo_Offering</ims:sourcedId>		</ims:readCourseOfferingRequest>	</soapenv:Body></soapenv:Envelope>
Sample readCourseOffering response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo xmlns:h="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0" xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"<         <imsx_version<V1.0</imsx_version>          <imsx_messageIdentifier<CMS_readCourseOffering_20120803T145419_1122428Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor<success</imsx_codeMajor>           <imsx_severity<warning</imsx_severity>            <imsx_messageRefIdentifier<MessageId_774290</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName<TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue<partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">      <readCourseOfferingResponse xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">         <courseOfferingRecord>            <sourcedGUID>               <sourcedId<Demo_Offering</sourcedId>           </sourcedGUID>            <courseOffering/>         </courseOfferingRecord>      </readCourseOfferingResponse>   </s:Body></s:Envelope>



--------------------------------------------------


The Course Section Management Service (CSMS)

This service is used to affect Brightspace course sections (or groups).
Implemented Operations
deleteCourseSection
replaceCourseSection
readCourseSection
            About the deleteCourseSection operation
deleteCourseSection is the operation used to delete Brightspace Org Units associated with LIS Course Sections.
            Process flow: deleteCourseSection
When an LIS deleteCourseSection request is received, the adapter obtains the unique id for the course section from the sourcedId field of the request directly, without the user of a pluggable translator.
Once the Course Section Id is obtained, the IPSIS Platform handlers configured for IDeleteCourseSectionHandler are used to process the request.
The LIS response is generated from the handler response.
            Sample deleteCourseSection request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:deleteCourseSectionRequest>         <ims:sourcedId>LIS_Section_01</ims:sourcedId>      </ims:deleteCourseSectionRequest>   </soapenv:Body></soapenv:Envelope>
            deleteCourseSection request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields

Property


LIS Request Mapping


Required


Code


deleteCourseSectionRequest.sourcedId


Yes

            Sample deleteCourseSection response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo          xmlns:h="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>CSMS_deleteCourseSection_20120104T232203_8033886Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>status</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>fullsuccess</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            deleteCourseSection response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
            About the replaceCourseSection operations
replaceCourseSection is the operation used to create or update Brightspace course sections or groups.
When using the default configurations, upon success you can validate that the group has been created or updated as appropriate through the Config Variable Browser in the Brightspace or through the Groups or Sections Tool in the course (depending on handler configuration).
            Process flow: replaceCourseSection
When a LIS replaceCourseSection request is received, Brightspace translates the request using the LIS translators configured for ITranslateCourseSection to transform the request into a format the IPSIS Platform can understand.
The IPSIS Platform handlers configured for IReplaceCourseSectionHandler are used to process the request.
An LIS response is generated from the handler response.
            Sample replaceCourseSection request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:replaceCourseSectionRequest>         <!--Not Used by D2L-->         <ims:sourcedId>Demo_Section_01</ims:sourcedId>         <ims:courseSectionRecord>            <ims:sourcedGUID>               <ims:sourcedId>Demo_Section_01</ims:sourcedId>            </ims:sourcedGUID>            <ims:courseSection>               <ims:title>                  <ims:language>en-US</ims:language>                  <ims:textString>Demo Section 1</ims:textString>               </ims:title>               <ims:parentOfferingId>Demo_Offering</ims:parentOfferingId>               <!--Optional:-->               <ims:status>Active</ims:status>               <!--Optional:-->               <ims:academicSession>                  <ims:language>en-US</ims:language>                  <ims:textString>Demo_Semester</ims:textString>               </ims:academicSession>               <!--Optional:-->               <ims:org>                  <!--Optional:-->                  <ims:orgName>                     <ims:language>en-US</ims:language>                     <ims:textString>Demo_Department</ims:textString>                  </ims:orgName>               &lt:/ims:org>               <ims:timeFrame>                  <ims:begin>2012-01-01T00:00:00.000000</ims:begin>                  <ims:end>2012-04-01T00:00:00.000000</ims:end>               </ims:timeFrame>            </ims:courseSection>         </ims:courseSectionRecord>      </ims:replaceCourseSectionRequest>   </soapenv:Body></soapenv:Envelope>
            replaceCourseSection request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The template translator configuration accepts the following fields in the request:

Property


LIS Request Mapping


Required


Code


sourcedGUID.sourcedId


Yes


Name


courseSection.title.textString


Yes


Parent OfferingId


courseSection.parentOfferingId


Yes


Parent DepartmentId


courseSection.org.orgName


Yes


Parent SemesterId


courseSection.academicSession.textString


No


Start Date


courseSection.timeFrame(0).begin


Yes


End Date


courseSection.timeFrame(0).end


Yes


Status


courseSection.status


No

            Sample replaceCourseSection response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo xmlns:h="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"          xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>CMS_replaceCourseSection_20120130T160616_8347289Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            replaceCourseSection response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
Sample readCourseSection request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version<V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier<MessageId_774290</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:readCourseSectionRequest>         <ims:sourcedId<Demo_Section</ims:sourcedId>      </ims:readCourseSectionRequest>   </soapenv:Body></soapenv:Envelope>
Sample readCourseSection response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo xmlns:h="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"           xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_messageIdentifier>CMS_readCourseSection_20120803T145419_1122428Z</imsx_messageIdentifier>         <imsx_statusInfo>           <imsx_codeMajor>success</imsx_codeMajor>           <imsx_severity>warning</imsx_severity>           <imsx_messageRefIdentifier>MessageId_774290</imsx_messageRefIdentifier>           <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                 <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>              </imsx_codeMinorField>           </imsx_codeMinor>        </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>  </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">     <readCourseSectionResponse xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">        <courseSectionRecord>           <sourcedGUID>               <sourcedId>Demo_Section</sourcedId>           </sourcedGUID>            <courseSection/>        </courseSectionRecord>      </readCourseSectionResponse>   </s:Body></s:Envelope>



--------------------------------------------------


The Course Template Management Service (CTMS)

This service is used to interact with Brightspace course templates.
Implemented operations
deleteCourseTemplate
replaceCourseTemplate
readCourseTemplate
            About the deleteCourseTemplate operation
deleteCourseTemplate is the operation used to delete Brightspace Org Units associated with LIS Course Templates.
            Process flow: deleteCourseTemplate
When an LIS deleteCourseTemplate request is received, the adapter obtains the unique id for the template from the the sourcedId field of the request directly, without the use of a pluggable translator.
The IPSIS Platform handlers configured for IDeleteCourseTemplateHandler process the request.
The LIS response is generated from the handler response.
            Sample deleteCourseTemplate request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:deleteCourseTemplateRequest>         <ims:sourcedId>Demo_Course_Template</ims:sourcedId>      </ims:deleteCourseTemplateRequest>   </soapenv:Body></soapenv:Envelope>
            deleteCourseTemplate request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The adapter accepts the following fields in the request:

Property


LIS Request Mapping


Required


Code


deleteCourseTemplateRequest.sourcedId


Yes

            Sample deleteCourseTemplate response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo          xmlns:h="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>CTMS_deleteCourseTemplate_20120104T232203_8033886Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>status</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>fullsuccess</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            deleteCourseTemplate response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
Sample readCourseTemplate request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"> 
      <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>        <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>MessageId_774290</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>    
          <ims:readCourseTemplateRequest>
                   <ims:sourcedId>Demo_Template</ims:sourcedId>   
           </ims:readCourseTemplateRequest>        </soapenv:Body> </soapenv:Envelope>
Sample readCourseTemplate response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo xmlns:h="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0" xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>CMS_readCourseOffering_20120803T145419_1122428Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>            <imsx_messageRefIdentifier>MessageId_774290</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>              <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                 <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>              </imsx_codeMinorField>           </imsx_codeMinor>        </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>  <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">     <readCourseTemplateResponse xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">         <courseTemplateRecord>           <sourcedGUID>              <sourcedId>Demo_Template</sourcedId>            </sourcedGUID>            <courseTemplate/>         </courseTemplateRecord>      </readCourseTemplateResponse>   </s:Body></s:Envelope>



--------------------------------------------------


The Group Management Service (GMS)

This service is used to affect Brightspace OrgUnits other than templates, offerings, and sections. This includes departments, semesters, as well as custom org unit types.
Implement operations
deleteGroup
replaceGroup
readGroup
            About the deleteGroup operation
deleteGroup is the operation used to delete Brightspace Org Units such as departments and semesters.
You use deleteCourseTemplate for course templates, deleteCourseOffering for course offerings, deleteCourseSection for course sections.
            Processing the deleteGroup operation
The deleteGroup implementation uses one of three IPSIS handler interfaces depending on the type of group that is being searched for.
IDeleteDepartmentHandler - For those org units with a standard org unit type of Department.
IDeleteOtherOrgUnitHandler - For those org units that do not have a standard org unit type of Department, Semester, CourseTemplate, CourseOffering, Section, or Group.
IDeleteSemesterHandler - For those org units with a standard org unit type of Semester.
            Sample deleteGroup request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <!--Optional:-->         <ims:imsx_version>V1.0</ims:imsx_version>         <!--Optional:-->         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:deleteGroupRequest>         <ims:sourcedId>LIS_Test_Department</ims:sourcedId>      </ims:deleteGroupRequest>   </soapenv:Body></soapenv:Envelope>
            deleteGroup request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields

Field


Note


Required


deleteGroupRequest.sourcedId 


This field must have a value to communicate the unique identifier of the group you are trying to delete.


Yes

            Sample deleteGroup response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo          xmlns:h="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>GMS_deleteGroup_20120104T232203_8033886Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>status</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>fullsuccess>/imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            deleteGroup response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
            About the replaceGroup operation
replaceGroup is the operation used to create or update Brightspace Org Units such as departments and semesters.
You should use replaceCourseTemplate for course templates, replaceCourseOffering for course offerings, or replaceCourseSection for course sections.
When using the default configurations, upon success you can validate that the group has been created or updated as appropriate through the Config Variable Browser in Brightspace.
            Process flow: replaceGroup
When an LIS replaceGroup request is received, Brightspace translates the request using the LIS translators configured for ITranslateGroup to transform the request into a format that the IPSIS Platform can understand.
Once the request has been translated, the GroupType is used to determine which IPSIS Platform handlers are called.If the GroupType is associated with the Department Standard OrgUnit Type, the handlers configured for IReplaceDepartmentHandler are used to process the request.If the GroupType is associated with the Semester Standard OrgUnit Type, the handlers configured for IReplaceSemesterHandler are used to process the request.If the GroupType is anything else, the handlers configured for IReplaceOrgUnitHandler are used to process the request.
A LIS response is generated from the handler response.
            Sample replaceGroup request<soapenv:Envelope  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"      xmlns:ims="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0">     <soapenv:Header>         <ims:imsx_syncRequestHeaderInfo>            <ims:imsx_version>V1.0</ims:imsx_version>            <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>         </ims:imsx_syncRequestHeaderInfo>     </soapenv:Header>     <soapenv:Body>         <ims:replaceGroupRequest>            <!--Not Used by D2L-->          <ims:sourcedId>Demo_Semester</ims:sourcedId>            <ims:groupRecord>               <ims:sourcedGUID>                  <ims:sourcedId>Demo_Semester</ims:sourcedId>               </ims:sourcedGUID>               <ims:group>                  <ims:groupType>                     <!--Not Used by D2L-->                     <ims:scheme>                        <ims:language>en-US</ims:language>                        <ims:textString>D2L</ims:textString>                     </ims:scheme>                     <ims:typevalue>                        <ims:id>                           <ims:language>en-US</ims:language>                           <ims:textString>Semester</ims:textString>                        </ims:id>                        <!--Not Used by D2L-->                        <ims:type>                           <ims:language>en-US</ims:language>                           <ims:textString>Semester</ims:textString>                        </ims:type>                        <!--Not Used by D2L-->                        <ims:level>                           <ims:language>en-US</ims:language>                           <ims:textString>1</ims:textString>                        </ims:level>                     </ims:typevalue>                  </ims:groupType>                  <ims:description>                     <ims:shortDescription>Demo Semester</ims:shortDescription>                  </ims:description>               </ims:group>            </ims:groupRecord>         </ims:replaceGroupRequest>     </soapenv:Body>  </soapenv:Envelope>
            replaceGroup request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The template translator configuration accepts the following fields in the request:

Property


LIS Request Mapping


Required


Code


groupRecord.sourcedGUID.sourcedId


Yes


Name


groupRecord.group.description.shortDescription


Yes


Type


groupRecord.group.groupType.typeValue(0).id


Yes

            Sample replaceGroup response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo          xmlns:h="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>GMS_replaceGroup_20120104T232428_1383886Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            replaceGroup response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
Sample readGroup request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>     <ims:readGroupRequest>         <ims:sourcedId>LIS_Test_Department</ims:sourcedId>      </ims:readGroupRequest>   </soapenv:Body></soapenv:Envelope>
Sample readGroup response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>     <h:imsx_syncResponseHeaderInfo        xmlns:h="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"         xmlns="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>        <imsx_messageIdentifier>GMS_readGroup_20120104T231937_2063886Z</imsx_messageIdentifier>         <imsx_statusInfo>           <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>           <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>           <imsx_description>GMS.readGroup</imsx_description>            <imsx_codeMinor>               <imsx_codeMinorField>                 <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>     </h:imsx_syncResponseHeaderInfo>  </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">     <readGroupResponse xmlns="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0">        <groupRecord>           <sourcedGUID>               <sourcedId>LIS_Test_Department</sourcedId>           </sourcedGUID>           <group>              <groupType>                 <typevalue>                    <id>Department</id>                 </typevalue>              </groupType>              <description>                 <shortDescription>LIS Test Department</shortDescription>              </description>            </group>         </groupRecord>      </readGroupResponse>   </s:Body></s:Envelope>



--------------------------------------------------


The Membership Management Service (MMS)

This service is used to affect Brightspace enrollments.
Implemented operations
deleteMembership
replaceMembership
readMembership
            About the deleteMembership operation
deleteMembership is the operation used to delete enrollments in Brightspace. Enrollments are the relationship between users and org units, and can be verified or investigated in Manage Users or in the Classlist for a particular course.
            Process flow: deleteMembership
When an LIS deleteMembership request is received, the adapter obtains the unique id for the membership from the sourcedId field of the request directly, without the user of a pluggable translator.
Once the Membership Id has been obtained, the IPSIS Platform handlers configured for IDeleteEnrollmentHandler process the request.
The LIS response is generated from the handler response.
            Sample deleteMembership request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"      xmlns:ims="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:deleteMembershipRequest>         <ims:sourcedId>Demo_Section_01_duser</ims:sourcedId>      </ims:deleteMembershipRequest>   </soapenv:Body></soapenv:Envelope>
            deleteMembership request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The adapter accepts the following fields in the request:

Property


LIS Request Mapping


Required


Code


deleteMembershipRequest.sourcedId


Yes

            Sample deleteMembership response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo           xmlns:h="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>MMS_deleteMembership_20120120T191434_9913552Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>status</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_description/>                        <imsx_codeMinor*gt;               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>fullsuccess</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            deleteMembership response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
            About the replaceMembership operation
ReplaceMembership is the operation used to create or update enrollments in Brightspace. Enrollments are the relationship between users and org units, and can be verified or investigated in Manage Users or in the Classlist for a particular course.
            Process flow: replaceMembership
When a LIS replaceMembership request is received, Brightspace translates the request using the LIS translators configured for ITranslateMembership to transform the request into a format that the IPSIS Platform can understand.
Once the request has been translated, the IPSIS Platform handlers configured for IReplaceEnrollmentHandler process the request.
An LIS response is generated from the handler response.
            Sample replaceMembership request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:replaceMembershipRequest>         <!--Not Used by D2L-->         <ims:sourcedId>Demo_Section_01_duser</ims:sourcedId>         <ims:membershipRecord>            <ims:sourcedGUID>               <ims:sourcedId>Demo_Section_01_duser</ims:sourcedId>            </ims:sourcedGUID>            <ims:membership>               <ims:collectionSourcedId>Demo_Section_01</ims:collectionSourcedId>               <!--Not Used by D2L-->               <ims:membershipIdType>courseSection</ims:membershipIdType>               <ims:member>                  <ims:personSourcedId>Demo_User</ims:personSourcedId>                  <ims:role>                     <ims:roleType>Learner</ims:roleType>                     <ims:status>Active</ims:status>                  </ims:role>               </ims:member>            </ims:membership>         </ims:membershipRecord>      </ims:replaceMembershipRequest>   </soapenv:Body></soapenv:Envelope>
            replaceMembership request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The template translator configuration accepts the following fields in the request:

Property


LIS Request Mapping


Required


Enrollment Message ID


membershipRecord.sourcedGUID.sourcedId


Yes


Section Code


membershipRecord.membership.collectionSourcedId


Yes


UserId


membershipRecord.membership.member.personSourcedId


Yes


Role


membershipRecord.membership.member.role{*}.roleType


Yes


Enrollment Status


membershipRecord.membership.member.role{*}.status


Yes

            Sample replaceMembership response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo           xmlns:h="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>MMS_replaceMembership_20120419T000158_6944880Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem<imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            replaceMembership response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
Sample readMembership request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:readMembershipRequest>         <ims:sourcedId>Demo_Section_01_duser</ims:sourcedId>      </ims:readMembershipRequest>   </soapenv:Body></soapenv:Envelope>
Sample readMembership response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo           xmlns:h="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0"           xmlns="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>MMS_readMembership_20120419T000158_6944880Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">       <ims:membershipRecord>         <ims:sourcedGUID>            <ims:sourcedId>Demo_Section_01_duser</ims:sourcedId>         </ims:sourcedGUID>         <ims:membership>            <ims:collectionSourcedId>F515050A-6A6C-486B-8B46-97BA6FD62458</ims:collectionSourcedId>            <ims:membershipIdType>83418823-CADC-40A6-885E-C460F78E896F</ims:membershipIdType>            <ims:member>               <ims:personSourcedId>967F247A-F65B-41CE-8A33-8B2E1C8AF357</ims:personSourcedId>              <ims:role><ims:roleType>Learner</ims:roleType></ims:role>           </ims:member>         </ims:membership>     </ims:membershipRecord>   </s:Body></s:Envelope>



--------------------------------------------------


The Section Association Management Service (SAMS)

This service is used to affect associations between SIS Sections and Brightspace Course Offerings.
Implemented operations
deleteSectionAssociation
replaceSectionAssociation
readSectionAssociation
            About the deleteSectionAssociation operation
The deleteSectionAssociation operation is used to delete Brightspace org units associated with LIS Section Associations.
            Process flow: deleteSectionAssociation
When an LIS deleteSectionAssociation request is received, the adapter obtains the unique id for the section association from the sourcedId field of the request directly, without the user of a pluggable translator.
Once the Course Section Id has been obtained, the IPSIS Platform handlers configured for IDeleteSectionAssociationHandler process the request.
The LIS response is then generated from the handler response.
            Sample deleteSectionAssociation request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:deleteSectionAssociationRequest>         <ims:sourcedId>Demo_Section_Assocation</ims:sourcedId>      </ims:deleteSectionAssociationRequest>   </soapenv:Body></soapenv:Envelope>
            deleteSectionAssociation request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The adapter accepts the following fields in the request:

Property


LIS Request Mapping


Required


Code


deleteSectionAssociationRequest.sourcedId


Yes

            Sample deleteSectionAssociation response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo          xmlns:h="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/gms2p0/wsdl11/sync/imsgms_v2p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>CSMS_deleteCourseSection_20120104T232203_8033886Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>status</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>fullsuccess</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            deleteSectionAssociation response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
            About the replaceSectionAssociation operation
The replaceSectionAssociation operation is used to create or update Brightspace course offerings and associated sections/groups based on LIS Section Association requests.
When using the default configurations, upon success, you can validate the section association that has been created or updated using the Config Variable Browser in the Brightspace Manage Courses, or the My Courses widget.
            Process flow: replaceSectionAssociation
When an LIS replaceSectionAssociation request is received, Brightspace translates the request using the LIS translators configured for ITranslateSectionAssociation to transform the request into a format that the IPSIS Platform can understand.
Once the request has been translated, the IPSIS Platform handlers configured for IReplaceSectionAssociationHandler are used to process the request.
A LIS response is generated from the handler response.
Note: If the ReplaceSectionAssociationDatesFromAllSectionsHandler is configured (automatically configured for LIS 2.0) then the oldest start date, and newest end date are used for the course.
            Sample replaceSectionAssociation request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:replaceSectionAssociationRequest>         <!--Not Used by D2L-->         <ims:sourcedId>Demo_Section_Association</ims:sourcedId>         <ims:sectionAssociationRecord>            <ims:sourcedGUID>               <ims:sourcedId>Demo_Section_Association</ims:sourcedId>            </ims:sourcedGUID>            <ims:sectionAssociation>               <!--Optional:-->               <ims:title>                  <ims:language>en-US</ims:language>                  <ims:textString>Demo Section Association</ims:textString>               </ims:title>               <!--Optional:-->               <ims:status>Active</ims:status>               <!--Optional:-->               <ims:courseSectionIdList>                  <!--1 or more repetitions:-->                  <ims:courseSectionId>Demo_Section_01</ims:courseSectionId>               </ims:courseSectionIdList>            </ims:sectionAssociation>         </ims:sectionAssociationRecord>      </ims:replaceSectionAssociationRequest>   </soapenv:Body></soapenv:Envelope>
            replaceSectionAssociation request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The template translator configuration accepts the following fields in the request:

Property


LIS Request Mapping


Required


Section Association Code


sectionAssociationRecord.sourcedGUID.sourcedId


Yes


Section Association Name


sectionAssociationRecord.sourcedGUID.sourcedId


Yes


Section Association Name


sectionAssociationRecord.sectionAssociation.title.textString


No


Section Ids


sectionAssociationRecord.sectionAssociation.courseSectionIdList{*}.CourseSectionId


Yes


Status


sectionAssociationRecord.sectionAssociation.status


No

            Sample replaceSectionAssociation response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo           xmlns:h="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"           xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>CMS_replaceSectionAssociation_20120419T002302_0384880Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            replaceSectionAssociation response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
            Sample readSectionAssociation request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>MessageId_774290</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:readSectionAssociationRequest>         <ims:sourcedId>Demo_Section_Association</ims:sourcedId>      </ims:readSectionAssociationRequest>   </soapenv:Body></soapenv:Envelope>
Sample readSectionAssociation response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo xmlns:h="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"         xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>CMS_readSectionAssociation_20120803T145419_1122428Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>            <imsx_messageRefIdentifier>MessageId_774290</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">      <readSectionAssociationResponse xmlns="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0">         <sectionAssociationRecord>            <sourcedGUID>               <sourcedId>Demo_Section_Association</sourcedId>            </sourcedGUID>            <sectionAssociation/>         </sectionAssociationRecord>      </readSectionAssociationResponse>   </s:Body></s:Envelope>



--------------------------------------------------


The Person Management Service (PMS)

This service is used to affect Brightspace user accounts.
Implemented operations
deletePerson
replacePerson
readPerson
Preferred First and Last Names
Clients using LIS 2.0 can include and maintain users preferred names using XML tags in an LIS integration. Below are the rules that IPSIS follows when the SIS is allowed to overwrite a user’s preferred names in Brightspace:
If LIS has an empty preferred first name for a user who has a preferred first name in Brightspace, delete preferred first name.
If LIS has an empty preferred last name for a user who has a preferred last name in Brightspace, delete preferred last name.
If LIS has the preferred name block, and it only includes preferred last name, do nothing with preferred first name and update preferred last name in Brightspace.
If LIS has the preferred name block, and it only includes preferred first name, do nothing with preferred last name and updated preferred first name in Brightspace.
When the Preferred Name block is missing from the request, delete the first and last preferred names.
If LIS has the preferred name block and first and last name is present, overwrite preferred first or last name in Brightspace.
Note: The Preferred NameType contains the preferred name information of a user, and may be sent alongside the rest of the name and partname as part of a Person object.
 
For clients using IPSIS V1.0:
PersonRequestPreferredFirstAndLastNameOptionalTranslator can go anywhere in the list.
ReplaceUserPreferredFirstNameNoUpdateHandler and ReplaceUserPreferredLastNameNoUpdateHandler must go before ReplaceUserSaveLMSHandler
            About the deletePerson operation
The deletePerson operation is used to delete users from Brightspace.
            Process flow: deletePerson
When a LIS deletePerson request is received, the adapter obtains the unique id for the user from the sourcedId field of the request directly, without the use of a pluggable translator.
Once the Person Id has been obtained, the IPSIS Platform handlers configured for IDeleteUserHandler are used to process the request.
The LIS response is generated from the handler response.
            Sample deletePerson request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"      xmlns:ims="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:deletePersonRequest>         <ims:sourcedId>Demo_User</ims:sourcedId>      </ims:deletePersonRequest>   </soapenv:Body></soapenv:Envelope>
            deletePerson request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The adapter accepts the following fields in the request:

Property


LIS Request Mapping


Required


Code


deletePersonRequest.sourcedId


Yes

            Sample deletePerson response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo           xmlns:h="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>MMS_deletePerson_20120120T191434_9913552Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>status</imsx_severity>            <imsx_messageRefIdentifier>1234</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>fullsuccess</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            deletePerson response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
            About the replacePerson operation
The replacePerson operation is used to create or update Brightspace users.
When using the default configurations, upon success, you can validate the user has been created or updated as appropriate through the Manage Users tool in Brightspace.
            Process flow: replacePerson
When an LIS replacePerson request is received, Brightspace translates the request using the LIS translators configured for ITranslatePerson to transform the request into a format that the IPSIS Platform can understand.
Once the request has been translated, the IPSIS Platform handlers configured for IReplaceUserHandler process the request.
An LIS response is generated from the handler response.
            Sample replacePerson request
Note: This sample request includes an optional extension field (in bold) that provides the ability to change a user’s status after its initial creation. The extension field is required for this action because the user status doesn't match directly with a field from the LIS specification.<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"   xmlns:ims="http://www.imsglobal.org/services/lis/pms2p0/wsdl11/sync/imspms_v2p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>V1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>12346</ims:imsx_messageIdentifier>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:replacePersonRequest>         <!--Not Used by D2L-->         <ims:sourcedId>Demo_User</ims:sourcedId>         <ims:personRecord>            <ims:sourcedGUID>               <ims:sourcedId>Demo_User</ims:sourcedId>            </ims:sourcedGUID>            <!--Optional:-->            <ims:person>               <!--Zero or more repetitions:-->               <ims:name>                  <ims:nameType>                     <ims:instanceIdentifier>                        <ims:language>en-US</ims:language>                        <ims:textString>Contact</ims:textString>                     </ims:instanceIdentifier>                     <ims:instanceVocabulary>http://www.imsglobal.org/lis/pmsv2p0/nametypevocabularyv1p0</ims:instanceVocabulary&gt;                     <ims:instanceValue>                        <ims:language>en-US</ims:language>                        <ims:textString>Contact</ims:textString>                     </ims:instanceValue>                  </ims:nameType>                  <!--1 or more repetitions:-->                  <ims:partName>                     <ims:instanceIdentifier>                        <ims:language>en-US</ims:language>                        <ims:textString>Contact-First</ims:textString>                     </ims:instanceIdentifier>                     <ims:instanceVocabulary>http://www.imsglobal.org/lis/pmsv2p0/partnamevocabularyv1p0</ims:instanceVocabulary&gt;                     <ims:instanceName>                        <ims:language>en-US</ims:language>                        <ims:textString>First</ims:textString>                     </ims:instanceName>                     <ims:instanceValue>                        <ims:language>en-US</ims:language>                        <ims:textString>Demo</ims:textString>                     </ims:instanceValue>                  </ims:partName>                  <ims:partName>                     <ims:instanceIdentifier>                        <ims:language>en-US</ims:language>                        <ims:textString>Contact-Last</ims:textString>                     </ims:instanceIdentifier>                     <ims:instanceVocabulary>http://www.imsglobal.org/lis/pmsv2p0/partnamevocabularyv1p0&lt:/ims:instanceVocabulary&gt;                     <ims:instanceName>                        <ims:language>en-US</ims:language>                        <ims:textString>Last</ims:textString>                     </ims:instanceName>                     <ims:instanceValue>                        <ims:language>en-US</ims:language>                        <ims:textString>User</ims:textString>                     </ims:instanceValue>                  </ims:partName>               </ims:name>               <!--Zero or more repetitions:-->               <ims:contactinfo>                  <ims:contactinfoType>                     <ims:instanceIdentifier>                        <ims:language>en-US</ims:language>                        <ims:textString>EmailPrimary</ims:textString>                     </ims:instanceIdentifier>                     <ims:instanceVocabulary>http://www.imsglobal.org/lis/pmsv2p0/contactinfotypevocabularyv1p0</ims:instanceVocabulary&gt;                     <ims:instanceValue>                        <ims:language>en-US</ims:language>                        <ims:textString>EmailPrimary</ims:textString>                     </ims:instanceValue>                  </ims:contactinfoType>                  <ims:contactinfoValue>                     <ims:language>en-US</ims:language>                     <ims:textString>duser@demo.com</ims:textString>                  </ims:contactinfoValue>               </ims:contactinfo>               <!--Zero or more repetitions:-->               <ims:roles>                  <ims:enterpriserolesType>                     <ims:instanceIdentifier>                        <ims:language>en-US</ims:language>                        <ims:textString>StudentInformationSystem</ims:textString>                     </ims:instanceIdentifier>                     <ims:instanceVocabulary>http://www.imsglobal.org/lis/pmsv2p0/epriserolestypevocabularyv1p0</ims:instanceVocabulary&gt;                     <ims:instanceValue>                        <ims:language>en-US</ims:language>                        <ims:textString>StudentInformationSystem</ims:textString>                     </ims:instanceValue>                  </ims:enterpriserolesType>                  <!--Zero or more repetitions:-->                  <ims:institutionRole>                     <ims:institutionroletype>                        <ims:instanceIdentifier>                           <ims:language>en-US</ims:language>                           <ims:textString>StudentInformationSystem-Student</ims:textString>                        </ims:instanceIdentifier>                        <ims:instanceVocabulary>http://www.imsglobal.org/lis/pmsv2p0/institutionroletypevocabularyv1p0</ims:instanceVocabulary&gt;                        <ims:instanceValue>                           <ims:language>en-US</ims:language>                           <ims:textString>Student</ims:textString>                        </ims:instanceValue>                     </ims:institutionroletype>                     <ims:primaryroletype>1</ims:primaryroletype>                  </ims:institutionRole>                  <!--Optional:-->                  <ims:userId>                     <ims:userIdValue>                        <ims:language>en-US</ims:language>                        <ims:textString>duser</ims:textString>                     </ims:userIdValue>                     <!--Optional:-->                     <ims:password>                        <ims:language>en-US</ims:language>                        <ims:textString>d2l</ims:textString>                     </ims:password>                  </ims:userId>               </ims:roles>		 <ims:extension> 		    <ims:extensionField> 			<ims:fieldName>IsActive</ims:fieldName>			<ims:fieldType>Boolean</ims:fieldType> 			<ims:fieldValue>True</ims:fieldValue> 		    </ims:extensionField> 		 </ims:extension>             </ims:person>         </ims:personRecord>      </ims:replacePersonRequest>   </soapenv:Body></soapenv:Envelope>
<ims:agent>
<ims:agentId>
<ims:language>en-US</ims:language>
<ims:textString>{Parent user Id}</ims:textString>
</ims:agentId>
<ims:agentDomain>
<ims:language>en-US</ims:language>
<ims:textString>{Parent role}</ims:textString>
</ims:agentDomain>
</ims:agent>
 
<ims:extension>
<ims:extensionField>
<ims:fieldName>SynchronizeRelationships</ims:fieldName>
<ims:fieldType>Boolean</ims:fieldType>
<ims:fieldValue>true</ims:fieldValue>
</ims:extensionField>
</ims:extension>
            replacePerson request header and body fields
Request header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Request body fields
The template translator configuration accepts the following fields in the request:

Property


LIS Request Mapping


Required


OrgDefinedId


sourcedGUID.sourcedId


Yes


Full Name


person.name.formname


No


First Name


person.name.partName.instanceValue.textString
where person.name.partName.instanceName.textString = "First" or "Given"


Yes


Last Name


person.name.partName.instanceValue.textString
where person.name.partName.instanceName.textString = "Last", "Family" or "Surname"


Yes


Email Address


person.contactinfo.contactinfoValue.textString
where person.contactinfo.contactinfoType.instanceValue = "EmailPrimary"


No


Role


person.roles.institutionRole(*).institutionroletype.instanceValue.textString


No


Primary Role


person.roles.institutionRole(*).institutionroletype.instanceValue.textString
when person.roles.institutionRole(*).primaryroletype = true


No


Username


person.roles.userId.userIdValue.textString


No


Username Type


person.roles.userId.userIdType.textString


No


Password


person.roles.userId.password.textString


No


Encryption Type


person.roles.userId.pwEncryptionType.textString


No


Authentication Type


person.roles.userId.authenticationType.textString


No


IsActive


person.extension.extensionField.fieldValue


No

            Sample replacePerson response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo           xmlns:h="http://www.imsglobal.org/services/lis/pms2p0/wsdl11/sync/imspms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/pms2p0/wsdl11/sync/imspms_v2p0"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>PMS_replacePerson_20120418T234324_4244880Z</imsx_messageIdentifier>         <imsx_statusInfo>            <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>            <imsx_messageRefIdentifier>12346</imsx_messageRefIdentifier>            <imsx_description/>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:xsd="http://www.w3.org/2001/XMLSchema"/></s:Envelope>
            replacePerson response header and body fields
Response header fields
For more information, refer to the topic Using LIS v2.0 Services > Request and response headers.
Response body fields
No fields are returned in the response body.
Sample readPerson request<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"    xmlns:ims="http://www.imsglobal.org/services/lis/pms2p0/wsdl11/sync/imspms_v2p0">   <soapenv:Header>      <ims:imsx_syncRequestHeaderInfo>         <ims:imsx_version>1.0</ims:imsx_version>         <ims:imsx_messageIdentifier>1234567</ims:imsx_messageIdentifier>         <!--Optional:-->         <ims:imsx_sendingAgentIdentifier/>      </ims:imsx_syncRequestHeaderInfo>   </soapenv:Header>   <soapenv:Body>      <ims:readPersonRequest>         <ims:sourcedId>Demo_User</ims:sourcedId>      </ims:readPersonRequest>   </soapenv:Body></soapenv:Envelope>
Sample readPerson response<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">   <s:Header>      <h:imsx_syncResponseHeaderInfo xmlns:h="http://www.imsglobal.org/services/lis/pms2p0/wsdl11/sync/imspms_v2p0"          xmlns="http://www.imsglobal.org/services/lis/pms2p0/wsdl11/sync/imspms_v2p0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns:xsd="http://www.w3.org/2001/XMLSchema">         <imsx_version>V1.0</imsx_version>         <imsx_messageIdentifier>PMS_readPerson_20120720T192847_4131414Z</imsx_messageIdentifier>         <imsx_statusInfo>           <imsx_codeMajor>success</imsx_codeMajor>            <imsx_severity>warning</imsx_severity>            <imsx_messageRefIdentifier>12354</imsx_messageRefIdentifier>            <imsx_description>PMS.readPerson</imsx_description>            <imsx_codeMinor>               <imsx_codeMinorField>                  <imsx_codeMinorFieldName>TargetEndSystem</imsx_codeMinorFieldName>                  <imsx_codeMinorFieldValue>partialdatastorage</imsx_codeMinorFieldValue>               </imsx_codeMinorField>            </imsx_codeMinor>         </imsx_statusInfo>      </h:imsx_syncResponseHeaderInfo>   </s:Header>   <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">      <readPersonResponse xmlns="http://www.imsglobal.org/services/lis/pms2p0/wsdl11/sync/imspms_v2p0">         <personRecord>           <sourcedGUID>              <sourcedId>Demo_User</sourcedId>           </sourcedGUID>           <person>               <formname>                 <formnameType>                     <instanceIdentifier>                       <language>en-US</language>                    </instanceIdentifier>                     <instanceVocabulary>http://www.imsglobal.org/lis/pmsv2p0/formatnmetypevocabularyv1p0</instanceVocabulary&gt;                     <instanceValue>                       <language>en-US</language>                        <textString>Full</textString>                     </instanceValue>                 </formnameType>                  <formattedName>                    <language>en-US</language>                     <textString>Demo User</textString>                 </formattedName>               </formname>              <name>                  <nameType>                    <instanceIdentifier>                        <language>en-US</language>                     </instanceIdentifier>                    <instanceVocabulary>http://www.imsglobal.org/lis/pmsv2p0/nametypevocabularyv1p0</instanceVocabulary&gt;                    <instanceValue>                        <language>en-US</language>                        <textString>Full</textString>                     </instanceValue>                  </nameType>                 <partName>                    <instanceIdentifier>                       <language>en-US</language>                    </instanceIdentifier>                    <instanceVocabulary>http://www.imsglobal.org/lis/pmsv2p0/partnamevocabularyv1p0</instanceVocabulary&gt;                    <instanceName>                        <language>en-US</language>                       <textString>First</textString>                    </instanceName>                     <instanceValue>                        <language>en-US</language>                       <textString>Demo</textString>                     </instanceValue>                  </partName>                  <partName>                     <instanceIdentifier>                       <language>en-US</language>                     </instanceIdentifier>                    <instanceVocabulary>http://www.imsglobal.org/lis/pmsv2p0/partnamevocabularyv1p0</instanceVocabulary&gt;                     <instanceName>                        <language>en-US</language>                        <textString>Last</textString>                     </instanceName>                     <instanceValue>                        <language>en-US</language>                        <textString>User</textString>                    </instanceValue>                  </partName>               </name>           </person>         </personRecord>      </readPersonResponse>   </s:Body></s:Envelope>



--------------------------------------------------


Using LIS translators

LIS translators are a way to translate LIS requests into generic IPSIS requests. This allows IPSIS to always use a common language to communicate with Brightspace instead of having LIS (and other standards and proprietary solutions) directly interact Brightspace. This also allows a single set of handlers that can be used regardless of the SIS Integration solution (LIS, SIF, Proprietary).
In most cases a collection of translators are used together (referred to as a configuration list), each doing their part to complete a task. Since each translator does a small part they can be easily configured in different ways to provide a very flexible range of alternatives depending on a specific institution's business need.
Translators are implemented using LIS translator conventions, which will help organizations understand the many translator options that are available.
The LIS adapter defines a collection of translator interfaces that are specific to the types of objects being sent from the SIS via LIS requests. Each interface has a set of translators that implement the interface in order to apply a specific translation/mapping rule. In most cases, there are not a lot of translators to choose from because the mapping rules are generic and re-usable (for example, Course Start Date), however in other cases, there are many translators because the LIS message contains many fields that may be appropriate to map to a Brightspace field (for example, Course Title).
The translator interfaces are defined within the LIS adapter, and are used by the individual LIS Services. Each of them has their own documentation containing descriptions of the available translators for the interface, as well as some template configuration lists for the translators which represent common configuration scenarios.
LIS translator naming conventions
Translator names are intended to be descriptive and include enough detail to indicate what fields are being translated, as well as whether the translator is required or optional. In most cases the translators to do only the minimal amount of work so that they are as re-usable as possible.
Only one of the following terms is used in the name of a translator:
Use Base in the name to indicate it's a base translator (also implies that it or an alternative base translator is required)
Use Required in the name for required fields
Use Optional in the name for optional fields
The overall structure of the name of a translator is as follows:<request name><mapped to (sometimes used)><fields translated><base, required, or optional>Translator
Examples
CourseSectionRequestBaseTranslator:This is for a CourseSectionRequest.This is the Base translator.
CourseSectionRequestDepartmentRequiredTranslator:This is for a CourseSectionRequest.This translator will attempt to grab the Department field from the LIS request.This is a Required translator (it will throw an exception if the Department field was not populated in the LIS request).
CourseSectionRequestSemesterOptionalTranslator:This is for a CourseSectionRequest.This translator will attempt to grab the Semester field from the LIS request.This is an Optional translator (it will not throw an exception if the Semester field was not populated in the LIS request).
CourseOfferingRequestDepOrgNameOptionalTranslator:This is for a CourseOfferingRequest.This translator will attempt to grab the OrgName field from the LIS request, and map it to the Department field in IPSIS.This is an Optional translator (it will not throw an exception if the Semester field was not populated in the LIS request).
LIS translator design pattern conventions
LIS translators follow a simple separation of concerns design pattern. Any given translator should only map its desired field. A translator that maps names, should not also map addresses. Most requests will have a series of translators that run in succession, each mapping a different area of fields. The first translator in the series is a Base translator that initializes the translated result object, and populates it with base elements of the request.
Any following translators must be either Required or Optional. This indicates whether the translator throws an error if a field is missing. For example, the CourseSectionRequestDepartmentRequiredTranslator returns an error if no Department is passed in the request. On the other hand, the CourseSectionRequestSemesterOptionalTranslator0 just keeps moving along if no Semester is passed in the request (the field on the result remains uninitialized).



--------------------------------------------------


About the ITranslateAnnounceBulkDataExchange translator

The ITranslateAnnounceBulkDataExchange interface is used to translate an announce request for bulk into a result object containing a single BulkJobParams object, a list of BulkFileUrlParams objects, and a list of BulkEntityTypeFilterParams objects.
The interface implementation is D2L.IM.IPSIS.LIS.BDEMS.ITranslateAnnounceBulkDataExchange.
The IPSIS, Template configuration list provides a starting point for any LIS implementation. The AnnounceBulkDataExchangeTranslator (Sort Order = 10) handler list is used as a starting point.
            AnnounceBulkDataExchangeTranslator (Sort Order = 10)
The translator requires and maps the bulk job, files, and file type/filter information from the bulk announce request.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.BDEMS.Default.AnnounceBulkDataExchangeTranslator
Expected behavior
The translator performs the following tasks:
Maps the Bulk Job and Bulk Job properties.
Maps the files and file properties.
Proceeds to the next available translator.

Property


Translation Result Object


Announce Request Mapping


JobId


result.BulkJobParams.IMJobId


request.transactionId


ExpiryDateTime


result.BulkJobParams.ExpiryDateTime	


request.bulkBlockManifest.expiryDate


Status


result.BulkJobParams.Status


BulkJobStatus.BulkRequested

BulkFileUrlParams

Property


Translation Result Object


Announce Request Mapping


Remote File Url


result.BulkFileUrlParams[*].RemoteFileUrl


request.bulkBlockManifest.bulkBlockDataFile[*].url


File Size


result.BulkFileUrlParams[*].FileSize


request.bulkBlockManifest.bulkBlockDataFile[*].totalSize


CheckSum


result.BulkFileUrlParams[*].CheckSum


request.bulkBlockManifest.bulkBlockDataFile[*].checkSum

BulkEntityTypeFilterParams

Property


Translation Result Object


Announce Request Mapping


Entity Type


result.BulkEntityTypeFilterParams[*].EntityType


request.bulkBlockManifest.bulkBlockDataFile[*].serviceSet.
serviceRecord[*].interfaceName


Start Save Point


result.BulkEntityTypeFilterParams[*].EndSavePointDateTime	


request.bulkBlockManifest.bulkBlockDataFile[*].savePoint


End Save Point


result.BulkEntityTypeFilterParams[*].EndSavePointDateTime


request.bulkBlockManifest.bulkBlockDataFile[*].savePoint





--------------------------------------------------


About the ITranslateSupportedServices translator

The ITranslateSupportedServices translator builds a SupportedServicesType object that documents all services that are supported by our implementation of bulk. This object is then added to the result object. The passed in request object is not used in this process.
The interface implementation is D2L.IM.IPSIS.LIS.BDEMS.ITranslateSupportedServices.
The following configuration list provides a starting point for any LIS implementation: 
IPSIS, Template
SupportedServicesTranslator (Sort Order = 10) 
            SupportedServicesTranslator (Sort Order = 10)
This translator returns the full list of service operations that is supported by the D2L LIS Adapter for Bulk Integration.
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.BDEMS.SupportedServicesTranslator
Expected behavior
This translator builds a SupportedServicesType object that contains the following Services and Operations, and attaches it to the result object.
personInterfacereplacePersondeletePerson
groupInterfacereplaceGroupdeleteGroup
membershipInterfacereplaceMembershipdeleteMembership
templateInterfacereplaceCourseTemplatedeleteCourseTemplate
offeringInterfacereplaceCourseOfferingdeleteCourseOffering
sectionInterfacereplaceCourseSectiondeleteCourseSection
associationInterfacereplaceSectionAssocationdeleteSectionAssociation




--------------------------------------------------


About the ITranslateCourseOffering interface

The ITranslateCourseOffering interface is used to translate LIS Course Offerings into Desire2Learn Course Offerings.
The interface implementation is D2L.IM.IPSIS.LIS.CMS.ITranslateCourseOffering.
The following configuration list provides a starting point for any LIS implementation:
IPSIS, Template configuration
CourseOfferingRequestBaseTranslator (Sort Order = 10)
CourseOfferingRequestNameTitleRequiredTranslator (Sort Order = 20)
CourseOfferingRequestTemplateRequiredTranslator (Sort Order = 30)
CourseOfferingRequestSemesterOptionalTranslator (Sort Order = 40)
CourseOfferingRequestDepOrgNameOptionalTranslator (Sort Order = 50)
CourseOfferingRequestStartDateEndDateOptionalTranslator (Sort Order = 60)
CourseOfferingRequestStatusOptionalTranslator (Sort Order = 70)
            CourseOfferingRequestBaseTranslator
The CourseOfferingRequestBaseTranslator obtains the unique identifier of the course offering from the request.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseOfferingRequestBaseTranslator
Expected behavior
The translator performs the following tasks:
Sets the OrgUnitCode and OrgUnitName to the value provided in the sourcedGUID.sourcedid.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Code


result.Entity.Code


request.sourcedGUID.sourcedId


Name


result.Entity.Name


request.sourcedGUID.sourcedId

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
Suspension of all further processing.
An LIS Response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator (or an alternative Base translator) must be configured first in the list of translators.
            CourseOfferingRequestNameTitleRequiredTranslator
The CourseOfferingRequestNameTitleRequiredTranslator sets the course name based on the Title in the request, and fails if the title is missing.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseOfferingRequestNameTitleRequiredTranslator
Expected behavior
The handler performs the following tasks:
Updates the OrgUnitName to contain the value from the title string in the request, and fails if one is not provided.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Name


result.Entity.Name


request.courseOffering.title.textString

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
Suspension of all further processing.
An LIS Response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator
            CourseOfferingRequestSemesterOptionalTranslator
The CourseOfferingRequestSemesterOptionalTranslator sets the parent semester if one was provided.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseOfferingRequestSemesterOptionalTranslator
Expected behavior
The translator performs the following tasks:
Adds the Semester Parent Mapping if it was provided.
Processing continues to the next translator.
ParentSisId

Property


Translation Result Object


LIS Request Mapping


Parent SemesterId


result.ParentSisIds contains


request.courseOffering.academicSession.textString

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
Suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata
Configuration notes
This translator can be positioned anywhere after the Base translator.
            CourseOfferingRequestDepOrgNameOptionalTranslator
The CourseOfferingRequestDepOrgNameOptionalTranslator sets the parent department from the orgName if one was provided.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseOfferingRequestDepOrgNameOptionalTranslator
Expected behavior
The handler performs the following tasks:
Adds the Department Parent Mapping if one was provided.
Processing continues to the next translator.
ParentSisId

Property


Translation Result Object


LIS Request Mapping


Parent Department


result.ParentSisIds contains


request.courseOffering.org.orgName.textString

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
Suspension of all further processing.
An LIS Response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator.
            CourseOfferingRequestStartDateEndDateOptionalTranslator
The CourseOfferingRequestStartDateEndDateOptionalTranslator maps the start and end dates if they are provided.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseOfferingRequestStartDateEndDateOptionalTranslator
Expected behavior
The translator performs the following tasks:
Sets the start and end dates of the OrgUnit to contain the values from the first timeFrame.begin and timeFrame.end if they are provided in the request.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Start Date


result.Entity.StartDate


request.courseOffering.timeFrame(0).begin


End Date


result.Entity.EndDate


request.courseOffering.timeFrame(0).end

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
Suspension of all further processing.
An LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator.
            CourseOfferingRequestStatusOptionalTranslator
The CourseOfferingRequestStatusOptionalTranslator maps the status if one was provided in the request.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseOfferingRequestStatusOptionalTranslator
Expected behavior
The translator performs the following tasks:
Sets the IsActive property of the OrgUnit to contain the value from the status if it was provided in the request.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Status


result.Entity.IsActive


request.courseOffering.status

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
Suspension of all further processing.
An LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator.
            CourseOfferingRequestStartDateEndDateRequiredTranslator
The CourseOfferingRequestStartDateEndDateRequiredTranslator maps the start and end dates from the request, and fails if they are not provided.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseOfferingRequestStartDateEndDateRequiredTranslator
Expected behavior
The translator performs the following tasks:
Sets the start and end dates of the OrgUnit to contain the values from the timeFrame.begin and timeFrame.end in the request, and fails if they were not provided.
Processing continues to the next translator
Entity

Property


Translation Result Object


LIS Request Mapping


Start Date


result.Entity.StartDate


request.courseOffering.timeFrame(0).begin


End Date


result.Entity.EndDate	


request.courseOffering.timeFrame(0).end

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
Suspension of all further processing.
An LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            CourseOfferingRequestTruncateOrgUnitCodeTranslator
The CourseOfferingRequestTruncateOrgUnitCodeTranslator truncates the org unit code of the result object if the code is longer than 50 characters. The truncated code is set at 50 characters.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseOfferingRequestTruncateOrgUnitCodeTranslator
Expected behavior
The translator performs the following tasks:
Checks to see if the result.Entity.Code is longer than 50 characters. If yes, the code is truncated to 50 characters.
Processing continues to the next translator.
Configuration notes
This translator can be positioned anywhere after the Base translator.



--------------------------------------------------


About the ITranslateReadCourseOfferingResponse interface

The ITranslateReadCourseOfferingResponse interface is used to translate a Brightspace course offering into an LIS course offering record.
The interface implementation is D2L.IM.IPSIS.LIS.CMS.ITranslateReadCourseOfferingResponse.
The following template configuration lists provide a starting point for any LIS implementation:
Template, IPSIS
ReadCourseOfferingResponseSourcedGuidRequiredTranslator (Sort Order = 10) 
            ReadCourseOfferingResponseSourcedGuidRequiredTranslator
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.CMS.Default.ReadCourseOfferingResponseSourcedGuidRequiredTranslator
Expected behavior
The translator initializes the results object and sets the minimum required fields in the response.
sourceGUID

ExternalOrgUnitInfo


LIS Mapping


IMOrgUnitIdentifier


result.sourcedGUID





--------------------------------------------------


About the ITranslateCourseSection interface

The ITranslateCourseSection interface is used to translate a LIS course section into an IPSIS course section.
The interface implementation is D2L.IM.IPSIS.LIS.CMS.ITranslateCourseSection.
The following template configuration list provides a starting point for any LIS implementation:
IPSIS, Default
CourseSectionRequestBaseTranslator (Sort Order = 10)
CourseSectionRequestParentOfferingIdRequiredTranslator (Sort Order = 20)
CourseSectionRequestNameRequiredTranslator (Sort Order = 30)
CourseSectionRequestDepartmentRequiredTranslator (Sort Order = 40)
CourseSectionRequestSemesterOptionalTranslator (Sort Order = 50)
CourseSectionRequestStartDateEndDateRequiredTranslator (Sort Order = 60)
CourseSectionRequestStatusOptionalTranslator (Sort Order = 70)
            CourseSectionRequestBaseTranslator
The CourseSectionRequestBaseTranslator obtains the unique identifier of the course section from the request.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseSectionRequestBaseTranslator
Expected behavior
The translator performs the following tasks:
Sets the OrgUnitCode and OrgUnitName to the value provided in the sourcedGUID.sourcedid.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Code


result.Entity.Code


courseSectionRecord.sourcedGUID.sourcedId


Name


result.Entity.Name


courseSectionRecord.sourcedGUID.sourcedId

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator (or an alternative Base translator) must be configured first in the list of translators.
            CourseSectionRequestParentOfferingIdRequiredTranslator
The CourseSectionRequestParentOfferingIdRequiredTranslator requires and maps the course offering Parent Id.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseSectionRequestParentOfferingIdRequiredTranslator
Expected behavior
The translator performs the following tasks:
Sets the ParentOfferingId of the result to contain the value from the ParentOfferingId in the request.
Processing continues to the next translator.
ParentOfferingId

Property


Translation Result Object


LIS Request Mapping


Parent OfferingId


result.ParentOfferingId


courseSectionRecord.courseSection.parentOfferingId

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            CourseSectionRequestNameRequiredTranslator
The CourseSectionRequestNameRequiredTranslator requires and maps the section name.
Implementation 
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseSectionRequestNameRequiredTranslator
Expected behavior
The translator performs the following tasks:
Updates the OrgUnitName to contain the value from the title in the request.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Name


result.Entity.Name


courseSectionRecord.courseSection.title

Error behavior
If there is a problem processing, an IncompleteRequestException is thrown. This results in:
Suspension of all further processing.
A LIS Response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            CourseSectionRequestDepartmentRequiredTranslator
The CourseSectionRequestDepartmentRequiredTranslator requires and maps the Department Id.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseSectionRequestDepartmentRequiredTranslator
Expected behavior
The translator completes the following tasks:
Sets the ParentDepartmentId of the result to contain the value from the org.orgName in the request.
Processing continues to the next translator.
ParentDepartmentID

Property


Translation Result Object


LIS Request Mapping


Parent DepartmentId


result.ParentDepartmentId


courseSectionRecord.courseSection.org.orgName

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator.
            CourseSectionRequestSemesterOptionalTranslator
The CourseSectionRequestSemesterOptionalTranslator maps the Semester Id.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseSectionRequestSemesterOptionalTranslator
Expected behavior
The translator performs the following tasks:
Sets the ParentSemesterId of the result to contain the value from the academicSession in the request (if provided).
Processing continues to the next translator.
ParentSemeseterId

Property


Translation Result Object


LIS Request Mapping


Parent SemesterId


result.ParentSemesterId


courseSectionRecord.courseSection.academicSession

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator.
            CourseSectionRequestStartDateEndDateOptionalTranslator
The CourseSectionRequestStartDateEndDateOptionalTranslator sets the start and end date of the section.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseSectionRequestStartDateEndDateOptionalTranslator
Expected behavior
The translator performs the following tasks:
Sets the start and end dates of the OrgUnit to contain the values from the first timeFrame.begin and timeFrame.end in the request.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Start Date


result.Entity.StartDate


courseSectionRecord.courseSection.timeFrame(0).begin


End Date


result.Entity.EndDate


courseSectionRecord.courseSection.timeFrame(0).end

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator.
This translator cannot be configured with CourseSectionRequestStartDateEndDateRequiredTranslator.
            CourseSectionRequestStartDateEndDateRequiredTranslator
The CourseSectionRequestStartDateEndDateRequiredTranslator requires and maps the start and end dates for the Course Section.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseSectionRequestStartDateEndDateRequiredTranslator
Expected behavior
The translator performs the following tasks:
Sets the start and end dates of the OrgUnit to contain the values from the first timeFrame.begin and timeFrame.end in the request.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Start Date


result.Entity.StartDate


courseSectionRecord.courseSection.timeFrame(0).begin


End Date


result.Entity.EndDate


courseSectionRecord.courseSection.timeFrame(0).end

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator.
This translator cannot be configured with CourseSectionRequestStartDateEndDateOptionalTranslator.
            CourseSectionRequestStatusOptionalTranslator
The CourseSectionRequestStatusOptionalTranslator sets the status of the section.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseSectionRequestStatusOptionalTranslator
Expected behavior
The translator performs the following tasks:
Sets the IsActive property of the OrgUnit to contain the value from the status in the request, if the courseSectionRecord.courseSection.status property has been set.
If the status is not provided, then the value defaults to null as the field is a nullable boolean.
If the status is provided, but the value was not found in the dictionary (via the VocabManager), then the value is set to false.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Status


result.Entity.IsActive


courseSectionRecord.courseSection.status

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            CourseSectionRequestTruncateOrgUnitCodeTranslator
The CourseSectionRequestTruncateOrgUnitCodeTranslator truncates the org unit code of the result object if the code is longer than 50 characters. The truncated code is set at 50 characters.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseSectionRequestTruncateOrgUnitCodeTranslator
Expected behavior
The translator performs the following tasks:
Checks to see if the result.Entity.Code is longer than 50 characters. If yes, the code is truncated to 50 characters.
Processing continues to the next translator.
Configuration note
This translator can be positioned anywhere after the Base translator.
CourseSectionRequestCreateParentsTranslator
The CourseSectionRequestCreateParentsTranslator auto-provisions org units, that is, course offerings, templates, and departments from the Ellucian ILP section request.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseSectionRequestCreateParentsTranslator
Expected behaviour
When a section request is received from Ellucian ILP, it triggers the following activities in the Brightspace platform:
Create/update a Department based on the mappings below
Create/update a Course Template based on the mappings below
Create/update a Course Offering based on the mappings below
Create/update a Section based on the request
Additionally, org units are re-parented if a new parent comes through with a different org structure.
Entity
Property
Translation Result Object
LS Request Mapping
id
result.Entity.id
courseSectionRecord.sourceGUID.sourceId
title
result.Entity.title
courseSectionRecord.courseSection.title.textString
label
 
courseSectionRecord.courseSection.label.textString
parent
 
courseSectionRecord.courseSection.parentOfferingId
department
 
courseSectionRecord.courseSection.org.orgName.textString
term
 
courseSectionRecord.courseSection.academicSession.textString
departmentId
 
courseSectionRecord.courseSection.org.id.textString
startDate
 
courseSectionRecord.courseSection.timeFrame.begin
endDate
 
courseSectionRecord.courseSection.timeFrame.end
status
result.Entity.status
courseSectionRecord.courseSection.status
Error behaviour
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
An LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
If the course section request fails, the parent org units are not removed.
Configuration notes
D2L recommends the following configuration order when you use this translator:
CourseSectionRequestBaseTranslator
CourseSectionRequestNameRequiredTranslator
CourseSectionRequestCreateParentsTranslator
CourseSectionRequestStartDateEndDateOptionalTranslator
 



--------------------------------------------------


About the ITranslateCourseTemplate interface

The ITranslateCourseTemplate interface is used to translate LIS course templates into Brightspace course templates.
The interface implementation is D2L.IM.IPSIS.LIS.CMS.ITranslateCourseTemplate.
The following configuration lists provide a starting point for any LIS implementation:
IPSIS, Template
CourseTemplateRequestBaseTranslator (Sort Order = 10)
CourseTemplateRequestNameTitleRequiredTranslator (Sort Order = 20)
CourseTemplateRequestDepOrgNameOptionalTranslator (Sort Order = 30)
            CourseTemplateRequestBaseTranslator
The CourseTemplateRequestBaseTranslator initializes the results object and maps the OrgUnitCode and OrgUnitName based on the sourcedId in the request.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseTemplateRequestBaseTranslator
Expected behavior
The translator performs the following tasks:
The translator initializes the results object.
Sets the OrgUnitCode and OrgUnitName to the value provided in the sourcedGUID.sourcedId.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Code	


result.Entity.Code


courseTemplateRecord.sourcedGUID.sourcedId


Name


result.Entity.Name


courseTemplateRecord.sourcedGUID.sourcedId

Error behavior
If the sourcedId is not provided, an IncompleteRequestException is thrown, resulting in:
The suspension of further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator (or an alternative Base translator) must be configured first in the list of translators.
            CourseTemplateRequestNameTitleRequiredTranslator
The CourseTemplateRequestNameTitleRequiredTranslator requires and maps a course template title.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseTemplateRequestNameTitleRequiredTranslator
Expected behavior
The translator performs the following tasks:
Updates the OrgUnitName to contain the value from the title string in the request.
Processing continues to the next translator.
Entity

Property


Translation Result Object


LIS Request Mapping


Name


result.Entity.Name


courseTemplateRecord.courseTemplate.title.textString

Error behavior
If a course template title is not provided, an IncompleteRequestException is thrown, resulting in:
The suspension of further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
Requires the Base translator to run first.
            CourseTemplateRequestDepOrgNameOptionalTranslator
The CourseTemplateRequestDepOrgNameOptionalTranslator maps an org name to the department.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseTemplateRequestDepOrgNameOptionalTranslator
Expected behavior
The translator performs the following tasks:
Adds the Department Parent Mapping.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Parent DepartmentId


result.ParentDepartmentCode


courseTemplateRecord.courseTemplate.org.orgName.textString

Error behavior
If a course template title is not provided, an IncompleteRequestException is thrown, resulting in:
The suspension of further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
Requires the Base translator to run first.
This translator should not be configured with CourseTemplateRequestDepOrgNameRequiredTranslator.
            CourseTemplateRequestDepOrgNameRequiredTranslator
The CourseTemplateRequestDepOrgNameRequiredTranslator requires an org name to map to the department.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseTemplateRequestDepOrgNameRequiredTranslator
Expected behavior
The translator performs the following tasks:
Adds the Department Parent Mapping from the OrgName in the LIS Request.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Parent DepartmentId


result.ParentDepartmentCode


courseTemplateRecord.courseTemplate.org.orgName.textString

Error behavior
If an orgName is not provided, an IncompleteRequestException is thrown, resulting in:
The suspension of further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
Requires the Base translator to run first.
This translator should not be configured with CourseTemplateRequestDepOrgNameOptionalTranslator.
            CourseTemplateRequestTruncateOrgUnitCodeTranslator
The CourseTemplateRequestTruncateOrgUnitCodeTranslator truncates the org unit code of the result object if the code is longer than 50 characters. The truncated code is set at 50 characters.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.CourseTemplateRequestTruncateOrgUnitCodeTranslator
Expected behavior
The translator performs the following tasks:
Checks to see if the result.Entity.Code is longer than 50 characters. If yes, the code is truncated to 50 characters.
Processing continues to the next translator.
Configuration note
Requires the Base translator to run first.



--------------------------------------------------


About the ITranslateReadCourseSectionResponse interface

The ITranslateReadCourseSectionResponse interface is used to translate a Brightspace section into an LIS course section record.
The interface implementation is D2L.IM.IPSIS.LIS.CMS.ITranslateCourseSection.
The following template configuration list provides a starting point for any LIS implementation.
Template, IPSIS
ReadCourseSectionResponseSourcedGuidRequiredTranslator (Sort Order = 10)
            ReadCourseSectionResponseSourcedGuidRequiredTranslator
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.CMS.Default.ReadCourseSectionResponseSourcedGuidRequiredTranslator
Expected behavior
This translator initializes the results object and sets the minimum required fields in the response.

ExternalOrgUnitInfo


LIS Mapping


IMOrgUnitIdentifier


result.sourcedGUID





--------------------------------------------------


About the ITranslateMembership interface

The ITranslateMembership interface is used to translate a LIS membership record into a Brightspace enrollment.
The interface implementation is D2L.IM.IPSIS.LIS.MMS.ITranslateMembership.
The following configuration list provides a starting point for any LIS implementation.
Template, IPSIS
MembershipRequestBaseTranslator (Sort Order = 10)
MembershipRequestCollectionRequiredTranslator (Sort Order = 20)
MembershipRequestUserPersonRequiredTranslator (Sort Order = 30)
MembershipRequestRoleTypeAndStatusRequiredTranslator (Sort Order = 40)
            MembershipRequestBaseTranslator
The MembershipRequestBaseTranslator maps the Enrollment Identifier.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.MMS.Default.MembershipRequestBaseTranslator
Expected behavior
The translator performs the following tasks:
Set the IMEnrollmentId to the value provided in the sourcedGUID.sourcedid.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Enrollment Message ID


result.LISMembershipId


membershipRecord.sourcedGUID.sourcedId

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator (or an alternative Base translator) must be configured first in the list of translators.
            MembershipRequestCollectionRequiredTranslator
The MembershipRequestCollectionRequiredTranslator requires and maps the enrollment collection (typically LIS section).
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.MMS.Default.MembershipRequestCollectionRequiredTranslator
Expected behavior
The translator performs the following tasks:
The collectionSourcedId is added to the result object.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Section Code


result.Entity.IMOrgUnitIdentifier


membershipRecord.membership.collectionSourcedId

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            MembershipRequestUserPersonRequiredTranslator
The MembershipRequestUserPersonRequiredTranslator requires and maps a user.
Expected behavior
The translator performs the following tasks:
Adds the person Id to the result object.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


UserId


result.Entity.IMUserIdentifier


membershipRecord.membership.member.personSourcedId

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            MembershipRequestRoleTypeAndStatusRequiredTranslator
The MembershipRequestRoleTypeAndStatusRequiredTranslator requires and maps a roleType and status.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.MMS.Default.MembershipRequestRoleTypeStatusRequiredTranslator
Expected behavior
The translator performs the following tasks:
Adds the role and status to the result object.
Multiple role objects may be provided; they are passed to the handlers as an IEnumerable.
If a role is present, but missing either a type or a status, then an IncompleteRequestException is thrown.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Role


result.Entity.Roles{*}.role


membershipRecord.membership.member.role{*}.roleType


Enrollment Status


results.Entity.Roles{*}.status


membershipRecord.membership.member.role{*}.status

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator.
This translator is typically not configured with MembershipRequestSubRoleAndStatusRequiredTranslator.
This translator is typically not configured with MembershipRequestRoleTypeRequiredTranslator.
            MembershipRequestSubRoleAndStatusRequiredTranslator
The MembershipRequestSubRoleAndStatusRequiredTranslator translator requires and maps a SubRole and status.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.MMS.Default.MembershipRequestSubRoleStatusRequiredTranslator
Expected Behavior
The translator performs the following tasks:
Adds the subrole and status to the result object.
Multiple subrole objects may be provided; they are passed to the handlers as an IEnumerable.
If a subrole is present, but missing either a type or a status, an IncompleteRequestException is thrown.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Role


result.Entity.Roles{*}.role


membershipRecord.membership.member.role{*}.subRole


Enrollment Status


results.Entity.Roles{*}.status


membershipRecord.membership.member.role{*}.status

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes.
This translator can be positioned anywhere after the Base translator.
This translator is typically not configured with MembershipRequestRoleTypeAndStatusRequiredTranslator.
This translator is typically not configured with MembershipRequestRoleTypeRequiredTranslator.
            MembershipRequestRoleTypeRequiredTranslator
The MembershipRequestRoleTypeRequiredTranslator requires and maps a RoleType and maps status if available. This should only be used if there is a chance that the status might not be set.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.MMS.Default.MembershipRequestRoleTypeRequiredTranslator
Expected behavior
The translator performs the following tasks:
For each role, the translator adds the role type to the result object and adds the status if available (null if not).
Multiple role objects may be provided; they are passed to the handlers as an IEnumerable.
If a role is present, but missing the type, an IncompleteRequestException is thrown.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Role


result.Entity.Roles{*}.role


membershipRecord.membership.member.role{*}.subRole


Enrollment Status


results.Entity.Roles{*}.status


membershipRecord.membership.member.role{*}.status

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator.
This translator is typically not configured with MembershipRequestRoleTypeAndStatusRequiredTranslator.
This translator is typically not configured with MembershipRequestSubRoleAndStatusRequiredTranslator.




--------------------------------------------------


About the ITranslateReadCourseTemplateResponse interface

The ITranslateReadCourseTemplateResponse interface is used to translate a Brightspace Template into an LIS Course Template record.
The interface implementation is D2L.IM.IPSIS.LIS.CMS.ITranslateReadCourseTemplateResponse.
The Template, IPSIS configuration lists provide a starting point for any LIS implementation.
The following handler list is used as a starting point:
ReadCourseTemplateResponseSourcedGuidRequiredTranslator (Sort Order = 10)
            ReadCourseTemplateResponseSourcedGuidRequiredTranslator
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.CMS.Default.ReadCourseTemplateResponseSourcedGuidRequiredTranslator
Expected behavior
The translator initializes the results object and sets the minimum required fields in the response.

ExternalOrgUnitInfo


LIS Mapping


IMOrgUnitIdentifier


result.sourcedGUID





--------------------------------------------------


About the ITranslateMembershipResponse interface

The ITranslateMembershipResponse interface is used to translate an IPSIS Enrollment Read Result into an LIS Membership Record.
The implementation interface is D2L.IM.IPSIS.LIS.MMS.ITranslateMembershipResponse.
The following configuration list provides a starting point for any LIS implementation:
Template, IPSIS
ReadMembershipResponseSourcedGuidRequiredTranslator (Sort Order = 10)
ReadMembershipResponseMembershipIdTypeOrgUnitTypeRequiredTranslator (Sort Order = 20)
ReadMembershipResponseCollectionSourcedIdOrgUnitRequiredTranslator (Sort Order = 30)
ReadMembershipResponsePersonSourcedIdRequiredTranslator (Sort Order = 40)
ReadMembershipResponseRoleTypeRequiredTranslator (Sort Order = 50)
            ReadMembershipResponseSourcedGuidRequiredTranslator
The ReadMembershipResponseSourcedGuidRequiredTranslator puts the enrollment sourcedId into the response.
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.MMS.Default.ReadMembershipResponseSourcedGuidRequiredTranslator
Expected behavior
The translator performs the following tasks:
Sets the sourcedId field in the response to the given enrollment IM Enrollment Identifier.
Processing continues to the next translators

Property


Translation Result Object


LIS Request Mapping


Enrollment SIS Identifier


result.sourcedGUID.sourcedId


request.SISMapping.IMEnrollmentIdentifier

Error behavior
If any needed request objects are null, the translator throws an ArgumentNullException. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
            ReadMembershipResponseMembershipIdTypeOrgUnitTypeRequiredTranslator
The ReadMembershipResponseMembershipIdTypeOrgUnitTypeRequiredTranslator takes the org unit that the enrollment points to, and places its type into the response.
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.MMS.Default.ReadMembershipResponseMembershipIdTypeOrgUnitTypeRequiredTranslator
Expected behavior
The translator performs the following tasks:
Set the membershipIdType field in the response to one of the following based on the org unit mapping provided:groupcourseOfferingcourseSectionsectionAssociationcourseTemplate
Processing continues to the next translator

Property


Translation Result Object


LIS Request Mapping


Org Unit Type


result.membership.membershipIdType


request.OrgUnitMapping.IMExternalInfo.OrgUnitTypeMapping.IMOrgUnitTypeId

Error behavior
If the translator cannot translate the org unit type id in the request into one of the enumerated types, an InvalidOrgUnitTypeException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
If any needed request objects are null, the translator throws an ArgumentNullException. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
            ReadMembershipResponseCollectionSourcedIdOrgUnitRequiredTranslator
The ReadMembershipResponseCollectionSourcedIdOrgUnitRequiredTranslator puts the org unit SIS identifier into the response.
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.MMS.Default.ReadMembershipResponseCollectionSourcedIdOrgUnitRequiredTranslator
Expected behavior
The translator performs the following tasks:
Sets the collectionSourcedId in the response to the IMOrgUnitIdentifier given in the request.
Processing continues to the next translator

Property


Translation Result Object


LIS Request Mapping


Org Unit SIS Identifier


result.membership.collectionSourcedId


request.OrgUnitMapping.IMExternalInfo.IMOrgUnitIdentifier

Error behavior
If any needed request objects are null, the translator throws an ArgumentNullException. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
            ReadMembershipResponsePersonSourcedIdRequiredTranslator
The ReadMembershipResponsePersonSourcedIdRequiredTranslator sets the personSourcedId of the response to the IMUserIdentifier in the request.
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.MMS.Default.ReadMembershipResponsePersonSourcedIdRequiredTranslator
Expected behavior
The translator performs the following tasks:
Sets the personSourcedId in the response to the IMUserIdentifier given in the request.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Person SIS Identifier


result.membership.member.personSourcedId


request.UserMapping.IMUserIdentifier

Error behavior
If any needed request objects are null, the translator throws an ArgumentNullException. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
            ReadMembershipResponseRoleTypeRequiredTranslator
The ReadMembershipResponseRoleTypeRequiredTranslator sets the role object of the response to an array containing one role which matches the role from the request.
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.MMS.Default.ReadMembershipResponseRoleTypeRequiredTranslator
Expected behavior
The translator performs the following tasks:
Sets the role of the response to an array with only one entry. This entry contains only a roleType field, which is set to the SIS Role Identifier given in the request.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Role SIS Identifier


result.membership.member.role\[0\].roleType


request.RoleMapping.IMRoleIdentifier

Error behavior
If any needed request objects are null, the translator throws an ArgumentNullException. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.




--------------------------------------------------


About the ITranslateReadGroupResponse interface

The ITranslateReadGroupResponse interface is used to translate a Brightspace org unit into a LIS group record on the response message of a read operation.
Note: Values such as Name and Code are stored both in the IM tables and in the LMS tables. Depending on IPSIS handler configuration, both sets of data might be available to the translators. In this case, information from the IM tables will be preferred, with LMS data only used if the IM data is missing or incomplete.
The interface implementation is D2L.IM.IPSIS.LIS.GMS.ITranslateReadGroupResponse.
The following configuration list provides a starting point for any LIS implementation:
Template, IPSIS
ReadGroupResponseSourcedGuidRequiredTranslator (Sort Order = 10)
ReadGroupResponseTypeValueIdRequiredTranslator (Sort Order = 20)
ReadGroupResponseNameShortDescTranslator (Sort Order = 30)
            ReadGroupResponseSourcedGuidRequiredTranslator
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.GMS.Default.ReadGroupResponseSourcedGuidRequiredTranslator
Expected behavior
This translator initializes the results object and sets the minimum required fields in the response.

ExternalInfo


OrgUnit


LIS Mapping


request.ExternalInfo.IMOrgUnitIdentifier


request.Entity.Code


gresult.Entity.sourcedGUID.sourcedId

The result.Entity.group.groupType object is populated with the required default structure taking the language from the LIS context, but all values are blank.
groupType has two properties that are initialized: scheme {language, textString} and typevalue {id {language, textString}, level {language, textString}, type {language, textString} }.
result.Status is set to VocabParseStatus.PartialDataStorage.
            ReadGroupResponseTypeValueIdRequiredTranslator
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.GMS.Default.ReadGroupResponseTypeValueIdRequiredTranslator
Expected behavior
ReadGroupResponseTypeValueIdRequiredTranslator requires the Base translator to run first, and adds the OrgUnitType Mapping Id to the typeValue.id in the result.

ExternalOrgUnitInfo


Desire2Learn LP


request.ExternalInfo.OrgUnitTypeMapping.IMOrgUnitTypeId


result.Entity.group.groupType.typeValue(0).id

            ReadGroupResponseNameShortDescTranslator
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.GMS.Default.ReadGroupResponseNameShortDescTranslator
Expected behavior

ExternalOrgUnitInfo


OrgUnit


LIS Mapping


request.ExternalInfo.IMOrgUnitName


request.Entity.Name


result.Entity.group.description.shortDescription

            ReadGroupResponseNameLongDescTranslator
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.GMS.Default.ReadGroupResponseNameLongDescTranslator
Expected behavior
ReadGroupResponseNameLongDescTranslator requires the Base translator to run first, and simply adds the OrgUnitName to the long description in the response.

ExternalOrgUnitInfo


OrgUnit


LIS Mapping


request.ExternalInfo.IMOrgUnitName


request.Entity.Name


result.Entity.group.description.longDescription





--------------------------------------------------


About the ITranslateReadResultsRequest interface

The ITranslateReadResultsRequest interface is used to translate the LIS Request object into D2L recognized values.
The interface implementation is D2L.IM.IPSIS.LIS.OMS.IReadResultsRequestTranslator
The following configuration lists for the ITranslateReadResultsRequest are shipped with the product. They are listed along with the extension point they are intended for.
IPSIS, Default
The ReadResultsRequestResultIdsRequiredTranslator is the default translator for the ITranslateReadResultsRequest interface. 
            ReadResultsRequestResultIdsRequiredTranslator
The ReadResultsRequestResultIdsRequiredTranslator translator requires an input list of ResultIds, and maps each one to a set of values needed to look up a grade in Brightspace.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.OMS.Default.ReadResultsRequestResultIdsRequiredTranslator
Expected behavior
The translator performs the following tasks:
For each ResultId on the Input method, the translator parses it as SISOrgUnitId|IMOrgUnitMappingId|GradeType|Status|SISUserId, where:SISOrgUnitId is the SIS Id used to refer to the OrgUnitIMOrgUnitMappingId is the Id for the mapping between the SISOrgUnitId and the LMS OrgUnitIdGradeType is based on an enum that contains FinalCalculated, FinalAdjusted, etcStatus is based on an enum that contains Released or AllSISUserId is the SIS Id for the user receiving the Result
The translator returns a list of objects representing the above decomposition.
Processing continues to the next translator.
Error behavior
If the ResultIds are missing or malformed, an InvalidRequestDataException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.




--------------------------------------------------


About the ITranslateGroup interface

The ITranslateGroup interface is used to translate LIS Group Record into a Brightspace OrgUnit.
The interface implementation is D2L.IM.IPSIS.LIS.GMS.ITranslateGroup.
The following configuration list provides a starting point for any LIS implementation.
Template, IPSIS
GroupRequestBaseTranslator (Sort Order = 10)
GroupRequestTypeValueIdRequiredTranslator (Sort Order = 20)
GroupRequestNameShortDescRequiredTranslator (Sort Order = 30)
            GroupRequestBaseTranslator
The GroupRequestBaseTranslator maps the Group ID.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.GMS.Default.GroupRequestBaseTranslator
Expected behavior
The translator performs the following tasks:
Sets the OrgUnitCode and OrgUnitName to the value provided in the sourcedGUID.sourcedid.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Code


result.Entity.Code


groupRecord.sourcedGUID.sourcedId


Name


result.Entity.Name


groupRecord.sourcedGUID.sourcedId

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator (or an alternative Base translator) must be configured first in the list of translators.
            GroupRequestTypeValueIdRequiredTranslator
The GroupRequestTypeValueIdRequiredTranslator requires and maps the first group type using the first typeValue in the request.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.GMS.Default.GroupRequestTypeValueIdRequiredTranslator
Expected behavior
The translator performs the following tasks:
Adds the OrgUnitType Mapping from the first grouptype typeValue.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Type


result.LISGroupType


groupRecord.group.groupType.typeValue{0}.id.textString

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator can be positioned anywhere after the Base translator.
This translator (or a customized replacement) must always be configured.
            GroupRequestNameShortDescRequiredTranslator
The GroupRequestNameShortDescRequiredTranslator requires and maps the name based on the short description.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.GMS.Default.GroupRequestNameShortDescRequiredTranslator
Expected behavior
The translator performs the following tasks:
Updates the OrgUnitName to contain the value from the short description in the request.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Name


result.Entity.Name


groupRecord.group.description.shortDescription

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            GroupRequestNameLongDescRequiredTranslator
The GroupRequestNameLongDescRequiredTranslator requires and maps the name based on the long description.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.GMS.Default.GroupRequestNameRequiredLongDescTranslator
Expected behavior
The translator performs the following tasks:
Updates the OrgUnitName to contain the value from the long description in the request.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Name


result.Entity.Name


groupRecord.group.description.longDescription

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            GroupRequestNameLongDescOptionalTranslator
The GroupRequestNameLongDescOptionalTranslator sets the name based on the long description if it exists.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.GMS.Default.GroupRequestNameLongDescOptionalTranslator
Expected behavior
The translator performs the following tasks:
Updates the OrgUnitName to contain the value from the long description in the request if it exists.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Name


result.Entity.Name


groupRecord.group.description.longDescription

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            GroupRequestNameShortDescOptionalTranslator
The GroupRequestNameShortDescOptionalTranslator sets the name based on the short description if it is provided.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.GMS.Default.GroupRequestNameShortDescOptionalTranslator
Expected behavior
The translator performs the following tasks:
Updates the OrgUnitName to contain the value from the short description in the request if it exists.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Name


result.Entity.Name


groupRecord.group.description.shortDescription

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            GroupRequestCreateRecordFromSourcedIdRequiredTranslator
The GroupRequestCreateRecordFromSourcedIdRequiredTranslator creates a valid group record if all that was passed in was the sourcedId.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.GMS.Default.GroupRequestCreateRecordFromSourcedIdRequiredTranslator
Expected behavior
The translator performs the following tasks:
If a valid group record did not exist on the request, the translator builds out a dummy group record, using the sourcedId for the shortDescription and defaulting the type to Department.
Processing continues to the next translator.
Configuration note
This translator must be positioned directly after the Base translator.
            GroupRequestTruncateOrgUnitCodeTranslator
The GroupRequestTruncateOrgUnitCodeTranslator truncates the org unit code of the result object if the code is longer than 50 characters. The truncated code is set at 50 characters.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.GroupRequestTruncateOrgUnitCodeTranslator
Expected behavior
The translator performs the following tasks:
Checks to see if the result.Entity.Code is longer than 50 characters. If yes, the code is truncated to 50 characters.
Processing continues to the next translator.
Configuration note
This translator can be positioned anywhere after the Base translator.



--------------------------------------------------


About the ITranslateReadResultIdsForLineItemWithLineItemTypeResponse interface

The ITranslateReadResultIdsForLineItemWithLineItemTypeResponse interface is used to translate IPSIS IGrade objects into ResultId strings for LIS.
The interface implementation is D2L.IM.IPSIS.LIS.OMS.ITranslateReadResultIdsForLineItemWithLineItemTypeResponse.
The IPSIS, Default configuration lists for the ITranslateReadResultIdsForLineItemWithLineItemTypeResponse interface are shipped with the product. They are listed along with the extension point they are intended for.
The following translators are the default translators for the TranslateReadResultIdsForLineItemWithLineItemTypeResponse interface. They are listed in the order configured by default.
ReadResultIdsForLineItemWithLineItemTypeResponseRequiredTranslator (Sort Order = 10)
            ReadResultIdsForLineItemWithLineItemTypeResponseRequiredTranslator
The ReadResultIdsForLineItemWithLineItemTypeResponseRequiredTranslator converts the input grades into a list of ResultId strings.
Implementation
D2L.IM.IPSIS.LIS.ResponseAdapters.OMS.Default.ReadResultIdsForLineItemWithLineItemTypeResponseRequiredTranslator
Expected behavior
For each returned grade, the translator creates a ResultId with the format SISOrgUnitId|IMOrgUnitMappingId|GradeType|Status|SISUserId where:
SISOrgUnitId is the SIS Id used to refer to the OrgUnit.
IMOrgUnitMappingId is the Id for the mapping between the SISOrgUnitId and the LMS OrgUnitId.
GradeType is based on an enum that contains FinalCalculated, FinalAdjusted, etc.
Status is based on an enum that contains Released or All.
SISUserId is the SIS Id for the user receiving the Result.
Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator must be configured as the last Response translator.



--------------------------------------------------


About the ITranslateGradesToLISResults interface

The ITranslateGradesToLISResults interface is used to translate IPSIS IGrade objects into ResultRecord objects to send to LIS.
The interface implementation is D2L.IM.IPSIS.LIS.OMS.ITranslateGradesToLISResults.
The IPSIS, Default configuration lists for the ITranslateGradesToLISResults interface are shipped with the product. They are listed along with the extension point they are intended for.
The LISResultsRequiredTranslator (Sort Order = 20) translator is the default translator for the ITranslateGradesToLISResults interface.
            LISResultsGradePointsRequiredTranslator
The LISResultsGradePointsRequiredTranslator indicates that the final results returned to the SIS should use the Points representation of Brightspace Grades.
Implementation
D2L.IM.IPSIS.LIS.ResponseAdapters.OMS.Default.LISResultsGradePointsRequiredTranslator
Expected behavior
This translator sets a flag on the request indicating that the final results returned to the SIS should use the Points representation of Brightspace Grades. This overrides the Points versus Symbol decision made in the ReadGradesHandlers, if any.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This translator must be configured before the LISResultsRequiredTranslator.
            LISResultsRequiredTranslator
The LISResultsRequiredTranslator builds the ResultRecord objects.
Implementation
D2L.IM.IPSIS.LIS.ResponseAdapters.OMS.Default.LISResultsRequiredTranslator
Expected behavior
The translator performs the following tasks:
Maps the fields from input IGrades and IMUsers to output ResultRecords
The following fields are mapped:

OutputField


Property


StatusOfResult


(static value) Complete


LineItemSourcedId


SISOrgUnitId


PersonSourcedId


SISUserId


ResultScore


IGrade Numerator and Denominator (if Points)
IGrade Scheme (if Symbols)

Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This translator must be configured after those that select Grade Points versus Symbols.
            LISGradeSymbolsRequiredTranslator
The LISGradeSymbolsRequiredTranslator indicates that the final results returned to the SIS should use the Symbols representation of Brightspace Grades. This overrides the Points versus Symbol decision made in the ReadGradesHandlers, if any.
Implementation
D2L.IM.IPSIS.LIS.ResponseAdapters.OMS.Default.LISResultsGradeSymbolsRequiredTranslator
Expected behavior
This translator sets a flag on the request indicating that the final results returned to the SIS should use the Symbols representation of Brightspace Grades.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This translator must be configured before the LISResultsRequiredTranslator.
            LISResultsStripPercentSignTranslator
The LISResultsStripPercentSignTranslator removes any trailing whitespace and % symbols from the end of each grade score. This has no effect on points, nor on symbols with any other endings. This handler should only be used if the SIS is incapable of processing % symbols in the grade scores.
Implementation
D2L.IM.IPSIS.LIS.ResponseAdapters.OMS.Default.LISResultsStripPercentSignTranslator
Expected behavior
This translator removes trailing whitespace and % symbols from the grade scores, if present.
Error behavior
If an input grade is null or missing its grade score, no exception is thrown. Processing simply moves on to the next grade record.
Configuration note
This translator must be configured after the LISResultsRequiredTranslator, preferably last in the list. This allows all other handlers to work normally, but prevents % symbols from being sent to the SIS.



--------------------------------------------------


About the ITranslateSectionAssociation interface

The ITranslateSectionAssociation interface is used to translate LIS Section Association Requests into a D2L IPSIS Section Association Object.
The interface implementation is D2L.IM.IPSIS.LIS.CMS.ITranslateSectionAssociation.
The following configuration list provides a starting point for any LIS implementation:
Template, IPSIS 
SectionAssociationRequestBaseTranslator (Sort Order = 10)
sectionAssociationRequestNameTitleOptionalTranslator (Sort Order = 20)
SectionAssociationRequestSectionIdRequiredTranslator (Sort Order = 30)
SectionAssociationRequestStatusOptionalTranslator (Sort Order = 40)
            SectionAssociationRequestBaseTranslator
The SectionAssociationRequestBaseTranslator requires and maps the Section Association Identifier.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.SectionAssociationRequestBaseTranslator
Expected behavior
The translator performs the following tasks:
Sets the OrgUnitCode and OrgUnitName to the value provided in the sourcedGUID.sourcedid.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Section Association Code


result.Entity.Code


sectionAssociationRecord.sourcedGUID.sourcedId


Section Association Name


result.Entity.Name


sectionAssociationRecord.sourcedGUID.sourcedId

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
Suspension of all further processing.
An LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator (or an alternative Base translator) must be configured first in the list of translators.
            SectionAssociationRequestNameTitleOptionalTranslator
The SectionAssociationRequestNameTitleOptionalTranslator maps the name to the title.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.SectionAssocationRequestNameTitleOptionalTranslator
Expected behavior
The translator performs the following tasks:
Updates the OrgUnitName to contain the value from the title string in the request.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Section Association Name


result.Entity.Name


sectionAssociationRecord.sectionAssociation.title.textString

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            SectionAssociationRequestStatusOptionalTranslator
The SectionAssociationRequestStatusOptionalTranslator sets the section status if it's provided.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.SectionAssociationRequestStatusOptionalTranslator
Expected behavior
The translator performs the following tasks:
Adds the Status based on Active = True, Inactive = False, anything else being null.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Status


result.Entity.IsActive


sectionAssociationRecord.sectionAssociation.status

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
            SectionAssociationRequestTruncateOrgUnitCodeTranslator
This translator truncates the org unit code of the result object if the code is longer than 50 characters. The truncated code is set at 50 characters.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.CMS.Default.SectionAssociationRequestTruncateOrgUnitCodeTranslator
Expected behavior
The translator performs the following tasks:
Checks to see if the result.Entity.Code is longer than 50 characters. If so, the code is truncated to 50 characters.
Processing continues to the next translator.
Configuration note
This translator can be positioned anywhere after the Base translator.



--------------------------------------------------


About the ITranslateReadResultIdsForLineItemWithLineItemTypeRequest interface

The ITranslateReadResultIdsForLineItemWithLineItemTypeRequest interface is used to translate the LIS Request object into D2L recognized values.
The interface implementation is D2L.IM.IPSIS.LIS.OMS.IReadResultIdsForLineItemWithLineItemTypeRequestTranslator.
The IPSIS, Template configuration lists for the ITranslateReadResultIdsForLineItemWithLineItemTypeRequest interface are shipped with the product. They are listed along with the extension point they are intended for.
The following translators are the default translators for the ITranslateReadResultIdsForLineItemWithLineItemTypeRequest interface. They are listed in the order configured by default:
ReadResultIdsForLineItemWithLineItemTypeRequestGetSectionRequiredTranslator (Sort Order = 10)
ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsSectionTranslator (Sort Order = 20)
            ReadResultIdsForLineItemWithLineItemTypeRequestGetSectionRequiredTranslator
The ReadResultIdsForLineItemWithLineItemTypeRequestGetSectionRequiredTranslator requires and maps the SIS section identifier for the OrgUnit.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.OMS.Default.ReadResultIdsForLineItemWithLineItemTypeRequestGetSectionRequiredTranslator
Expected behavior
The translator performs the following tasks:
Selects the SISId for the OrgUnit from the contextSourcedId element.
Processing continues to the next translator.

Property


Translation Result Object


Value


SIS OrgUnitId


result.Entity.SISId


contextSourcedId

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS Response Header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration notes
This translator must be configured first in the list of Request translators for ReadResultIdsForLineItemWithLineItemType.
This translator intentionally deviates from the LIS specification as written. It uses an input field intended for a LineItemId for a Section/Offering OrgUnitId instead. This is because the Oracle implementation makes this assumption. 
            ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsSectionTranslator
The ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsSectionTranslator identifies that the org unit for the request must be a CourseSection.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.OMS.Default.ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsSectionTranslator
Expected behavior
The translator performs the following tasks:
Sets a property on the result object indicating which org unit types are valid for this request.
Processing continues to the next translator.

Property


Translation Result Object


Value


ValidOrgUnitTypes


{OrgUnitTypeEnum.Section}


 

Configuration notes
This translator must be configured after the ReadResultIdsForLineItemWithLineItemTypeRequestGetSectionRequiredTranslator.
Only one ValidateOrgUnitIs translator must be configured.
            ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsOfferingTranslator
The ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsOfferingTranslator identifies that the org unit for the request must be a CourseOffering.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.OMS.Default.ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsOfferingTranslator
Expected behavior
The handler performs the following tasks:
Sets a property on the result object indicating which org unit types are valid for this request.
Processing continues to the next translator.

Property


Translation Result Object


Value


ValidOrgUnitTypes


{OrgUnitTypeEnum.CourseOffering}


 

Configuration notes
This translator must be configured after the ReadResultIdsForLineItemWithLineItemTypeRequestGetSectionRequiredTranslator.
Only one ValidateOrgUnitIs translator must be configured.
            ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsOfferingOrSectionTranslator
The ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsOfferingOrSectionTranslator identifies that the org unit for the request must be a CourseOffering or a CourseSection.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.OMS.Default.ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsOfferingOrSectionTranslator
Expected behavior
The translator performs the following tasks:
Sets a property on the result object indicating which org unit types are valid for the request.
Processing continues to the next translator.

Property


Translation Result Object


Value


ValidOrgUnitTypes


{OrgUnitTypeEnum.CourseOffering, OrgUnitTypeEnum.Section}


 

Configuration notes
This translator must be configured after the ReadResultIdsForLineItemWithLineItemTypeRequestGetSectionRequiredTranslator.
Only one ValidateOrgUnitIs translator must be configured.
            ReadResultIdsForLineItemWithLineItemTypeRequestFinalAdjustedLineItemTypeRequiredTranslator
The ReadResultIdsForLineItemWithLineItemTypeRequestFinalAdjustedLineItemTypeRequiredTranslator requires the LIS Line Item type to be Final and if so, sets the grade type to Final Adjusted.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.OMS.Default.ReadResultIdsForLineItemWithLineItemTypeRequestFinalAdjustedLineItemTypeRequiredTranslator
Expected behavior
The translator performs the following tasks:
If the LIS Line Item type is anything other than Final an exception is thrown.
If the LIS Line Item type is final the translator sets the GradeType to Final Adjusted and processing continues to the next translator.
Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS Response Header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator must be configured after the GetSection ranslator.
            ReadResultIdsForLineItemWithLineItemTypeRequestFinalCalculatedLineItemTypeRequiredTranslator
The ReadResultIdsForLineItemWithLineItemTypeRequestFinalCalculatedLineItemTypeRequiredTranslator requires the LIS Line Item type to be Final and if so, sets the grade type to Final Calculated.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.OMS.Default.ReadResultIdsForLineItemWithLineItemTypeRequestFinalCalculatedLineItemTypeRequiredTranslator
Expected behavior
The handler performs the following tasks:
If the LIS Line Item type is anything other than Final an exception is thrown.
If the LIS Line Item type is Final, the translator sets the GradeType to Final Calculated and processing continues to the next translator.
Error behavior
If there is a problem processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator must be configured after the GetSection translator.



--------------------------------------------------


About the ITranslateReadPersonResponse interface

About the ITranslateReadPersonResponse interface
The ITranslateReadPersonResponse is used to translate a Brightspace user into a LIS person record.
The interface implementation is D2L.IM.IPSIS.LIS.PMS.ITranslateReadPersonResponse.
The Template, IPSIS configuration list provides a starting point for any LIS implementation.
PersonRequestBaseTranslator
This translator maps a Brightspace user’s name to both LIS name and formatted name elements.
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.PMS.Default.ReadUserResponseNameFirstLastNameRequiredTranslator
Expected behavior

User


LIS Mapping


request.Entity.FirstName + request.Entity.LastName


result.Entity.formName.formattedName


"FULL"


result.Entity.name.nameType


request.Entity.FirstName


result.Entity.name.partName[FIRST]


request.Entity.LastName


result.Entity.name.partName[LAST]

The result.Entity.name.nameType object is populated with Full name type using the language and vocabulary from the LIS context.
The result.Entity.name.partName is a list of partName objects which correspond to a set of defined partName types. This set is defined in a vocabulary. The FIRST and LAST name partName types are populated and added to the partName list.
The result.Entity.formname.formattedName is set with the combination of first and last name from the D2L user object.
Error behavior
If a vocabulary entry is not found for FIRST, LAST, or FULL the request results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.




--------------------------------------------------


About the ITranslateGradeTypeForReplaceLineItemRequest interface

The ITranslateGradeTypeForReplaceLineItemRequest determines the grade type value for an outgoing replaceLineItem request, based on the incoming GradeType field off of the IReadGradesResult request object.
The interface implementation is D2L.IM.IPSIS.LIS.OMS.ITranslateGradeTypeForReplaceLineItemRequest.
The IPSIS, Default configuration lists for ITranslateReadResultsRequest interface are shipped with the product. They are listed along with the extension point they are intended for.
The ReplaceLineItemRequestGradeTypeTranslator is the default translator for the ITranslateGradeTypeForReplaceLineItemRequest interface.
            ReplaceLineItemRequestGradeTypeTranslator
The ReplaceLineItemRequestGradeTypeTranslator determines the grade type value for an outgoing replaceLineItem request, based on the incoming GradeType field off of the IReadGradesResult request object.
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.OMS.Default.ReplaceLineItemRequestGradeTypeTranslator
Expected behavior
The translator performs the following the tasks:
The incoming grade type is obtained from the GradeType field off of the IReadGradesResult request object.
If the type is either FinalAdjusted or FinalCalculated, the translator sets the result to Final. Otherwise, the result is the empty string.
Returns True.




--------------------------------------------------


Using LIS handlers

The LIS Adapter implements handlers that are used by IPSIS to initiate calls to LIS services hosted by the SIS. Each of these handlers are specific to LIS, but use an IPSIS Platform handler interface.
About the IBulkCancelRequestHandler interface
The plug-in interface for IBulkCancelRequestHandler is used by BulkManager to support producing a cancelBulkDataExchange or ignoreBulkDataExchange request.
The interface implementation is D2L.IM.IPSIS.Bulk.Handlers.IBulkCancelRequestHandler.
The following configuration list provides a starting point for any LIS implementation:
Template - Bulk Cancel (LIS)
D2L.IM.IPSIS.LIS.BDEMS.Default.CancelBulkDataExchangeHandler (Sort Order = 10)
CancelBulkDataExchangeHandler
Implementation
D2L.IM.IPSIS.LIS.BDEMS.Default.CancelBulkDataExchangeHandler
Expected behavior
The handler performs the following tasks:
Checks the BulkJobStatus of the IBulkCancelRequest object to determine whether to call cancelBulkDataExchange or ignoreBulkDataExchange (via the proxy client).
If (BulkRequested || BulkRequestSent), the handler calls cancel. Otherwise the handler calls ignore.
Sends the appropriate request (Cancel or Ignore).
Verifies that the response is a success. If the response is not a success, the handler updates the status of the bulk job to Error.
Takes the source system out of BulkMode (set to Enabled).
About the IBulkFileProcessor interface
The plug-in interface for IBulkFileProcessor is used by BulkManager to parse a received bulk file, pass individual requests to the adapters for processing, and pass results to a report generator.
The interface implementation is D2L.IM.IPSIS.Bulk.Handlers.IBulkFileProcessor.
The following configuration list provides a starting point for any LIS implementation:
Template - Bulk File Processor (LIS)
D2L.IM.IPSIS.LIS.BDEMS.Default.BulkFileProcessor (Sort Order = 10)
BulkFileProcessor
The BulkFileProcessor parses and processes a single input file, passing the results to a report generator.
Implementation
D2L.IM.IPSIS.LIS.BDEMS.Default.BulkFileProcessor
Expected behavior
The handler performs the following tasks:
The BulkFileProcessor runs after the file is downloaded locally, and is passed in an IBulkFileUrl with the file location.
If the passed result object or the ReportGenerator are null, instances are created during preProcessing.
At the start of processing, the file status is updated to Processing. The file is parsed as a stream, not as a single XML document. Not parsing the entire file at once saves memory and processing power.If a file is partially processed and an error is discovered, D2L does not roll back already processed transactions.
The BDEMS headers are parsed using custom code, and are not auto-generated.
Once the type of transaction is identified, the transaction body is forced into the namespace for the real-time version and deserialized using auto-generated proxy code.
The deserialized message is wrapped in fake headers and passed to the adapters for the real-time service.
The results are passed to the reportGenerator.
The file status is updated to Completed.
Error behavior
If an error occurs while processing a transaction, using a real-time adapter:The fail code is saved in the reportGenerator normally.Processing continues with next transaction.
If an error occurs in FileProcessor itself:An error is logged to the database.The processor sets file status to Failed.Immediately returns (with return code = false), without processing any further entries.
Logging
Debug log every time PreProcess creates a missing object on the request.
Debug log at start and end of main processing.
Debug once per transaction.
Error logs on any exception raised during processing.
About the IBulkRequestDataHandler interface
The plug-in interface for IBulkRequestDataHandler is used by BulkManager to support producing a requestBulkDataExchange request.
The interface implementation is D2L.IM.IPSIS.Bulk.Handlers.IBulkRequestDataHandler.
The following configuration list provides a starting point for any LIS implementation:
Template - Bulk Request (LIS)
D2L.IM.IPSIS.LIS.BDEMS.Default.RequestBulkDataExchangeHandler (Sort Order = 10)
RequestBulkDataExchangeHandler
Implementation
D2L.IM.IPSIS.LIS.BDEMS.Default.RequestBulkDataExchangeHandler
Expected behavior
The handler performs the following tasks:
Validates the endpoint and sets up the client.
Checks the BulkEntityTypeFilters on the incoming request, and adds a FilterRuleType for each to the outgoing request.
If any of the EntityTypes do not match the FilterType vocabulary for bulk (see the BDEMS spec for the vocabulary definition) the handler throws a KeyNotFoundException.
Validates that the save point is of the correct format as defined by the spec. All passed endpoints must be identical, and of the format "YYYY-MM-DDTHH:MM:SS.NNN". T is the letter T and NNN is the milliseconds.If either of these conditions fail, the handler throws an InvalidRequestDataException.
Adds a FilterRuleType to the outgoing request for the savepoint.
Sends the requestBulkDataExchange request using the client and examines the response.If the response back is a success, the handler puts the source system in BulkMode (if it wasn't already). Return true.If the response back is an error, the handler take the source system out of BulkMode. The status of the job is updated to Error and the error is logged. Return false.
About the IBulkSendReportHandler interface
The plug-in interface for IBulkSendReportHandler is used by BulkManager to support producing a reportBulkDataExchange request.
The interface implementation is D2L.IM.IPSIS.Bulk.Handlers.IBulkSendReportHandler.
The following configuration list provides a starting point for any LIS implementation:
Template - Bulk Report (LIS) 
D2L.IM.IPSIS.LIS.BDEMS.Default.ReportBulkDataExchangeHandler (Sort Order = 10)
ReportBulkDataExchangeHandler
Implementation
D2L.IM.IPSIS.LIS.BDEMS.Default.ReportBulkDataExchangeHandler
Expected behavior
The handler performs the following tasks:
Validates the endpoint and sets up the client.
Gets the BulkBlockReportType from the report generator.
If the report is null, a basic report that satisfies the minimum requirements for the LIS specification is created and used, and an error is logged.
The handler creates the reportBulkDataExchangeRequest using the report.
The reportBulkDataExchangeRequest is sent via the client.
The response is examined.
If the response is a success, return true.
If the response back is an error, the status of the job is updated to Error and the error is logged. Return false.
The source system is taken out of BulkMode.
About the IPushGradesHandler interface
The plug-in interface for IPushGradesHandler is used by IpsisManager to support the process of pushing grades to an SIS using the following requests: replaceLineItem and replaceResultsForLineItem.
The interface implementation is D2L.IM.IPSIS.Grades.Handlers.IPushGradesHandler.
The following configuration list provides a starting point for any LIS implementation:
Template - Outcome Replace (LIS) 
D2L.IM.IPSIS.LIS.OMS.Default.ReplaceLineItemHandler (Sort Order = 10)
ReplaceLineItemHandler
Implementation
D2L.IM.IPSIS.LIS.OMS.Default.ReplaceLineItemHandler
Expected behavior
The handler performs the following tasks:
Validates the outcomes endpoint and sets up the two clients responsible for sending the requests.LineItemManagerSyncPortTypeClient - Outcome endpoint must be used for the LineItemManagerSyncPortTypeClient.ResultManagerSyncPortTypeClient - Outcome2 endpoint must be used for the ResultManagerSyncPortTypeClient.
The handler gets the necessary information for sending the replaceLineItem request.This information comes from the IReplaceGradesRequest and is used to obtain:lineItemSourcedIdsisOrgUnitIdentifierorgUnitType (e.g. CourseSection)lineItemTypeVocabularylineItemTypeLanguagegradeType (e.g. Final)
The handler sends the replaceLineItem request using the LineItemManagerSyncPortTypeClient.
The handler gets the result record set using the ITranslateReadResultIdsForLineItemWithLineItemTypeResponse translators, and the ReadGradesResult off of the IReplaceGradesRequest.
The replaceResultsForLineItem request is sent using the ResultManagerSyncPortTypeClient, passing the result record set obtained in the previous step
The handler gets the result status codes from the response for the replaceResultsForLineItem request.
The handler sets the result status codes on the IReplaceGradesResult to the codes obtained in the previous step.
Returns true.
Error behavior
If communication with the SIS fails (e.g. network failure, timeout, etc.), the handler retries up to three times. The following behavior applies to retry attempts:
A warning is logged before re-trying
An error is logged if communication fails after three retry attempts
A slight delay is put in between tries:5 seconds the first time10 seconds the second time15 seconds the last time
Retries only occur on CommunicationExceptions and TimeoutExceptions. Other exceptions fail as an error.
Otherwise, if there is a problem during processing, an exception is thrown, along with as much detailed information as possible.



--------------------------------------------------


About the ITranslateReadSectionAssociationResponse interface

The ITranslateReadSectionAssociationResponse interface is used to translate a Brightspace Section Association into an LIS Section Association record.
The interface implementation is D2L.IM.IPSIS.LIS.CMS.ITranslateReadSectionAssociationResponse.
The Template, IPSIS configuration list provides a starting point for any LIS implementation.
The ReadSectionAssociationResponseSourcedGuidRequiredTranslator (Sort Order = 10) handler list is used as a starting point.
            ReadSectionAssociationResponseSourcedGuidRequiredTranslator
Implementation
D2L.IM.IPSIS.LIS.ResultAdapters.CMS.Default.ReadSectionAssociationResponseSourcedGuidRequiredTranslator
Expected behavior
This translator initializes the results object and sets the minimum required fields in the response.

ExternalOrgUnitInfo


LIS Mapping


IMOrgUnitIdentifier


result.sourcedGUID





--------------------------------------------------


Using LIS resolvers

The IResolveVocabLanguage interface
Interface location
D2L.IM.IPSIS.LIS.IResolveVocabLanguage
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.Vocab.Default.VocabDefaultLanguageResolver
Description
This plug-in is configured for the case when a client sends a generic language code (ex. en or fr) with a request.
Currently, the provided vocabularies only support fully qualified language codes (ex. en-US, en-CA, fr-CA).
This resolver is a plug-in that allows us to specify a default language code to use given generic language code. The resolver is configured by specifying valid XML in the Settings field when managing a plug-in.
The format of the XML must be as follows:
 <language>
  <en>en-US</en>
  <fr>fr-CA</en>
  ...
  </language> 
There must be an overall tag (in this case, language) and the child tags represent the matching values. The element name is the generic language code (ex. en) and the element value is the qualified language code (ex. en-US). Please note that the overall tag can be any value (it doesn't have to be language). There needs to be a parent tag that wraps the elements that match the language codes.



--------------------------------------------------


About the ITranslatePerson interface

About the ITranslatePerson interface
The ITranslatePerson interface is used to translate LIS Person Requests into a Brightspace IPSIS UserObject.
The interface implementation is D2L.IM.IPSIS.LIS.PMS.ITranslatePerson.
The following configuration list provides a starting point for any implementation:
Template, IPSIS
PersonRequestBaseTranslator (Sort Order = 10)
PersonRequestFirstAndLastNameRequiredTranslator (Sort Order = 20)
PersonRequestInstitutionRoleOptionalTranslator (Sort Order = 30)
PersonRequestEmailPrimaryOptionalTranslator (Sort Order = 40)
PersonRequestFirstUserIdAndPasswordOptionalTranslator (Sort Order = 50)
PersonRequestBaseTranslator
The PersonRequestBaseTranslator requires and maps the person identifier.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.PMS.Default.PersonRequestBaseTranslator
Expected behavior
The translator performs the following tasks:
Sets the OrgDefinedId to the value provided in the sourcedGUID.sourcedid.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


OrgDefinedId


result.Entity.OrgDefinedId


sourcedGUID.sourcedId

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator (or an alternative Base translator) must be configured first in the list of translators.
PersonRequestIsActiveTranslator
The PersonRequestIsActiveTranslator sets the user's status based on the field value.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.PMS.Default.PersonRequestIsActiveTranslator
Expected behavior
The translator performs the following tasks:
Reads the LIS message for extension fields where the fieldName = "IsActive".
The field value must either be 0 or 1, or true or false.
Processing continues to the next translator (Return True).

Property


Translation Result Object


LIS Request Mapping


Status


result.Entity.Status 


extension.extensionField.fieldValue[IsActive]

Error behavior
No errors are thrown for this translator.
Configuration note
This translator must be configured anywhere after the PersonRequestBaseTranslator.
PersonRequestFirstAndLastNameRequiredTranslator
The PersonRequestFirstAndLastNameRequiredTranslator requires and maps first and last names.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.PMS.Default.PersonRequestFirstAndLastNameRequiredTranslator
Expected behavior
The translator performs the following tasks:
Attempts to populate the First Name based on the following vocabulary matches:If name.nameType.instanceName.textString = (Contact or Full)and name.partName.instanceName.textString = (First or Given)
Attempts to populate the Last Name based on the following vocabulary matches:If name.nameType.instanceName.textString = (Contact or Full)and name.partName.instanceName.textString = (Last, Family, or Surname)
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


First Name


result.Entity.FirstName


person.name.partName.instanceValue.textString
when person.name.partName.instanceName.textString = (First or Given)


Last Name


result.Entity.LastName


person.name.partName.instanceValue.textString
when person.name.partName.instanceName.textString = (Last, Family or Surname)

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
PersonRequestInstitutionRoleOptionalTranslator
The PersonRequestInstitutionRoleOptionalTranslator attempts to map a role and primary role property.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.PMS.Default.PersonRequestInstitutionRoleOptionalTranslator
Expected behavior
The translator performs the following tasks:
Adds the roles from the institutionRole elements to the result role list.
If an institutionRole value is indicated as a primaryroletype, the role is used as the primary role.
If a role is not provided, processing moves to the next translator.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Roles	


result.SISRoles(*).Name


person.roles.institutionRole(*).institutionroletype.instanceValue.textString


Primary Role


result.SISRoles(*).Primary


person.roles.institutionRole(*).institutionroletype.instanceValue.textString
when person.roles.institutionRole(*).primaryroletype = true

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
PersonRequestEmailPrimaryOptionalTranslator
The PersonRequestEmailPrimaryOptionalTranslator attempts to map an email address.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.PMS.Default.PersonRequestEmailPrimaryOptionalTranslator
Expected behavior
The translator performs the following tasks:
If an email address has not already been set up, the translator uses vocabulary and gets the first EmailPrimary value found.
Processing continues to the next translator.

Property	


Translation Result Object


LIS Request Mapping


Roles


result.Entity.ExternalEmail


person.contactinfo.contactInfoValue.textString
when person.contactinfo.contactInfoType.instanceValue.textString = EmailPrimary

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
PersonRequestFirstUserIdAndPasswordOptionalTranslator
The PersonRequestFirstUserIdAndPasswordOptionalTranslator attempts to map the userid and password.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.PMS.Default.PersonRequestFirstUserIdAndPasswordOptionalTranslator
Expected behavior
The translator performs the following tasks:
The user name is populated from the userId if it was provided.
If a user name is provided, the password is populated.
If a password encryption type was provided, the password encryption is populated.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Username


result.Entity.Username.value


person.userId.userIdValue.textString


UserIdType


result.Entity.UserIdType


person.userId.userIdType.textString


Password


result.Entity.Username.Password.Value


person.userId.password.textString


EncryptionMethod	


result.Entity.EncryptionMethod	


person.userId.pwEncryptionType.textString


Authentication Type


result.Username.AuthenticationType


person.userId.authenticationType.textString

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:
CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
PersonRequestSystemRoleOptionalTranslator
The PersonRequestSystemRoleOptionalTranslator attempts to map the system role.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.PMS.Default.PersonRequestSystemRoleOptionalTranslator
Expected behavior
Adds the role from the system elements to the result role list.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Roles


result.SISRoles(*).Name


person.roles.systemRole.instanceValue.textString

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
PersonRequestEmailSecondaryOptionalTranslator
The PersonRequestEmailSecondaryOptionalTranslator attempts to map an email address based on the secondary emails in the message if an email hasn't already been set.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.PMS.Default.PersonRequestEmailSecondaryOptionalTranslator
Expected behavior
If an email address has not already been set, use vocabulary and get the first EmailSecondary value found.
Processing continues to the next translator.

Property


Translation Result Object


LIS Request Mapping


Roles


result.Entity.ExternalEmail


person.contactinfo.contactInfoValue.textString
when person.contactinfo.contactInfoType.instanceValue.textString = EmailSecondary

Error behavior
If there is a problem during processing, an IncompleteRequestException is thrown. This results in:
The suspension of all further processing.
A LIS response header containing:CodeMajor = failure.Severity = status.CodeMinor = invaliddata.
Configuration note
This translator can be positioned anywhere after the Base translator.
PersonRequestCreateRecordFromSourcedIdRequiredTranslator
The PersonRequestCreateRecordFromSourcedIdRequiredTranslator creates a valid person request if all that was passed in was the sourcedId.
Implementation
D2L.IM.IPSIS.LIS.RequestAdapters.PMS.Default.PersonRequestCreateRecordFromSourcedIdRequiredTranslator
Expected behavior
The translator performs the following tasks:
If a valid person record does not exist on the request, the translator builds out a dummy person request, using the sourcedId for the first name, last name, and user id.
Processing continues to the next translator.
Configuration notes
This translator must be positioned directly after the Base translator.
This translator is used only when it is expected that insufficient information is received from the SIS to build out a person in Brightspace.




--------------------------------------------------


LIS configuration checklist

Configuration checklist

Step


Role


Action


1


D2L consultant
Organization system administrator


Configure IPSIS Platform


2


D2L consultant


Enable the IPSIS LIS v2.0 Adapter Tool


3


Organization system administrator
D2L consultant


Configure LIS endpoints


4


Organization system administrator
D2L consultant


Configure org unit type mappings specific to LIS


5


Organization system administrator
D2L consultant


Configure LIS translators


6


Organization system administrator
D2L consultant


Configure LIS handlers


7


Organization system administrator
D2L consultant


Configure LIS bulk integration


8


D2L consultant


Set up LIS config variables





--------------------------------------------------


Configure LIS endpoints

A LIS endpoint describes how IPSIS obtains services and data from a SIS supporting the IMS Global LIS v2.0 messaging standard. For most LIS operations and LIS-supported SIS vendors, endpoint information is not part of its communication with IPSIS, and the endpoint must be configured manually.
            Add an endpoint
On the Configuration page, click the source system name that you want to configure the endpoint for.
Click Add Endpoint.
From the Endpoint Type drop-down list, select one of the following end-point types:Bulk endpoint - Defines the URL and credentials for where the SIS can be contacted by IPSIS to initiate and report bulk data exchanges. Without a bulk endpoint, an administrator cannot initiate a batch process from the Dashboard.Outcome endpoint - Defines the URL and credentials for where the SIS can be contacted by IPSIS to exchange learner grade information. An Outcome endpoint is needed by institutions wishing to export grades in either a push by IPSIS to the SIS or a pull by the SIS from the LMS (IPSIS).Outcome 2 endpoint - Needed for exporting (pushing) grades, and although it would typically have the same URL and credentials as the outcome endpoint, it may optionally have a different URL if the SIS requires IPSIS to call a different web service in the second stage of the grades exchange.Bulk File Download endpoint - Needed if credentials are required to download bulk files, and the credentials are not provided as part of the communication with the SIS.
In the Address field, enter the URL where the SIS services the requests of the specified endpoint type.
From the Authentication Type drop-down list, select an authentication type. Choose the authentication type required by the SIS endpoint.WS-Security - This option is a security extension designed to help secure web service communication using SOAP.Basic Auth - This option is a simple web-based authentication scheme that works by sending the username and password with each request to the SIS.
Enter a username and password. These should match what is required by the SIS endpoint.
From the Default Vocabulary drop-down list, select a vocabulary.
From the Default Language drop-down list, select a language.
Click Save.
            Bulk endpoint configurations
The following bulk endpoint configurations are used by LIS 2.0 configurations to import SIS data into Brightspace and export grades to the SIS:
SIS Reference IdRequired by the SIS to identify Brightspace when sending bulk or grades messages
Bulk Data ExchangeEndpoint URL where the SIS listens for confirmation that a bulk job has completedChoose the Authentication Type and enter valid credentials:WS SecurityBasic AuthIf the bulk request from the SIS does not contain the login credentials, the user can specify the partial or complete file path and retrieve credentials
            When to configure Bulk File Download endpoints
You do need an endpoint of type Bulk File Download when downloading bulk files:
Via FTP and the FTP site credentials are not provided in the bulk download message.
Via HTTP or HTTPS and the web site requires Basic Authentication security access.
Via HTTP or HTTPS from a PeopleSoft PeopleTools Java Servlet which requires PeopleSoft-specific user credentials, which are not provided in bulk download message.
You do not need a Bulk File Download endpoint when downloading bulk files:
Via FTP and the URL and credentials are provided by the SIS in the bulk download message.
Via HTTP or HTTPS and authentication credentials are not required to access the download file web site (anonymous authentication accepted); this might be because IP filtering has been setup to establish restricted server-to-server access.
            Handlers for different bulk file download methods
IPSIS platform handlers do the job of initializing a connection and performing the actual bulk file download. Depending on how bulk files are to be downloaded, the appropriate set of handlers should be configured. Refer to the lists below and ensure the handlers are configured as noted for the D2L.IM.IPSIS.Bulk.Handlers.IBulkFileRetrieverHandler extension point.
FTP (credentials supplied in bulk download messages)
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverSetLocalPathToD2LTempHandler
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverUriHandler
FTP (credentials missing from bulk download messages)
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverSetLocalPathToD2LTempHandler
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverRetrieveAuthenticationCredientialsHandler
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverUriHandler
HTTP or HTTPS without authentication (endpoint not defined)
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverSetLocalPathToD2LTempHandler
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverUriHandler
HTTP or HTTPS with Basic Authentication
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverSetLocalPathToD2LTempHandler
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverRetrieveAuthenticationCredientialsHandler
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverUriHandler
HTTP or HTTPS with Basic Authentication from the PeopleSoft PeopleTools Java Servlet
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverSetLocalPathToD2LTempHandler
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverRetrieveAuthenticationCredientialsHandler
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverPeopleSoftHandler
Note: Credentials defined in the endpoint must match an appropriate PeopleSoft user.
 



--------------------------------------------------


Configure LIS translators, handlers, and bulk integration

Configure LIS translators
The extension points for each of the LIS translators should be reviewed to determine if the available configuration is appropriate, or if modifications are required. Modifications can and should be made to ensure your organization can have the configuration most appropriate for it.
Note: Care should be taken when configuring translators (plug-ins). When configured incorrectly, data loss might occur. Always consult your D2L Integration Consultant before making changes.
Configure LIS handlers
The extension point for each LIS handler should be reviewed to determine if the configuration is appropriate, or if modifications are required. Modifications can and should be made to ensure the organization has the configuration most appropriate for it.
Refer to LIS configuration checklist for a complete list of the handler interfaces that should be configured.
Note: Care should be taken when configuring translators (plug-ins). When configured incorrectly, data loss may occur. Always consult your D2L Integration Consultant before making changes.
Configure LIS bulk integration
Bulk integration requires the configuration of endpoints for communicating messages, and, optionally, for downloading bulk files.
Instructions on how to configure endpoints, including for downloading bulk files, specific to LIS, are found under Configure  LIS endpoints.



--------------------------------------------------


Configure org unit type mapping specific to LIS

An org unit type mapping is required so that IPSIS knows how to interpret messages of a particular type from a source system. For example, a SIS might communicate messages about Faculties, but IPSIS should interpret those as Departments in Brightspace. 
An administrator must coordinate with the source system vendor to obtain the org unit type text strings communicated to IPSIS in its messages. The text strings might depend on the source system vendor or on how the source system is configured.
Several org unit types are not communicated within messages. Learning Information Services (LIS) v2.0 does not include org unit type information in four of the message types (course templates, offerings, sections, and section associations). This doesn't mean, however, that org unit type mappings are not required for LIS v2.0 integrations. An organization might want, for example, for IPSIS to understand course offering messages from the SIS as course sections in Brightspace. Or perhaps the organization isn't using course sections, but the SIS sends course section messages to IPSIS; in this case, the organization wants the SIS course sections to be created as course offerings in Brightspace.
Because IPSIS needs to know how to map SIS messages of a particular type to Brightspace org unit types, and because LIS v2.0 excludes org unit type information from several messages, the IPSIS LIS v2.0 adapter looks for mappings with specific SIS Org Unit types. A misspelling in the SIS Org Unit type would mean the IPSIS LIS V2.0 adapter would not find the mapping.
The adapter recognizes mappings with specific spelling of the following SIS Org Unit types:
CourseTemplate
CourseOffering
CourseSection
SectionAssociation
            When to create a Course Template mapping
When to create a mapping:
You want to make use of templates, have them as parents to course offerings, and show that relationship in Brightspace.
Your SIS sends course template message to IPSIS (via LIS replaceCourseTemplate).
Your SIS sends messages to IPSIS that you want to interpret as course templates (via LIS replaceGroup).
When not to create a mapping:
You do not use course templates and do not want them created in Brightspace.
            When to create Course Offering mapping
When to create a mapping:
Since the course offering is the most basic and important org unit type for Brightspace, you should always create a course offering mapping.
When not to create a mapping:
The only time to not create a mapping is during initial setup of the integration; not having a mapping limits the number of system changes, which helps to verify results.
            When to create a Course Section mapping
A course section is a special category of the Group org unit type. Course section doesn't appear as a type of org unit in the Brightspace Org Unit Type drop-down. All Brightspace groups belong to a group category. Sections within an offering, while not visibly being associated with a category, are part of a hidden category called Section.
When to create a mapping:
You want to make use of sections or groups within offerings in the Brightspace.
Your SIS sends course section message to IPSIS (via LIS replaceCourseSection).
You want to make use of groups, and the SIS sends messages to IPSIS (via replaceCourseSection) that you want to interpret as course groups.
Note: Brightspace supports the creation and use of both groups and sections within a course offering. However, IPSIS can create one type or the other, not both at the same time via replaceCourseSection.
When not to create a mapping:
You do not use course sections or groups within course offerings and do not want them created in Brightspace.
            When to create a Section Association mapping
A section association isn't a Brightspace org unit type, but an entity type under LIS. This type relates one or more sections together into an entity called a section association. In Brightspace, the closest entity that relates sections together is a course offering.
Depending on your SIS, it might not have a direct understanding of course sections. Consequently, each time it creates a section in the Brightspace via LIS, it also creates a course offering. This means that for every section, there is a unique offering, and no offering has more than one section. In practice, however, you often want a course offering divided into multiple sections. The SIS may communicate the relationship between its courses via LIS using section associations (replaceSectionAssociation).
Note: The LIS section association does not contain real course or section information. It only serves to relate sections together and org unit type mappings for course sections and offerings are still required. The SIS would pass the section/offering information to Brightspace so they first exist in the Brightspace prior to relating them with section associations.
When IPSIS receives a section association, it creates a new org unit and then creates the sections identified in the request to the new org unit based on the referenced sections. The most appropriate type of org unit that IPSIS would create is a course offering.
Note: The Section Association request does not include start or end dates for the new course offering. By default, Brightspace’s LIS 2.0 uses start and end dates from merged course offerings. The oldest start date and latest end date are used for the newly created course offering.
Original course offerings (created via replaceCourseOffering) and what would appear to be duplicate course offerings (created via replaceSectionAssociation) show up, and it is recommended that instructors manage which course offerings are visible to their learners either by inactivating course offerings, or adjusting their availability dates.
When to create a mapping:
You create associations in your SIS and want them reflected in Brightspace.
When not to create a mapping:
Your SIS may not support section associations.
You want to manage associations entirely from within Brightspace (IPSIS Section Association tool)
            When to create another org unit type mapping
Often organizations want to synchronize entities such as Departments and Semesters between their SIS and Brightspace. Any custom, organization-defined org unit type appears in the Brightspace Org Unit Type drop-down and can be used in a mapping.
In the LIS, creates, updates, and deletes for entities other than course templates, offerings, sections, associations, enrollments, and people is done through replaceGroup and deleteGroup. The essential part of the mapping is the exact text string sent by the SIS when communicating about a particular type of org unit.
Other types of groups that can be integrated with the Brightspace might include: College, Faculty, or School.
When to create a mapping:
You want to have groups of different types created in the Brightspace and managed through LIS.
Your SIS sends group messages to IPSIS (via LIS replaceGroup).
When not to create a mapping:
You have no need to keep org units other than those for courses in sync between the Brightspace and SIS.
You intend to manually manage both non-course-related org unit types and the relationships between them and courses.




--------------------------------------------------


LIS configuration variables

LIS configuration variables

Variable


Type


Default Value


Description


d2l.Integrations.IPSIS.LIS.DefaultLanguage


Org


en-US


The default language used in any LIS Responses that require a Language Code. This config is not editable by Org administrators or Installation administrators and should not be changed.


d2l.Integrations.IPSIS.LIS.DefaultVocabulary


Org


IMS Global


The default Vocabulary used in any LIS Responses that require a Language Code. This config is not editable by Org administrators or Installation administrators and should not be changed.


d2l.Integrations.IPSIS.LIS.ServiceRequestExpiry


Org


30


The default timeout for the remote service requests. This config is not editable by Org administrators or Installation administrators and should not be changed.





--------------------------------------------------


Using IPSIS handlers

An IPSIS handler is the implementation of one or more business rules that apply to data coming from the Student Information System. Each handler is an implementation of a specific handler interface, which is aligned with actions commonly applied to Learning Platform and Brightspace (ex. Create User or Delete Section). The use of IPSIS handler interfaces, and their configurable handlers enable institutions to obtain configurable flexibility in what the system does when a request is received from an external system.
To promote re-use of handlers as much as possible, handlers are implemented to do very specific tasks. Multiple handlers are then used in series to perform more complex tasks. In some cases, there might be many handlers in play, so it is useful to group handlers into different categories, serving specific purposes.
Handlers are implemented using IPSIS handler conventions, which helps organizations understand the many handler options that are available.
The IPSIS Platform defines a collection of handler interfaces that are specific to the types of actions on objects that are typically being sent from an SIS to Brightspace. Each interface has a set of handlers that implement the interface in order to apply a specific set of business rules for an organization. In some cases, there are not many handlers to choose from because the business rules are generic and re-usable; however, in many cases, there are a large number of handlers to choose from.
ReplaceUserUpdateAuditorsHandler
The ReplaceUserUpdateAuditorsHandler creates the auditor relationships if it doesn’t already exist in Brightspace.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserUpdateAuditorsHandler,D2L.IM.IPSIS.Default
Expected behavior
The handler performs the following tasks:
If the auditor that is declared in the XML already exists in Brightspace, the auditor/auditee relationship is created automatically in Brightspace
Missing relationships cause the system to delete the relationship in Brightspace
Processing proceeds to the next handler
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration
This should be placed after the Create handlers.
ReplaceCourseTemplateParentsNoUpdateLMSHandler
When a ReplaceTemplateRequest is processed through IPSIS, the ReplaceCourseTemplateParentsNoUpdateLMSHandler retrieves 
custom org units above the course template and preserves this relationship even if they were not created through IPSIS so that it is not overwritten by the update operation.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateParentsNoUpdate
LMSHandler
Expected behavior
The handler performs the following tasks:
The handler fetches all parents of the course template and updates the parent list
Processing proceeds to next handler
Error behavior
No errors are thrown in this handler
Configuration Node
This handler must occur after the Read and Validate handlers
This handler must occur before the Save handlers
 



--------------------------------------------------


About the IBulkAnnounceFailureRequest interface

The plug-in interface for IBulkAnnounceFailureRequestHandler is used by LISBulkDataExchangeManagementServices to support consuming an announceFailureBulkDataExchange request.
The interface implementation is D2L.IM.IPSIS.Bulk.Handlers.IBulkAnnounceFailureRequestHandler.
            AnnounceFailureBulkDataExchangeHandler
Implementation
D2L.IM.IPSIS.Default.Bulk.Handlers.AnnounceFailureBulkDataExchangeHandler
Expected behavior
The handler performs the following tasks:
Sets the status of the source system associated with the request to Enabled using IIPSISManager (takes the source system out of BulkMode).
Marks the BulkJob as canceled via the IBulkJobManager.
Sets the CancelledBy property of the job to the userId of the request.




--------------------------------------------------


About the IBulkCancelRequestHandler

The plug-in interface for IBulkCancelRequestHandler is used by BulkManager to support producing a cancelBulkDataExchange or ignoreBulkDataExchange request.
The interface implementation is D2L.IM.IPSIS.Bulk.Handlers.IBulkCancelRequestHandler.
The Template - Bulk Cancel (LIS) configuration list provides a starting point for any LIS implementation.
The D2L.IM.IPSIS.LIS.BDEMS.Default.CancelBulkDataExchangeHandler (Sort Order = 10) handler list is used as a starting point when you are integrating using LIS.
            CancelBulkDataExchangeHandler
Implementation
D2L.IM.IPSIS.LIS.BDEMS.Default.CancelBulkDataExchangeHandler
Expected behavior
The handler performs the following tasks:
Checks the BulkJobStatus of the IBulkCancelRequest object to determine whether to call cancelBulkDataExchange or ignoreBulkDataExchange (via the proxy client). If (BulkRequested || BulkRequestSent) then call cancel. Otherwise call ignore.
Sends the appropriate request (Cancel or Ignore).
Verifies that the response was a success. If the response was not a success, the handler updates the status of the bulk job to Error.
Take the source system out of BulkMode (set it to Enabled).




--------------------------------------------------


About the IBulkFileReadyRequestHandler interface

The plug-in interface for IBulkFileReadyRequestHandler is used create the bulk job and assign files to it so that processing can begin.
The interface implementation is D2L.IM.IPSIS.Bulk.Handlers.IBulkFileReadyRequestHandler.
The IPSIS, Template - Bulk Announce configuration lists provide a starting point for any IPSIS implementation.
The AnnounceBulkDataExchangeHandler (Sort Order = 10) handler is used as a starting point.
            AnnounceBulkDataExchangeHandler
Implementation
D2L.IM.IPSIS.Default.Bulk.Handlers.AnnounceBulkDataExchangeHandler
Expected behavior
The handler performs the following tasks:
Puts the source system in BulkMode (if it isn't already).
Checks to see if the job already exists (if the request was initiated from the SIS).
If the job already exists, the handler ensures that the status is BulkRequestSent (and throw an ArgumentException if it isn't).
Updates the existing job, for any of the fields that don't already have valid data populated.
Adds/updates the FileUrlParams and EntityTypeFilterParams.
Saves the job.
If the job does not already exist, creates, updates, and saves the bulk job.
Returns true and continues processing.




--------------------------------------------------


About the IBulkFileRetriever interface

The plug-in interface for IBulkFileRetriever is used by BulkManager to support the retrieval of bulk files on remote servers.
The interface implementation is D2L.IM.IPSIS.Bulk.Handlers.IBulkFileRetrieverHandler.
The following configuration list provides a starting point for any IPSIS implementation:
IPSIS, Template - Bulk File Retriever 
BulkFileRetrieverSetLocalPathToD2LTempHandler (SortOrder = 10)
BulkFileRetrieverUriHandler (SortOrder = 20)
            BulkFileRetrieverSetLocalPathToD2LTempHandler
Sets the local path to a unique directory in instance temp directory using the original filename from the request.
Implementation
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverSetLocalPathToD2LTempHandler
Expected behavior
The handler sets the local save path to {D2L instance temp directory}\{generated unique directory}\{filename defined in remotefileurl}.
Error behavior
If the local path does not exist, the handler throws an exception and inserts an error log into the database.
Configuration note
Since this handler sets the download path, it should be placed before a download handler (e.g. BulkFileRetrieverUriHandler or BulkFileRetrieverHttpsGetAcceptAllCertsHandler).
            BulkFileRetrieverUriHandler
This handler downloads files with URI's starting with http:, https:, ftp:, and file:.
Implementation
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverUriHandler
Expected behavior
The handler performs the following tasks:
Updates the status for the IBulkFileUrl to downloading.
Sets the username and password if one is passed for the URI.
Creates an URI connection that supports ftp, http, and https and file. This behavior assumes there is no authentication required for the connection if none is passed in the request. If a username and password are supplied in the request (they're populated by the BulkFileRetrieverRetrieveAuthenticationCredientialsHandler), the system uses BasicAuth to connect to the endpoint.
Downloads the file.
Updates the status for the IBulkFileUrl to downloaded.
Error behavior
If the local path does not exist, a Path does not exist exception is thrown and the handler inserts an error log into the logging database.
If an invalid username and password combination is received, an authentication exception is thrown and the handler inserts an error log into the logging database.
If the URL is unreachable, a URI format exception is thrown and the handler inserts an error log into the logging database.
If a timeout occurs, a timeout exception is thrown and the handler inserts an error log into the logging database.
Configuration notes
The BulkFileRetrieverUriHandler downloads the files, and as such should be placed after any handlers which configure the outgoing request (ex. adding credentials, setting the download directory, etc).
This handler should not be combined with any other handler responsible for file download (BulkFileRetrieverHttpsGetAcceptAllCertsHandler).
            BulkFileRetrieverHttpsGetAcceptAllCertsHandler
This handler downloads files that have a URI with a prefix of https, http, ftp, and file. If it is using SSL, it ignores all certificate errors. This is useful for things like self-signed certificates, that might only be used internally or in development environments.
Implementation
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverHttpsGetAcceptAllCertsHandler
Expected behavior
This is the concrete class that implements IBulkFileRetrieverHandler. The handler performs the following tasks:
The handler receives a IBulkFileRetriever request which contains a BulkFileUrl.
Updates the IBulkFileUrl status to Downloading.
This behavior assumes there is no authentication required for the connection if none is passed in the request.
Opens a https connection to the remote URL located in the IBulkFileUrl object and performs a GET request.
Downloads the file and saves it to the local save path.
Updates the file status to Downloaded.
Error behavior
If an invalid username and password combination is passed, an authentication exception is thrown and the handler inserts an error log into the logging database.
If the URL is unreachable, the handler throws an authentication exception and inserts an error log into the logging database.
If a timeout occurs, the handler throws a timeout exception and inserts an error log into the logging database.
Configuration notes
This handler actually downloads the files, and as such should be placed after any handlers which configure the outgoing request (i.e. adding credentials, setting the download directory, etc.).
This should not be combined with any other handler responsible for file download (BulkFileRetrieverHttpsGetAcceptAllCertsHandler).
            BulkFileRetrieverConfigVariableDefinedDownloadPathHandler
Sets the local path to a directory defined in the Config Variable Browser using the original filename from the request.
Implementation
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverConfigVariableDefinedDownloadPathHandler
Expected behavior
If the config variable is defined, the handler sets the local save path to {d2l.Integrations.IPSIS>LocalBulkFileDownloadPath}\{SystemId}.{TransactionId}\{filename defined in remotefileurl}.
The transactionId is stripped of any characters that aren't allowed in paths, and all '\' .
If the path does not exist, the system tries to create it first.
Error behavior
If the config variable is not defined, an exception is thrown.
Exceptions could also be thrown if, for example, the drive is invalid in the config variable.
Configuration note
First handler in the list replacing alternatives to defining the location for the file destination.
            BulkFileRetrieverRetrieveAuthenticationCredientialsHandler
Sets the username and password on the request based on the file URL and information in the endpoints table.
Implementation
D2L.IM.IPSIS.Default.Bulk.Handlers.BulkFileRetrieverRetrieveAuthenticationCredientialsHandler
Expected behavior
The handler performs the following tasks:
Grabs a list of endpoints marked under the type BulkFileDownload from the endpoint table.
If the remote file URL begins with any of those endpoints (e.g. "http://mysite.com/cookies/fun.xml" starts with "http://mysite.com"), the handler grabs the credentials from that endpoint entry, and applies them to the request.
If the remote url matches no endpoints the handler does nothing.
Known limitations
Because of schema constraints, the system currently supports only one BulkFileDownload endpoint per source system.
Error behavior
If the handler finds more than one endpoint which matches the remote url, it throws a BulkProcessingFailedException with a descriptive error message (including the file name that failed).
Configuration note
This handler should be placed before any handler which actually downloads the file.



--------------------------------------------------


About the IBulkRequestDataHandler interface

The plug-in interface for IBulkRequestDataHandler is used by BulkManager to support producing a requestBulkDataExchange request.
The interface implementation is D2L.IM.IPSIS.Bulk.Handlers.IBulkRequestDataHandler.
The following configuration list provides a starting point for any LIS implementation:
Template - Bulk Request (LIS) 
D2L.IM.IPSIS.LIS.BDEMS.Default.RequestBulkDataDefaultJobIdHandler (Sort Order = 10)
D2L.IM.IPSIS.LIS.BDEMS.Default.RequestBulkDataExchangeHandler (Sort Order = 20)
            RequestBulkDataExchangeHandler
Implementation
D2L.IM.IPSIS.LIS.BDEMS.Default.RequestBulkDataExchangeHandler
Expected behavior
The handler performs the following tasks:
Validates the endpoint and sets up the client.
Checks the BulkEntityTypeFilters on the incoming request, and adds a FilterRuleType for each to the outgoing request. If any of the EntityTypes do not match the FilterType vocabulary for bulk (see the BDEMS spec for the vocabulary definition) then the handler throws a KeyNotFoundException.
Validates that the save point is of the correct format as defined by the spec. All passed endpoints must be identical, and of the format "YYYY-MM-DDTHH:MM:SS.NNN". T is the letter T and NNN is the milliseconds. If either of these conditions fail, then the handler throws an InvalidRequestDataException.
Adds a FilterRuleType to the outgoing request for the savepoint.
Sends the requestBulkDataExchange request using the client.
Examines the response.
If the response back is a success, the handler puts the source system in BulkMode (if it wasn't already) and returns true.
If the response back is an error, the handler takes the source system out of BulkMode, updates the status of the job to Error, logs the error, and returns false.
            RequestBulkDataDefaultJobIdHandler
This handler adds extra information to the IMJobId, which is later used to set the MessageId, to make Bulk messages easier to track and troubleshoot.
Implementation
D2L.IM.IPSIS.LIS.BDEMS.Default.RequestBulkDataDefaultJobIdHandler
Expected behavior
If the BulkJob has an IMJobId, the handler concatenates the SIS Name for the source system onto the front of the IMJobId (prepend).
Configuration note
This handler should be configured before RequestBulkDataExchangeHandler.
            RequestBulkDataTruncateJobIdHandler
Peoplesoft does not handle Bulk messageIds that are more than 20 characters long. This handler truncates the IMJobId, which is later used to set the MessageId, to ensure that the value is as unique as possible, while staying within a 20-character limit.
Implementation
D2L.IM.IPSIS.LIS.BDEMS.Default.RequestBulkDataTruncateJobIdHandler
Expected behavior
If the BulkJob has an IMJobId, the handler strips out the hyphens from the IMJobId, then truncates the IMJobId to 20 characters.
Configuration notes
This handler should be configured before RequestBulkDataExchangeHandler.
This handler should only be used as a workaround to the Peoplesoft bug that restricts them to a 20-char maximum.




--------------------------------------------------


About the IBulkSendReportHandler interface

The plug-in interface for IBulkSendReportHandler is used by BulkManager to support producing a reportBulkDataExchange request.
The interface implementation is D2L.IM.IPSIS.Bulk.Handlers.IBulkSendReportHandler.
The Template - Bulk Report configuration list provides a starting point for any LIS implementation.
The D2L.IM.IPSIS.LIS.BDEMS.Default.ReportBulkDataExchangeHandler (Sort Order = 10) is used as a starting point when you are integrating using LIS.
            ReportBulkDataExchangeHandler
Implementation
D2L.IM.IPSIS.LIS.BDEMS.Default.ReportBulkDataExchangeHandler
Expected behavior
The handler performs the following tasks:
Validates the endpoint and setup the client.
Gets the BulkBlockReportType from the report generator. If the report is null, a basic report that satisfies the minimum requirements for the LIS specification is created and used, and an error is logged.
Creates the reportBulkDataExchangeRequest using the report.
Sends the reportBulkDataExchangeRequest via the client.
Examines the response. If the response back is a success, return true. If the response back was an error, the handler updates the status of the job to error, logs the error, and returns false.
Takes the source system out of BulkMode.




--------------------------------------------------


About the IDeleteCourseOffering Interface

Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.DeleteCourseSectionDeleteParentOfferingHandler
DeleteCourseSectionDeleteParentOfferingHandler
The DeleteCourseSectionDeleteParentOfferingHandler deletes the parent course offering if no other children exist.
Expected Behavior
	If the parent offering has more than one section, an info message is logged and the section is deleted/inactivated as usual.
Error Behavior
No errors should occur if the parent offering can't be deleted.
Configuration Note
This handler should be configured last (it's last in the Ellucian defaults in the new UI).



--------------------------------------------------


About the IDeleteCourseOfferingHandler interface

The plug-in interface for IDeleteCourseOfferingHandler is used by IPSIS Adapters to delete course offerings from Brightspace.
The interface implementation is D2L.IM.IPSIS.OrgUnits.CourseOfferings.Handlers.IDeleteCourseOfferingHandler.
The following configuration lists provide a starting point for any IPSIS implementation:
IPSIS, Template - Course Offering
DeleteCourseOfferingValidateHandler (Sort Order = 10)
DeleteCourseOfferingIMHandler (Sort Order = 10)
            DeleteCourseOfferingValidateHandler
This handler should always be used. It performs input validation that is needed to ensure that all the other Delete handlers perform properly.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.DeleteCourseOfferingValidateHandler
Expected behavior
The handler performs the following tasks:
Checks that the SIS Id on the request corresponds to a real item in the IM tables.
Checks that the OrgUnit Type that the service expects matches the Type of the orgUnit in the database.
If all checks pass, saves the ExternalOrgUnitInfo on the request for later handlers to use.
Error behavior
If any part of the validation fails, an exception is thrown, along with as much detailed information as possible.
Configuration note
The Validate handler should typically be run first in the list of handlers, before any handler that updates or deletes information from the database.
            DeleteCourseOfferingIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.DeleteCourseOfferingIMHandler
Expected behavior
If there is anything dependent on the course offering (IM Hierarchy children) this process must fail. The handler performs the following tasks:
Does a soft-delete of the course offering from the IPSIS tables if there is nothing dependent on the course offering.
Removes all IM Hierarchy parent relationships for this offering.
Sets the status of the result is set to EntityDeleted.
Processing continues to the next configured handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
The Delete IM handler should typically be run last in the list of handlers.
            DeleteCourseOfferingDeleteLEHandler
This handler is used if the desired behavior is to have all mapped Brightspace offerings deleted.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.DeleteCourseOfferingDeleteLEHandler
Expected Behavior
For each mapped Brightspace course offering, the handler performs the following tasks:
Deletes the course offering (automatically resulting in an audit entry).
Marks all mappings to Brightspace course offering as deleted.
Sets the status of the result to EntityDeleted.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This must occur before the IM table delete (example: DeleteCourseOfferingIMHandler).
This handler would not be configured at the same time as DeleteCourseOfferingInactiveLEHandler.
            DeleteCourseOfferingCascadeDeleteCourseSectionHandler
This handler is used if the desired behavior is to cascade the delete for the course offering to all sections that are children of the course offering in the IM tables.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.DeleteCourseOfferingCascadeDeleteCourseSectionHandler
Expected behavior
The handler performs the following tasks:
Identifies all sections that are children of an offering in the IM tables.
For each section, the handler sends a DeleteCourseSection using the current list of handlers for IDeleteCourseSectionHandler.
If at least one section is deleted, the handler changes the result status to EntityDeleted.
Processing continues to the next configured handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This must occur before the course offering is deleted in either the Brightspace or IM tables (ie: DeleteCourseOfferingIMHandler, DeleteCourseOfferingDeleteLEHandler, DeleteCourseOfferingInactiveLEHandler)
This handler does not function properly unless every further configured DeleteCourseOffering handler has a matching DeleteCourseSection handler configured. For example, if using DeleteCourseOfferingCascadeDeleteCourseSectionHandler and DeleteCourseOfferingIMHandler, then DeleteCourseSectionIMHandler must also be used.




--------------------------------------------------


About the IReadCourseOfferingHandler interface

The plug-in interface for IReadCourseOfferingHandler is used by IPSIS adapters to support the read operation for Course Offerings.
The interface implementation is D2L.IM.IPSIS.OrgUnits.CourseOfferings.Handlers.IReadCourseOfferingHandler.
The following configuration lists provide a starting point for any IPSIS implementation:
IPSIS, Template - Course Offering
ReadCourseOfferingIMHandler (Sort Order = 10)
ReadCourseOfferingValidateHandler (Sort Order = 20)
            ReadCourseOfferingIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReadCourseOfferingIMHandler
Expected behavior
Attempts to read all information stored in the IM tables for the requested offering.
Configuration note
This handler should be configured at the beginning of the list, before any Validate handlers.
            ReadCourseValidateHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReadCourseOfferingValidateHandler
Expected behavior
The handler performs the following tasks:
Checks the type of any previously retrieved OrgUnit information.
If it does not match the expected OrgUnit type (Offering), then an exception is thrown.
Configuration note
This handler should be configured after the ReadIM handler.



--------------------------------------------------


About the IReplaceCourseOfferingHandler interface

The plug-in interface for IReplaceCourseOfferingHandler is used by IPSIS Adapters to support the replace operation for course offerings.
The interface implementation is D2L.IM.IPSIS.OrgUnits.CourseOfferings.Handlers.IReplaceCourseOfferingHandler.
The following configuration lists for the ReplaceCourseOfferingHandler Interface are shipped with the product. They are listed along with the extension point they are intended for.
IPSIS, Template - Course Offering
ReplaceCourseOfferingReadHandler (Sort Order = 10)
ReplaceCourseOfferingValidateHandler (Sort Order = 20)
ReplaceCourseOfferingDisallowParentChangesIfChildrenExistHandler (Sort Order = 30)
ReplaceCourseOfferingTemplateUpdateDepartmentsLMSHandler (Sort Order = 40)
ReplaceCourseOfferingCreateLMSHandler (Sort Order = 50)
ReplaceCourseOfferingCreateIMHandler (Sort Order = 60)
ReplaceCourseOfferingSaveLMSHandler (Sort Order = 70)
ReplaceCourseOfferingSaveIMHandler (Sort Order = 80)
            ReplaceCourseOfferingCopyCourseHandler
The ReplaceCourseOfferingCopyCourseHandler configures the system to automatically copy course content from a source course into a newly created course offering using the IPSIS platform.
Implementation
D2l.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingCopyCourseHandler.
Expected behavior
The handler performs the following tasks by searching for the org unit from which to copy content:
If implicit course copy is enabled through the UI, attempts to find the org unit to copy from by copying from a parent template or a sibling course offering that has an OrgUnit Code matching the template OrgUnit Code.
If explicit course copy is used, looks for “CopyCourseSourceExternalId”, “CopyCourseParent”, “CoupCourseSourceOrgUnitId”, or “CopyCourseSourceOrgUnitCode” extension fields.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
If you manually configure the ReplaceCourseOfferingHandler list, place this handler last.
            ReplaceCourseOfferingReadHandler
The ReplaceCourseOfferingReadHandler reads all information related to the course offering that exists in Brightspace or IM tables of the database to be used in further handlers.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingReadHandler
Expected behavior
The handler performs the following tasks:
Attempts to read information about the course offering from the IM tables.
If found, attempts to read any mappings to Brightspace for the course offering.
If found, attempts to read about the course offering from Brightspace.
Checks to see if any parents (Semester, Template, or Department) were specified in the request.
If specified, the handler attempts to retrieve mappings and OrgUnit details for each specified parent, placing them in request.ParentOrgUnits.
If a parent SIS Id maps to multiple D2L OrgUnits, then only the first Semester or Template will be used for each SIS Id.
If a parent was specified but it doesn't exist in the database, the underlying DataProvider throws an OrgUnitMappingNotFoundException, which is caught and logged.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
A Read handler should occur before Validate handlers.
            ReplaceCourseOfferingValidateHandler
This handler ensures that a valid code and name are assigned to the course offering and that a valid template exists.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingValidateHandler
Expected behavior
The handler performs the following tasks:
Checks to ensure that both a code and name are specified for the request. These values must be strings of length greater than 0.
If either the code or the name are null or empty, the handler throws an ArgumentNullException and all handler processing stops.
At least one parent template must be present in request.ParentOrgUnits. If no template parents are found, a ParentNotFoundException is thrown and all handler processing stops.
If everything is successful, processing continues to the next handler (Return True).
            ReplaceCourseOfferingDisallowParentChangesIfChildrenExistHandler
This handler can be used to prevent deleting or swapping a parent template added by IPSIS for any offering that already has children. In the absence of this handler, parents added by IPSIS may be freely updated, which might alter the hierarchy information for ancestors and descendants of the current offering.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingParentDepartmentValidateHandler
Expected behavior
If the offering already exists (replace instead of create):
If a parent OrgUnit added by IPSIS will be removed or replaced, throw an exception to prevent any further handlers from running.Note: manually added OrgUnits will always be removed with or without this handler in place
Configuration notes
This handler should be configured to run after the Validate handlers.
This handler should be configured to run before the Create handlers.
            ReplaceCourseOfferingTemplateUpdateDepartmentsLMSHandler
This handler updates the course template that is the parent of the offering to have the department parents specified in the offering request.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingTemplateUpdateDepartmentsLMSHandler
Expected behavior
The handler performs the following tasks:
Reads the departments associated with the template that is the parent of the current course offering.
If a department is specified in the offering that is currently not assigned as a parent of the course template, the handler updates it accordingly.
If everything is successful, processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
Anytime after the Read handlers.
            ReplaceCourseOfferingCreateLMSHandler
This handler creates course offerings in Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingCreateLMSHandler
Expected behavior
This handler only runs if there are no Brightspace course offerings associated with the request in both the IM and the LMS tables. The handler performs the following tasks:
Creates the course offering using the information passed in the request (triggering automatic audit logging).
If the create process is successful, the handler sets the ReplaceRequestStatus = EntityCreated and processing continues to the next handler.
If there is an error, the handler sets the ReplaceRequestStatus = CreateFailed and returns false.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler is placed after any Validate handlers.
The Create LMS handler should occur before the Create IM handler.
            ReplaceCourseOfferingCreateIMHandler
This handler creates the Entity in the IM tables, and a mapping if one is defined.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingCreateIMHandler
Expected behavior
This handler only runs if there is no matching Entity in the IM tables. The handler performs the following tasks:
Creates the course offering in the IM Platform.
Creates the IM Hierarchy.
If there is an OrgUnit associated with the request, the handler creates the IM Platform course offfering mapping to the Brightspace course offering.
If everything is successful, the handler sets ReplaceRequestStatus = EntityCreated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
Place this handler after any CreateLMS handlers.
            ReplaceCourseOfferingSaveLMSHandler
The ReplaceCourseOfferingSaveLMSHandler saves any changes that have been made to the Brightspace course offering.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingSaveLMSHandler
Expected behavior
This handler only runs if there are changes to be saved for the Brightspace course offering. The handler performs the following tasks:
Removes any departments from the request ParentOrgUnits (these will be added as parents of the offering's parent template)
Updates the course offering (triggering automatic audit logging).
If everything is successful, if ReplaceRequestStatus != EntityCreated, the handler sets ReplaceRequestStatus = EntityUpdated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
Place this handler after any Create handlers.
            ReplaceCourseOfferingSaveIMHandler
The ReplaceCourseOfferingSaveIMHandler saves any changes that have been made to the course offering.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingSaveLMSHandler
Expected behavior
This handler only runs if there are changes to be saved for the course offering. The handler performs the following tasks:
Removes any departments from the request ParentOrgUnits (these are added as parents of the offering's parent template).
Updates the course offering (triggering automatic audit logging).
If everything is successful, if ReplaceRequestStatus != EntityCreated, the handler sets ReplaceRequestStatus = EntityUpdated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
Place this handler after any Create handlers.
            ReplaceCourseOfferingSaveIMHandler
The save handler saves any changes that have been made to IM Entity and mappings. This includes updating the hierarchy information, and propagating changes to all ancestors and descendants of the given offering.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingSaveIMHandler
Expected behavior
This handler only runs if there are changes to be saved for the Entity or Mappings in the IM tables. The handler performs the following tasks:
Updates the IM Entity.
Updates the IM Hierarchy and updates relationship information for any parents/children affected.
Updates the IM Entity mappings.
If everything is successful, sets ReplaceRequestStatus = EntityUpdated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
Place this handler after any SaveLMS handlers.
            ReplaceCourseOfferingNameNoUpdateLMSHandler
The ReplaceCourseOfferingNameNoUpdateLMSHandler is used when an organization does not want the course offering name to be updated after initial creation. This handler is necessary if an organization allows users to update course names through Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingNameNoUpdateLMSHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the name should not be updated.
If everything is successful, processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is expected to run after the Read handlers, but before the Create handlers.
            ReplaceCourseOfferingStatusNoUpdateLMSHandler
This handler is used when an organization does not want status to be updated after initial creation.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingStatusNoUpdateLMSHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the status should not be updated.
If everything is successful, processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is expected to run after the read handlers, but before the create.
            ReplaceCourseOfferingDatesNoUpdateLMSHandler
The ReplaceCourseOfferingDatesNoUpdateLMSHandler is used when an organization does not want dates to be updated after initial creation.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingDatesNoUpdateLMSHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the start and end dates should not be updated.
If everything is successful, processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This hander is expected to run after the read handlers, but before the create handler.
            ReplaceCourseOfferingCodeNoUpdateLMSHandler
The ReplaceCourseOfferingCodeNoUpdateLMSHandler is used when an organization does not want the course offering code to be updated after initial creation. This handler is necessary if an institution allows users to update course codes through Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingCodeNoUpdateLMSHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the code should not be updated.
If everything is successful, processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is expected to run after the read handlers, but before the create.
            ReplaceCourseOfferingTemplateUpdateDepartmentsLMSHandler
The ReplaceCourseOfferingTemplateUpdateDepartmentsLMSHandler updates the course template that is the parent of the offering so that the department parents are specified in the offering request.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingTemplateUpdateDepartmentsLMSHandler
Expected behavior
Read the departments (from Brightspace) associated with the template that is the parent of the current course offering.
If a department is specified in the offering that is currently not assigned as a parent of the course template, update it accordingly.
If everything is successful, processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler can be used anytime after the Read handlers.
            ReplaceCourseOfferingValidateLMSOrgUnitExistsHandler
This handler checks to see if the org unit that the request corresponds to has been deleted in Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.ReplaceCourseOfferingValidateLMSOrgUnitExistsHandler
Expected behavior
The handler performs the following tasks:
Tries to get the current org unit.
If the current org unit does not exist (either the request is a create, or the org unit was deleted from Brightspace), try to get the ExternalOrgUnitInfo for the request.
If the ExternalOrgUnitInfo is valid, then this isn't a create, and the org unit was deleted from Brightspace. An UpdateOrgUnitFailedException is thrown.
This exception causes the LIS Service to respond with invaliddata. This was deemed to be the most suitable response code for this situation.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed after the read handlers, usually as one of the first validate handlers.



--------------------------------------------------


About the IDeleteCourseSectionHandler interface

The plug-in interface for IDeleteCourseSectionHandler is used by IPSIS adapters to delete course sections from Brightspace.
The interface implementation is D2L.IM.IPSIS.OrgUnits.CourseSections.Handlers.IDeleteCourseSectionHandler.
The following configuration list provides a starting point for any IPSIS implementation:
IPSIS, Template - Course Section
DeleteCourseSectionValidateHandler (Sort Order = 10)
DeleteCourseSectionIMHandler (Sort Order = 20)
            DeleteCourseSectionValidateHandler
The DeleteCourseSectionValidateHandler should always be used. It performs input validation that is needed to ensure that all the other Delete handlers perform properly.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.DeleteCourseSectionValidateHandler
Expected behavior
The handler performs the following tasks:
Checks that the SIS Id on the request corresponds to a real item in the IM tables.
Checks that the OrgUnit Type that the service expects matches the Type of the orgUnit in the database.
Checks that the section does not have any SectionAssociation parents (these must be removed using the SA services beforehand).
If all checks pass, the handler saves the ExternalOrgUnitInfo on the request for later handlers to use.
Error behavior
If any part of the validation fails, an exception is thrown, along with as much detailed information as possible.
Configuration note
The Validate handler should typically be run first in the list of handlers, before any handler that updates or deletes information from the database.
            DeleteCourseSectionIMHandler
The DeleteCourseSectionIMHandler marks the section as deleted in the IPSIS tables, but has no effect on Brightspace. If enrollments or Brightspace org units should be affected, additional handlers are required.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.DeleteCourseSectionIMHandler
Expected behavior
If there is anything dependent on the course section (ex. IM enrollments not deleted) this must fail. The handler performs the following tasks:
Completes a soft-delete of the course section from the IM External OrgUnit Table (but not the Mappings).
Removes of all IM Hierachy references to the section.
Processing continues to the next configured handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
The Delete IM handler should typically be run last in the list of handlers.
            DeleteCourseSectionLEHandler
The DeleteCourseSectionLEHandler is used if the desired behavior is to have all mapped Brightspace sections removed. Unless all remaining active users are deleted or inactivated, they remain enrolled in any parent offerings. You can use the DeleteCourseSectionCascadeDeleteEnrollmentHandler to delete any remaining users from the Sections.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.DeleteCourseSectionLEHandler
Expected behavior
For each mapped course section the handler:
Deletes the course section (automatically generating an audit entry).
Marks the IM mapping as deleted.
Continues processing to the next configured handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This must occur before the IM table delete (example: DeleteCourseSectionIMHandler).
            DeleteCourseSectionCascadeDeleteEnrollmentHandler
If there are any remaining active enrollments that are dependent on the Section that is deleted, the configured IPSIS Platform handlers for IDeleteEnrollmentHandler are used to apply the desired behavior for deleting enrollments for the organization.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.DeleteCourseSectionCascadeDeleteEnrollmentHandler
Expected behavior
The handler performs the following tasks:
Obtains the list of remaining enrollments that have not been deleted for the section.
Uses the IDeleteEnrollmentHandler interface to delete them all.
Processing continues to the next configured handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
This handler stops processing on the first enrollment that fails, returning the exception. It does not continue on to other enrollments (if they exist).
Configuration notes
This must occur before the IM table delete (example: DeleteCourseSectionIMHandler).
This must occur before the LMS deletes if you wish to also delete LMS Sections (example: DeleteCourseSectionLMSHandler).




--------------------------------------------------


About the IReplaceCourseSectionHandler interface

The plug-in interface for IReplaceCourseSectionHandler is used by IPSIS adapters to support the replace operation for course sections.
The interface implementation is D2L.IM.IPSIS.OrgUnits.CourseSections.Handlers.IReplaceCourseSectionHandler.
The IPSIS, Template - Sections and IPSIS, Template - Groups configuration lists provide a starting point for any IPSIS implementation.
The following handler list is used as a starting point when you want to use Brightspace Course Sections for your SIS Sections:
ReplaceCourseSectionReadHandler (Sort Order = 10)
ReplaceCourseSectionStatusDefaultActiveHandler (Sort Order = 20)
ReplaceCourseSectionParentDepartmentParentSemesterDefaultNoneHandler (Sort Order = 30)
ReplaceCourseSectionValidateBaseHandler (Sort Order = 40)
ReplaceCourseSectionValidateParentOfferingExistsHandler (Sort Order = 50)
ReplaceCourseSectionCreateLMSSectionHandler (Sort Order = 60)
ReplaceCourseSectionCreateIMSectionHandler (Sort Order = 70)
ReplaceCourseSectionSaveLMSSectionHandler (Sort Order = 80)
ReplaceCourseSectionSaveIMHandler (Sort Order = 90)
The following handler list is used as a starting point when you want to use Brightspace Groups for your SIS Sections:
ReplaceCourseSectionReadHandler (Sort Order = 10)
ReplaceCourseSectionStatusDefaultActiveHandler (Sort Order = 20)
ReplaceCourseSectionParentDepartmentParentSemesterDefaultNoneHandler (Sort Order = 30)
ReplaceCourseSectionValidateBaseHandler (Sort Order = 40)
ReplaceCourseSectionValidateParentOfferingExistsHandler (Sort Order = 50)
ReplaceCourseSectionCreateLMSGroupHandler (Sort Order = 60)
ReplaceCourseSectionCreateIMSectionHandler (Sort Order = 70)
ReplaceCourseSectionSaveLMSGroupHandler (Sort Order = 80)
ReplaceCourseSectionSaveIMHandler (Sort Order = 90)
            ReplaceCourseSectionReadHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionReadHandler
Expected behavior
The handler performs the following tasks:
Attempts to read information about the course section from the IM tables.
If found, the handler attempts to read any mappings to Brightspace for the course section and attempts to read about the course section from Brightspace.
For each parent org unit specified in the request, the handler reads the information from Brightspace and adds it to Parent OrgUnits list. If the parent has no mappings to Brightspace, the handler throws a ParentNotFoundException.
Processing proceeds to next handler.
            ReplaceCourseSectionStatusDefaultActiveHandler
Implementation
ReplaceCourseSectionStatusDefaultActiveHandler
Expected behavior
The handler performs the following tasks:
Sets the status of the course section object to active if it doesn't already have a value.
Processing proceeds to the next handler.
            ReplaceCourseSectionParentDepartmentParentSemesterDefaultNoneHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionParentDepartmentParentSemesterDefaultNoneHandler
Expected behavior
The handler performs the following tasks:
Removes the parent department and/or parent semester from the request.
Removes ParentOrgUnits if either of them are set in the adapter. These values are not used in the default implementation.
Processing proceeds to the next handler.
            ReplaceCourseSectionValidateBaseHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionValidateBaseHandler
Expected behavior
The handler performs the following actions:
Checks to ensure that both a code and name value are specified for the request. These values must be strings of length greater than 0. If either the code or the name are null or empty, then the Validate handler throws an ArgumentNullException.
If the section already exists in the IM tables, the handler checks that any parent OrgUnits specified on the request already exist as parents in the IM hierarchy. If an attempt was made to add or replace a parent of the section, then an exception is thrown. The error message is: Unable to change the parent offering of course section with id {id}. This behavior is not supported.
Processing proceeds to the next handler.
            ReplaceCourseSectionValidateParentOfferingExistsHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionValidateParentOfferingExistsHandler
Expected behavior
The handler performs the following actions:
Checks to ensure that the specified parent offering exists in both the Brightspace OrgUnit and the IPSIS OrgUnit.
If there is an association between the two, the handler ensures that the association is valid.
If any of the checks fail, the Validate handler throws a ParentNotFoundException. The exception is caught, logged and handled in the manager.
Processing continues to the next handler.
            ReplaceCourseSectionNameNoUpdateLMSHandler
The ReplaceCourseSectionNameNoUpdateLMSHandler is used to prevent updates to the name of the Brightspace Group/Section after initial creation.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionNameNoUpdateLMSHandler
Expected behavior
The handler performs the following actions:
Updates the request object to indicate that the name should not be updated.
Processing continues to the next handler.
Configuration note
This handler is a Manipulate handler intended to be configured before the LMS Create and LMS Save handlers.
            ReplaceCourseSectionCreateLMSSectionHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionCreateLMSSectionHandler
Expected behavior
This handler is only run if the section does not yet exist in both the IM and the Brightspace tables. The handler performs the following actions: 
Creates the course section using the information passed in the request (triggering a Create Section audit entry).
If LMS Create is successful, the handler generates a Created Course Section Audit entry, referencing the Course Section Id.
If the Create is not successful, the handler sets ReplaceRequestStatus = CreateFailed and all handler processing stops (Return False).
If everything is successful, the handler sets ReplaceRequestStatus = EntityCreated and processing continues to the next handler (Return True).
            ReplaceCourseSectionCreateIMSectionHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionCreateIMSectionHandler
Expected behavior
The handler performs the following actions:
Creates the IPSIS OrgUnit if it doesn't already exist.
Adds the appropriate IM Hierarchy.
For each Org Unit it is mapped to, the handler creates the IPSIS mapping if it doesn't already exist. If successful, the handler sets the ReplaceRequestStatus to EntityCreated, and returns true. If a failure occurs, then the ReplaceRequestStatus is set to CreateFailed, and the handler returns false.
Processing continues to the next handler.
            ReplaceCourseSectionSaveLMSSectionHandler
The ReplaceCourseSectionSaveLMSSectionHandler saves changes to all mapped Brightspace sections (zero or more) if required.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionSaveLMSSectionHandler
Expected behavior
For each mapped section, if there are any updates to take place, the handler performs the following actions:
Updates the section (Triggering an Update Section Audit entry).
Updates the OrgUnit properties in Brightspace but does not alter the parents of the section.
If LMS Update is successful, the handler generates an Updated Course Section Audit entry, referencing the Course SectionId.
If everything is not successful, the handler sets ReplaceRequestStatus = CreateFailed and all handler processing stops (Return False).
If everything is successful, the handler sets ReplaceRequestStatus = EntityCreated and processing continues to the next handler (Return True).
            ReplaceCourseSectionSaveIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionSaveIMHandler
Expected behavior
The handler performs the following actions:
Saves any changes to the IPSIS course section and associations if required.
Saves any changes to the IM Hierarchy.
            ReplaceCourseSectionCreateLMSGroupHandler
The ReplaceCourseSectionCreateLMSGroupHandler when an organization wishes to create groups instead of sections in Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionCreateLMSGroupHandler
Expected behavior
This handler is only run if the group does not yet exist in both the IM and Brightspace tables. The handler performs the following actions:
Gets the value in d2l.integration.IPSIS.GroupCategory. If the value is not set, the handler throws an InvalidConfigurationVariableException.
If a group category matching the name in d2l.integration.IPSIS.GroupCategory does not exist, the handler creates a group category with a name and description from the config variable (triggering a create group audit entry).
If group category creation is not successful, the handler throws an exception with an explicit indication of the problem and section identifier.
Creates the course group with the above group category using the information passed in the request.
If the LMS Create is successful, the handler generates a Created Course Group Audit entry, referencing the Course Group Id.
If everything is not successful, the handler sets ReplaceRequestStatus = CreateFailed and all handler processing stops (Return False).
If everything is successful, the handler sets ReplaceRequestStatus = EntityCreated, and processing continues to the next handler (Return True).
Configuration note
This handler replaces the ReplaceCourseSectionCreateLMSSectionHandler in the default plug-in list.
            ReplaceCourseSectionSaveLMSGroupHandler
The ReplaceCourseSectionSaveLMSGroupHandler is used when an organization wishes to create groups instead of sections in the LMS.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionSaveLMSGroupHandler
Expected behavior
For each mapped Brightspace group, if there are any updates to take place, the handler performs the following actions:
Updates the group (triggering an Update Group audit entry) and updates the OrgUnit properties in Brightspace, but does not alter the parents of the group.
If the LMS Update is successful, the handler generates an Updated Course Group Audit entry, referencing the Course Group Id.
If everything is not successful, the handler sets ReplaceRequestStatus = CreateFailed and all handler processing stops (Return False).
If everything is successful, the handler sets ReplaceRequestStatus = EntityCreated and processing continues to the next handler (Return True).
Configuration note
This handler replaces the ReplaceCourseSectionSaveLMSSectionHandler in the default plug-in list.
            ReplaceCourseSectionValidateLMSOrgUnitExistsHandler
The ReplaceCourseSectionValidateLMSOrgUnitExistsHandler checks to see if the org unit that the request corresponds to has been deleted in Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionValidateLMSOrgUnitExistsHandler
Expected behavior
The handler performs the following tasks:
Tries to get the current org unit.
If the current org unit does not exist (either the request is a create, or the org unit was deleted from Brightspace, the handler tries to get the ExternalOrgUnitInfo for the request. If the ExternalOrgUnitInfo is valid, then this isn't a create, and the org unit was deleted from Brightspace and an UpdateOrgUnitFailedException is thrown. This exception causes the LIS Service to respond with invaliddata. This was deemed to be the most suitable response code for this situation.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed after the read handlers, usually as one of the first validate handlers.
            ReplaceCourseSectionBuildParentHierarchyRequiredHandler
The ReplaceCourseSectionBuildParentHierarchyRequiredHandler builds out a parent offering and template for the section if none were passed in on the request.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReplaceCourseSectionBuildParentHierarchyRequiredHandler
Expected behavior
The handler performs the following actions:
Checks to see if a parent offering was specified on the request.
If not, then the handler creates a parent offering and parent template, both of which have the same name and code as the section.
Returns true.
Error behavior
If there is a problem creating either the template or the offering, a CreateOrgUnitFailedException is thrown.
Configuration note
This handler must be placed before any Validate handlers, usually right after the read handler.



--------------------------------------------------


About the IReadCourseSectionHandler interface

The plug-in interface for IReadCourseSectionHandler is used by IPSIS adapters to support the read operation for course sections.
The interface implementation is D2L.IM.IPSIS.OrgUnits.CourseSections.Handlers.IReadCourseSectionHandler.
The following configuration lists provide a starting point for any LIS implementation:
IPSIS, Template - Course Section 
ReadCourseSectionIMHandler (Sort Order = 10)
ReadCourseSectionValidateHandler (Sort Order = 20)
            ReadCourseSectionIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReadCourseSectionIMHandler
Expected behavior
Attempts to read all information stored in the IM tables for the requested section.
Configuration note
This handler should be configured at the beginning of the list, before any Validate handlers.
            ReadCourseSectionValidateHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseSections.Handlers.ReadCourseSectionValidateHandler
Expected behavior
Checks the type of any previously retrieved OrgUnit information.
If it does not match the expected OrgUnit type (section), the handler throws an exception.
Configuration note
This handler should be configured after the ReadIM handler.




--------------------------------------------------


About the IReadCourseTemplateHandler interface

The plug-in interface for IReadCourseTemplateHandler is used by IPSIS Adapters to support the read operation for course templates.
The interface implementation is D2L.IM.IPSIS.OrgUnits.CourseTemplates.Handlers.IReadCourseTemplateHandler.
The following configuration lists provide a starting point for any IPSIS implementation:
IPSIS, Template - Course Template
ReadCourseTemplateIMHandler (Sort Order = 10)
ReadCourseTemplateValidateHandler (Sort Order = 20)
ReadCourseTemplateIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReadCourseTemplateIMHandler
Expected behavior
The handler attempts to read all information stored in the IM tables for the requested template.
Configuration note
This handler should be configured at the beginning of the list, before any Validate handlers.
ReadCourseTemplateValidateHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReadCourseTemplateValidateHandler
Expected behavior
The handler performs the following tasks:
Checks the type of any previously retrieved OrgUnit information.
If it does not match the expected OrgUnit type (Template), an exception is thrown.
Configuration note
This handler should be configured after the ReadIM handler.



--------------------------------------------------


About the IDeleteCourseTemplateHandler interface

The plug-in interface for IDeleteCourseTemplateHandler is used by IPSIS Adapters to delete course templates from Brightspace.
The interface implementation is D2L.IM.IPSIS.OrgUnits.CourseTemplates.Handlers.IDeleteCourseTemplateHandler.
The IPSIS, Template - Course Template configuration lists for the IDeleteCourseTemplateHandler interface are shipped with the product. They are listed along with the extension point they are intended for.
The following handlers are used as a starting point:
DeleteCourseTemplateValidateHandler (Sort Order = 10)
DeleteCourseTemplateIMHandler (Sort Order = 20)
DeleteCourseTemplateIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseOfferings.Handlers.DeleteCourseTemplateIMHandler
Expected behavior
The handler performs the following tasks:
If there is anything dependent on the course template (IM Hierarchy children) the process fails.
The handler does a soft-delete of the course template from the IPSIS tables.
Deletes any IM Hierarchy parent entries that reference the template.
Processing continues to the next configured handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
The Delete IM handler should typically be run last in the list of handlers.
DeleteCourseTemplateDeleteLEHandler
The DeleteCourseTemplateDeleteLEHandler is used if the desired behavior is to have all mapped Brightspace templates deleted if they have no children in Brightspace.
Expected behavior
For each mapped course template, the handler performs the following tasks:
Deletes the course template (automatically creating an audit entry).
Marks any mappings in the IM tables to the deleted Brightspace item as deleted.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This must occur before the IM table delete (example: DeleteCourseTemplateIMHandler).
DeleteCourseTemplateCascadeDeleteCourseOfferingHandler
The DeleteCourseTemplateCascadeDeleteCourseOfferingHandler is used to cascade the delete to any course offering children that still exist.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.DeleteCourseTemplateCascadeDeleteCourseOfferingHandler
Expected behavior
The handler performs the following tasks:
For each remaining course offering referencing the template in the IM Hierarchies table, the handlers configured for IDeleteCourseOffering are used to delete the course offerings.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This must occur before the OrgUnit is deleted from either the IM or the Brightspace tables (for example: DeleteCourseTemplateIMHandler and DeleteCourseTemplateDeleteLEHandler).
DeleteCourseTemplateValidateHandler
The DeleteCourseTemplateValidateHandler should always be used. It performs input validation that is needed to ensure that all the other Delete handlers perform properly.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.DeleteCourseTemplateValidateHandler
Expected behavior
The handler performs the following tasks:
Checks that the SIS Id on the request corresponds to a real item in the IM tables.
Checks that the OrgUnit Type that the service expects matches the Type of the orgUnit in the database.
If all checks pass, the handler saves the ExternalOrgUnitInfo on the request for later handlers to use.
Error behavior
If any part of the validation fails, an exception is thrown, along with as much detailed information as possible.
Configuration note
The Validate handler should typically be run first in the list of handlers, before any handler that updates or deletes information from the database.



--------------------------------------------------


About the IReplaceCourseTemplateHandler interface

The plug-in interface for IReplaceCourseTemplateHandler is used by IPSIS Adapters to support the replace operation for course templates.
The interface implementation is D2L.IM.IPSIS.OrgUnits.CourseTemplates.Handlers.IReplaceCourseTemplateHandler.
The following configuration lists provide a starting point for any IPSIS implementation:
IPSIS, Template - Course Template
ReplaceCourseTemplateRetainExistingDepartmentHandler (Sort Order = 10)
ReplaceCourseTemplateReadHandler (Sort Order = 20)
ReplaceCourseTemplateValidateHandler (Sort Order = 30)

ReplaceCourseTemplateParentsNoUpdateLMSHandler (Sort Order = 40)

ReplaceCourseTemplateDisallowParentChangesIfChildrenExistHandler (Sort Order = 50)
ReplaceCourseTemplateParentDepartmentValidateHandler (Sort Order = 60)
ReplaceCourseTemplateCreateLMSHandler (Sort Order = 70)
ReplaceCourseTemplateCreateIMHandler (Sort Order = 80)
ReplaceCourseTemplateSaveLMSHandler (Sort Order = 90)
ReplaceCourseTemplateSaveIM (Sort Order = 100)
ReplaceCourseTemplateRetainExistingDepartmentHandler
The ReplaceCourseTemplateRetainExistingDepartmentHandler checks if the request does not have a parent department specified. If yes, the handler keeps any existing department parents when updating the template (as opposed to deleting all parents).
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateRetainExistingDepartmentHandler
Expected behavior
The handler performs the following tasks:
Checks to see if there is no parent specified in the request.
If there is no parent specified, the handler attempts to get the current org unit (in order to check if the request is an update).
If the current org unit is valid, for each parent in request.CurrentParents, the handler adds the parent to request.UpdatedParents. For each parent in the ParentOrgUnits of the current org unit, the handler adds the parent to request.ParentOrgUnits
Proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler must be configured before any Read handlers, and thus should be configured first.
ReplaceCourseTemplateReadHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateReadHandler
Expected behavior
The handler performs the following tasks:
Attempts to read information about the course template from the IM tables.
If found, attempts to read any mappings to Brightspace for the course template.
If found, attempts to read about the course template from Brightspace.
Checks to see if a parent department is specified in the request. If a parent department is specified, the handler adds the parent to the ParentOrgUnits of the request. If a parent department is not specified, the org is set as the parent for the request (in request.ParentOrgUnits).
If a parent is specified but it doesn't have IM mappings in the database, the Read handler throws a ParentNotFoundException and all handler processing stops.
Processing proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
The Read handler is typically the first of the handlers, unless the ReplaceCourseTemplateRetainExistingDepartmentHandler is configured. In that case the Read handler should be the second handler.
ReplaceCourseTemplateValidateHandler
The ReplaceCourseTemplateValidateHandler is intended to ensure that the minimum required information is available for the Create handlers.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateValidateHandler
Expected behavior
The handler performs the following tasks:
The Validate handler checks to ensure that both a code and name are specified for the request. The code and name values must be strings of length greater than 0. If either the code or the name are null or empty, the Validate handler throws an ArgumentNullException and all handler processing stops.
Processing proceeds to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
The Read handlers should occur before the Validate handler.
This handler should be configured to run before the Create handlers.
ReplaceCourseTemplateParentsNoUpdateLMSHandler
When a ReplaceTemplateRequest is processed through IPSIS, the ReplaceCourseTemplateParentsNoUpdateLMSHandler retrieves 
custom org units above the course template and preserves this relationship even if they were not created through IPSIS so that it is not overwritten by the update operation.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateParentsNoUpdate
LMSHandler
Expected behavior
The handler performs the following tasks:
The handler fetches all parents of the course template and updates the parent list
Processing proceeds to next handler
Error behavior
No errors are thrown in this handler
Configuration Node
This handler must occur after the Read and Validate handlers
This handler must occur before the Save handlers
ReplaceCourseTemplateDisallowParentChangesIfChildrenExistHandler
The ReplaceCourseTemplateDisallowParentChangesIfChildrenExistHandler can be used to prevent deleting or swapping a parent department for any template that already has children. In the absence of this handler, parents may be freely updated, which might alter the hierarchy information for ancestors and descendants of the current template.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateParentDepartmentValidateHandler
Expected behavior
The handler performs the following tasks:
If the template already exists (replace instead of create):
If a parent OrgUnit will be removed or replaced, the handler throws an exception to prevent any further handlers from running.
Configuration notes
This handler should be configured to run after the Validate handlers.
This handler should be configured to run before the Create handlers.
ReplaceCourseTemplateParentDepartmentValidateHandler
The ReplaceCourseTemplateParentDepartmentValidateHandler can be put into place to catch the scenario when a parent department is not provided for the template.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateParentDepartmentValidateHandler
Expected behavior
The handler performs the following tasks:
If no parent department is found, the handler checks that the Form Element, Create Course > Department, has IsRequired set to false.
If it is set to true, the handler throws an Invalid Config Variable Exception indicating instructions on how to resolve.
Configuration notes
The Read handler should occur before the Validate handler.
The Validate handler should be configured to run before the Create handlers.
ReplaceCourseTemplateCreateLMSHandler
The ReplaceCourseTemplateCreateLMSHandler creates the course template in Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateCreateLMSHandler
Expected behavior
This handler only runs if there are no existing Brightspace course templates associated with the request. The handler performs the following tasks:
If a parent department is not specified, then the new template has the org set as its parent. This causes an error if the course department Form Element is not configured properly. In Form Elements, check that Create Course > Department the IsRequired flag is set to false in order for the create to succeed.
The handler creates the course template using the information passed in the request (triggering automatic Create Template audit logging).
If the Create task is successful, the handler sets ReplaceRequestStatus = EntityCreated.
Processing proceeds to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler is placed after any Validate handlers.
This handler is placed before Create IM handlers.
ReplaceCourseTemplateCreateIMHandler
The ReplaceCourseTemplateCreateIMHandler creates the Entity in the IM tables, and a mapping if one is defined.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateCreateIMHandler
Expected behavior
This handler only runs if there is no matching ExternalOrgUnitInfo and/or mapping in the IM tables. The handler performs the following tasks:
Creates the course template in the IM Platform.
Creates the IM Hierarchy entries.
If there is a Brightspace OrgUnit associated with the request, the handler creates the IM Platform course template mapping to the Brightspace course template.
If everything is successful, the handler sets ReplaceRequestStatus = EntityCreated.
Processing proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler is placed after the CreateLMS handler.
Not configuring ReplaceCourseTemplateCreateIMHandler or ReplaceCourseTemplateSaveIMHandler is legitimate. Without creating IM table entries, IPSIS doesn't know if the template exists in the Brightspace. A mapping handler should be configured that maps the SIS request to the Brightspace template allowing for updates. Without a mapping handler, IPSIS always creates a new template even if a matching one existed.
ReplaceCourseTemplateSaveLMSHandler
The ReplaceCourseTemplateSaveLMSHandler saves any changes that have been made to the Brightspace course template.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateSaveLMSHandler
Expected behavior
This handler only runs if there are changes to be saved for the Brightspace course template. The handler performs the following tasks:
Updates the Brightspace course template (triggering automatic Update Template audit logging).
If everything is successful, if ReplaceRequestStatus != EntityCreated, the handler sets ReplaceRequestStatus = EntityUpdated.
Processing proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed after any Create handlers.
ReplaceCourseTemplateSaveIMHandler
The Save handler saves any changes that have been made to IM Entity and mappings. This includes updating the hierarchy information, and propagating changes to all ancestors and descendants of the given template.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateSaveIMHandler
Expected behavior
This handler only runs if there are changes to be saved for the Entity or mappings in the IM tables. The handler performs the following tasks:
Updates the IM Entity.
Updates the IM Hierarchy and updates relationship information for any parents and children affected.
Updates the IM Entity Mappings.
If everything is successful, the handler sets ReplaceRequestStatus = EntityUpdated.
Processing proceeds to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler is placed after the SaveLMS handler.
Not configuring ReplaceCourseTemplateCreateIMHandler or ReplaceCourseTemplateSaveIMHandler is legitimate. Without creating IM table entries, IPSIS doesn't know if the template exists in Brightspace. A mapping handler should be configured that would map the SIS request to the Brightspace template allowing for updates. Without a mapping handler, IPSIS always creates a new template even if a matching one existed.
ReplaceCourseTemplateValidateLMSOrgUnitExistsHandler
The ReplaceCourseTemplateValidateLMSOrgUnitExistsHandler checks to see if the org unit that the request corresponds to has been deleted in Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.CourseTemplates.Handlers.ReplaceCourseTemplateValidateLMSOrgUnitExistsHandler
Expected behavior
The handler performs the following tasks:
Tries to get the current org unit.
If the current org unit does not exist (either the request is a create, or the org unit was deleted from the Brightspace, the handler tries to get the ExternalOrgUnitInfo for the request.
If the ExternalOrgUnitInfo is valid, then this isn't a create, and the org unit was deleted from Brightspace, and an UpdateOrgUnitFailedException is thrown.
This exception causes the LIS Service to respond with invaliddata. This was deemed to be the most suitable response code for this situation.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed after the Read handlers, usually as one of the first Validate handlers.



--------------------------------------------------


About the IDeleteDepartmentHandler interface

The plug-in interface for IDeleteDepartmentHandler is used by IPSIS Adapters to support the delete operation for Departments.
The interface implementation is D2L.IM.IPSIS.OrgUnits.Departments.Handlers.IDeleteDepartmentHandler.
The IPSIS, Template - Department configuration list provides a starting point for any IPSIS implementation.
The DeleteDepartmentIMHandler (Sort Order = 10) handler is used as a starting point.
            DeleteDepartmentIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.DeleteDepartmentIMHandler
Expected behavior
The handler performs the following tasks:
If there is anything dependent on the department (IM Hierarchy children) the process fails.
The handler completes a soft-delete of the department from the IPSIS tables.
Deletes any IM Hierarchy parent entries that reference the department.
Processing continues to the next configured handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be configured as the last Delete handler.
            DeleteDepartmentLMSHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.DeleteDepartmentLMSHandler
Expected behavior
This handler deletes the department from Brightspace if the department has no children in the org structure. If the department has children, the process fails with an exception.
The handler performs the following tasks:
Deletes the department (automatically creating an audit entry). The department is available in the recycle bin in Brightspace.
The IM Mapping entry for the OrgUnit is marked as deleted.
Processing continues to the next available handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be configured before the IM Delete handler.
            DeleteDepartmentCascadeDeleteCourseTemplateHandler
The DeleteDepartmentCascadeDeleteCourseTemplateHandler is used to cascade the delete to any course template children that still exist.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.DeleteDepartmentCascadeDeleteCourseTemplateHandler
Expected behavior
The handler performs the following tasks:
For each remaining course template referencing the department in the IM Hierarchies tables, the handlers configured for IDeleteCourseTemplate are used to delete the course templates.
Processing continues to the next handler (Return True).
Configuration note
This must occur before either the LMS or IM Table deletes (example: DeleteDepartmentLMSHandler or DeleteDepartmentIMHandler).



--------------------------------------------------


About the IReadEnrollmentHandler interface

The plug-in interface for IReadEnrollmentHandler is used by IPSIS Adapters to support the read operation for Enrollments.
The interface implementation is D2L.IM.IPSIS.Enrollments.IReadEnrollmentHandler.
The IPSIS, Template - Enrollment configuration lists provide a starting point for any IPSIS implementation.
The ReadEnrollmentIMHandler (Sort Order = 10) is used as a starting point.
            ReadEnrollmentIMHandler
The ReadEnrollmentIMHandler obtains the mapping for the requested enrollment.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReadEnrollmentIMHandler
Expected behavior
The handler performs the following tasks:
The handler attempts to get the enrollment mapping from the sourcedId in the SOAP request.
This mapping is stored in the request object for later handlers.
Error behavior
If no mapping is found, an exception is thrown.



--------------------------------------------------


About the IReplaceEnrollmentHandler interface

The plug-in interface for IReplaceEnrollmentHandler is used by IPSIS Adapters to support the replace operation for Enrollments.
The interface implementation is D2L.IM.IPSIS.OrgUnits.Memberships.Handlers.IReplaceEnrollmentHandler.
The following configuration lists for the ReplaceEnrollmentHandler Interface are shipped with the product. They are listed along with the Extension point they are intended for.
IPSIS, Template - Enrollments
ReplaceEnrollmentReadIMHandler (Sort Order = 10)
ReplaceEnrollmentStatusDefaultActiveHandler (Sort Order = 20)
ReplaceEnrollmentValidateSectionHandler (Sort Order = 30)
ReplaceEnrollmentCreateIMEnrollmentHandler (Sort Order = 40)
ReplaceEnrollmentSaveIMEnrollmentHandler (Sort Order = 50)
ReplaceEnrollmentEnrollLMSOfferingHandler (Sort Order = 60)
ReplaceEnrollmentEnrollLMSGroupSectionHandler (Sort Order = 70)
ReplaceEnrollmentUnenrollLMSGroupSectionHandler (Sort Order = 80)
ReplaceEnrollmentUnenrollLMSOfferingHandler (Sort Order = 90)
Background, Template - Background
ReplaceEnrollmentUnenrollLMSGroupSectionHandler (Sort Order = 10)
ReplaceEnrollmentEnrollLMSGroupSectionHandler (Sort Order = 20)
ReplaceEnrollmentUnenrollLMSOfferingHandler (Sort Order = 30)
ReplaceEnrollmentEnrollLMSOfferingHandler (Sort Order = 40)
            ReplaceEnrollmentReadIMHandler
The ReplaceEnrollmentReadIMHandler is expected to get all relevant information from the DB from the IM tables.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentReadIMHandler
Expected behavior
To Brightspace, an enrollment is simply a link between an OrgUnit, a User, and a Role. The ReadIM handler expects to be passed in SIS identifiers for each of those entities, which it uses to look up the associated Role, User, and OrgUnit objects in both the IM and LMS tables. 
The handler performs the following tasks:
Reads the IExternalOrgUnitInfo for the given SIS OrgUnit. Fail with an exception if the ExternalOrgUnitInfo is not found (mandatory).
Reads the Role Mapping for the given SIS Role, selecting the first if more than one is passed in. Fail with an exception if the Role Mapping is not found (mandatory).
Reads the User Mapping for the given SIS User. Fail with an exception if the User Mapping is not found (mandatory)
If this is an update to an existing SIS enrollment, the handler reads the IEnrollmentMapping. If no Enrollment Mapping is found, the request creates a new one.
If an Enrollment Mapping is found, the handler validates that the User in the request matches the User in the existing enrollment.
Reads the IOrgUnitMappings if any exist. If no OrgUnit Mapping is found, the handler logs a message and continues. There may be valid use cases where we only update the IM tables.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
The Read handler is typically configured first in the list.
            ReplaceEnrollmentValidateSectionHandler
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentValidateSectionHandler
Expected behavior
The expected behavior for this handler is to validate that the current enrollment request is for a course section or group.
Error behavior
If the enrollment is not for a course section or group an InvalidOrgUnitTypeException is thrown.
Configuration note
This handler should be configured before ReplaceEnrollmentCreateIMEnrollmentHandler handler.
            ReplaceEnrollmentKeepLMSCreatedEnrollmentsOnUnenrollValidateHandler
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentKeepLMSCreatedEnrollmentsOnUnenrollValidateHandler
Expected behavior
The expected behavior for this handler is to validate that the current enrollment request corresponds to an enrollment record that originated from an SIS request (not a manual Brightspace enrollment).
Error behavior
If the enrollment record originated in the Brightspace (ex. the user was first enrolled manually in Brightspace, and then the SIS sent a replaceMembership for the same user and org unit), the handler throws a UserManuallyEnrolledInLMSException.
Configuration note
This handler must be configured before the ReplaceEnrollmentCreateIMEnrollmentHandler, but after the ReplaceEnrollmentReadIMHandler.
            ReplaceEnrollmentCreateIMEnrollmentHandler
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentCreateIMEnrollmentHandler
Expected behavior
The expected behavior for this handler is to create Enrollment Records in the IM database tables if they do not already exist. For each Enrollment object in the creation list on the request, if no IM Mapping exists, then IM_ENROLLMENTS is updated.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be configured after the Read and Validate handlers.
            ReplaceEnrollmentEnrollLMSGroupSectionHandler
The ReplaceEnrollmentEnrollLMSGroupSectionHandler enrolls users in sections or groups that are mapped in Brightspace.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentEnrollLMSGroupSectionHandler
Expected behavior
The handler performs the following tasks:
For each Active Enrollment Object in the list of enrollments to be updated, if the User is not yet enrolled in the Section/Group, the handler enrolls the User (automatically resulting in an audit entry).
If the User is already enrolled in the Section/Group with a different Role, the handler unenrolls the User and re-enrolls with the new Role (automatically resulting in an audit entry).
If the User is already enrolled in the Section/Group with the same Role, the handler does nothing.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be configured after the SaveIM handler.
This handler must be configured before the Enroll and Unenroll LMSOffering handlers.
This handler should not be configured at the same time as ReplaceEnrollmentEnrollLMSGroupSectionRoleNoUpdateHandler.
            ReplaceEnrollmentEnrollLMSOfferingHandler
The ReplaceEnrollmentEnrollLMSOfferingHandler enrolls users in offerings in Brightspace.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentEnrollLMSOfferingHandler
Expected behavior
The handler performs the following options:
For each Active Enrollment Object in the list of enrollments to be updated, if the User is not yet enrolled in the Offering, the handler enrolls the User in the Course Offering (automatically creating an audit entry).
If the User is already enrolled in the Offering with a different Role, the handler unenrolls the User and re-enrolls them with the new Role (automatically resulting in an audit entry).
If the User is already enrolled in the Offering with the same Role, the handler does nothing.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This Handler should be configured after the EnrollLMSGroupSection Handler.
This handler should not be configured at the same time as ReplaceEnrollmentEnrollLMSOfferingRoleNoUpdateHandler.
            ReplaceEnrollmentSaveIMEnrollmentHandler
The ReplaceEnrollmentSaveIMEnrollmentHandler saves any changes to the enrollment in the IM Tables, including status and Role. It also creates a list of Enrollments that need to be updated.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentSaveIMEnrollmentHandler
Expected behavior
The handler performs the following tasks:
Updates the Role and Active/Inactive status of the current IM enrollment and saves changes to the database if anything differs from its original value.
Creates a list of enrollments that need to be updated. A single IM enrollment might map to multiple enrollments if the OrgUnitMappings are not one-to-one.
Processing proceeds to next available handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should occur after the CreateIMEnrollment handler.
This handler should occur before the Enroll and Unenroll LMS handlers.
            ReplaceEnrollmentEnrollLMSGroupSectionRoleNoUpdateHandler
The ReplaceEnrollmentEnrollLMSGroupSectionRoleNoUpdateHandler creates or updates the enrollment in the section/group, but won't update the role if it already has one. This handler enrolls users in sections or groups in Brightspace if they're not already. It does not alter existing enrollments.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentEnrollLMSGroupSectionRoleNoUpdateHandler
Expected behavior
The handler performs the following tasks:
For each Active Enrollment Object in the list of enrollments to be updated, the handler enrolls the User in the Brightspace Section or Group (automatically creating an audit entry).
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be configured after SaveIMEnrollment handler.
This handler should be configured before the EnrollLMSOffering handler.
This handler should not be configured at the same time as ReplaceEnrollmentEnrollLMSGroupSectionHandler.
            ReplaceEnrollmentEnrollLMSOfferingRoleNoUpdateHandler
The ReplaceEnrollmentEnrollLMSOfferingRoleNoUpdateHandler creates or updates the enrollment in the course offering, but doesn't update the role if it already has one. The handler does not alter existing enrollments.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentEnrollLMSOfferingRoleNoUpdateHandler
Expected behavior
The handler performs the following tasks:
For each Active Enrollment Object in the list of enrollments to be updated, the handler enrolls the User in the Course Offering (automatically creating an audit entry).
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be configured after the EnrollLMSGroupSection handler.
This handler should not be configured at the same time as ReplaceEnrollmentEnrollLMSOfferingHandler.
            ReplaceEnrollmentStatusDefaultActiveHandler
The ReplaceEnrollmentStatusDefaultActiveHandler defaults the enrollment status to Active if it is null.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentStatusDefaultActiveHandler
Expected behavior
The handler performs the following tasks:
If the status is currently null, the handler sets the status to Active.
Otherwise, this handler is skipped and does not alter the existing status.
Error scenarios
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be configured after Read handler.
This handler should be configured before the CreateIM and SaveIM handlers.
            ReplaceEnrollmentStatusDefaultInactiveHandler
This handler defaults the enrollment status to inactive if it is null.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentStatusDefaultInactiveHandler
Expected behavior
The handler performs the following tasks:
If the status is currently null, the handler sets the status to Inactive.
Otherwise, this handler is skipped and does not alter the existing status.
Configuration notes
This handler should be configured after Read handler.
This handler should be configured before the CreateIM and SaveIM handlers.
            ReplaceEnrollmentUnenrollLMSGroupSectionHandler
The ReplaceEnrollmentUnenrollLMSGroupSectionHandler removes enrollments from Brightspace Groups and Sections.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentUnenrollLMSGroupSectionHandler
Expected behavior
This handler unenrolls users from sections if they are no longer supposed to be enrolled. The handler performs the following tasks:
For each Inactive Enrollment Object in the list of enrollments to be updated, if the OrgUnit is an LMS Course Section or LMS Group, the handler unenrolls the user from the Section or Group (Automatically resulting in an audit entry) and sets RequestStatus = EntityDeleted.
Otherwise, the handler skips it and continue to the next enrollment.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
UnenrollLMSGroupSection should occur after Validate and before UnenrollLMSOffering.
            ReplaceEnrollmentUnenrollLMSOfferingHandler
The ReplaceEnrollmentUnenrollLMSOfferingHandler removes enrollments from Brightspace offerings.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.ReplaceEnrollmentUnenrollLMSOfferingHandler
Expected behavior
This handler unenrolls users from offerings in the Brightspace if they're no longer supposed to be enrolled. It only unenrolls users from offerings if they are no longer enrolled in any sections in the offering.
The handler performs the following tasks:
For each Enrollment Object in the Deletion list, if it is no longer an active enrollment, and user is not enrolled in any other sections of the same Offering, the handler unenrolls the user from the Course Offering (Automatically resulting in an audit entry) and sets RequestStatus = EntityDeleted.
Otherwise, the handler skips it and continue to the next enrollment.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
UnenrollLMSOffering should occur after the UnenrollLMSGroupSection handler.



--------------------------------------------------


About the IReadDepartmentHandler interface

The plug-in interface for IReadDepartmentHandler is used by IPSIS Adapters to support the read operation for Departments.
The interface implementation is D2L.IM.IPSIS.OrgUnits.Departments.Handlers.IReadDepartmentHandler.
The IPSIS, Template - Department configuration lists provide a starting point for any IPSIS implementation.
The following handler list provides a starting point:
ReadDepartmentIMHandler (Sort Order = 10)
ReadDepartmentValidateHandler (Sort Order = 20)
            ReadDepartmentIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReadDepartmentIMHandler
Expected behavior
Attempts to read all information stored in the IM tables for the requested Department.
Configuration note
This handler should be configured at the beginning of the list, before any Validate handlers.
            ReadDepartmentLMSHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReadDepartmentLMSHandler
Expected behavior
The handler performs the following tasks:
Retrieves all OrgUnit mappings for the given department.
If no mapping is found, a DataNotFoundException is thrown.
If one or more mappings exist, the handler looks up the LMS OrgUnit from the first available mapping and returns the details of the OrgUnit.
Otherwise, an InvalidOrgUnitException is thrown.
Configuration note
This handler should be configured after the ReadIM handler, and before any Validate handlers.
            ReadDepartmentValidateHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReadDepartmentValidateHandler
Expected behavior
Ensures that the retrieved OrgUnit is actually a Department.
Configuration note
This handler should be configured after ReadIM and ReadLMS (if present).



--------------------------------------------------


About the IDeleteEnrollmentHandler interface

The plug-in interface for IDeleteEnrollmentHandler is used by IPSIS Adapters to support the delete operation for Enrollments. A Delete is a bit different from an unenrollment in that the end result is that the enrollment record is removed from the IM Tables.
The interface implementation is D2L.IM.IPSIS.Enrollments.IDeleteEnrollmentHandler.
The Template - Enrollment, IPSIS configuration lists provide a starting point for any IPSIS implementation.
The following handler list is used as a starting point:
DeleteEnrollmentReadIMHandler (Sort Order =10)
DeleteEnrollmentLMSUnenrolLMSGroupSectionHandler (Sort Order = 20)
DeleteEnrollmentLMSUnenrolLMSOfferingHandler (Sort Order = 30)
DeleteEnrollmentIMHandler (Sort Order = 40)
DeleteEnrollmentIMHandler
The DeleteEnrollmentIMHandler deletes the specified Enrollment from the IM Platform Tables.
Implementation
D2L.IM.IPSIS.Default.Enrollments.DeleteEnrollmentIMHandler
Expected behavior
The handler performs the following tasks:
Deletes the enrollment from the IM Tables.
Sets the status of the result to EntityDeleted.
Processing proceeds to next handler.
Error behavior
If the IM Enrollment mapping is null the handler throws a DataNotFoundException.
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be configured after any LMS handlers.
DeleteEnrollmentUnenrolLMSGroupSectionHandler
The DeleteEnrollmentUnenrolLMSGroupSectionHandler is to delete (unenroll) the Enrollment from all mapped Groups/Section in Brightspace.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.DeleteEnrollmentUnenrollLMSGroupSectionHandler
Expected behavior
The handler performs the following tasks:
For each mapping that is an Brightspace Group or Section, if there is an enrollment in the Group/Section associated with the Section, the handler unenrolls the user (automatically resulting in an audit entry).
If everything is successful, the handler sets the status of the result to EntityDeleted.
If there is an error, the handler sets the status of the result to Error.
Processing proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be configured before IM Delete handlers.
This handler should be configured before any Offering handlers.
DeleteEnrollmentLMSOfferingHandler
This handler is to execute after the DeleteEnrollmentLPGroupSection handler, and operate on the parent objects for any affected course sections. It will unenroll the user from the Course Offering Enrollment in the LMS for any parent offering unless the user is still enrolled in another group/section with the same group type.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.DeleteEnrollmentLMSOfferingHandler
Expected behavior
The handler performs the following tasks:
For each mapping that is a Section/Group, the handler gets the Offering Parent.
If the User is not enrolled in other (child) Groups/Sections with the same Group Type, the handler unenrolls the User from the Offering (automatically resulting in an audit entry).
If everything is successful, the handler sets the status of the result to EntityDeleted
If there is an error, the handler sets the status of the result to Error.
Processing proceeds to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be configured before IM Delete handlers.
This handler should be configured after any Group/Section handlers.
DeleteEnrollmentReadIMHandler
This handler reads the IM mapping information for the identifier passed in the request.
Implementation
D2L.IM.IPSIS.Default.Enrollments.Handlers.DeleteEnrollmentReadIMHandler.
Expected behavior
The handler performs the following tasks:
Retrieves the IM Enrollment mapping that corresponds to the identifier passed in the request.
Retrieves the IM External info for the corresponding OrgUnit identifier passed in the request.
Retrieves the IM OrgUnit mappings in the LMS for the OrgUnit identifier.
Creates a list of enrollments in the LMS to delete.
Processing proceeds to the next handler.
Error behavior
If the IM Enrollment can not be retrieved for the identifier, the handler throws a EnrollmentMappingNotFoundException.
If the IM External info cannot be found, the handler throws a DataNotFoundException.




--------------------------------------------------


About the IReadGradesHandler interface

The plug-in interface for IReadGradesHandler is used by IPSIS Adapters to support read operation for Grades.
The interface implementation is D2L.IM.IPSIS.OrgUnits.Memberships.Handlers.IReplaceEnrollmentHandler.
The following configuration lists for the ReadGradesHandler Interface are shipped with the product. They are listed along with the Extension point they are intended for.
IPSIS, Template - Grades
ReadGradesGradableMappingGetFirstMappingWithGradesHandler (Sort Order = 10)
ReadGradesResolveGradeTypeFromCourseSettingHandler (Sort Order = 20)
ReadGradesStatusDefaultAllHandler (Sort Order = 30)
ReadGradesDisplayTypeDefaultPointsHandler (Sort Order = 40) 
ReadGradesValidateHandler (Sort Order = 50)
ReadGradesGetGradesForSectionMappingHandler (Sort Order = 60)
ReadGradesFilterBySISEnrollmentsHandler (Sort Order = 70)
            ReadGradesGradableMappingDefaultToFirstMappingHandler
A single orgUnit object in the SIS might be mapped to multiple OrgUnits in Brightspace. For example, this can happen with the default handlers for a section that is part of one or more section associations. When the input contains an SISId for an OrgUnit but no mapping, a single mapping needs to be selected from the set. The Default to First Mapping handler simply picks the first mapping in the list returned from the database.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesGradableMappingDefaultToFirstMappingHandler
Expected behavior
The handler performs the following tasks:
If there is already an OrgUnitMapping attached to the request, the handler does nothing.
Otherwise, if there is no SisId on the request, the handler throws an IncompleteRequestException.
If the SisId exists, the handler looks up the OrgUnit Mappings in the database.
If there are multiple mappings returned, the handler selects the first one from the list. This is generally the one that has the lowest Id, meaning that it was mapped first.
The request object Mapping is updated with this value. This information is available to later handlers.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
The GradableMapping handler should be placed before actual grades are retrieved from the database.
There are planned handlers that use other criteria to select a mapping, including picking the first mapping with grades or the one marked as gradable. To avoid confusion, only one such GradableMapping handler should be used in a given configuration list.
            ReadGradesGradableMappingGetIsGradableMappingHandler
A single orgUnit object in the SIS might be mapped to multiple OrgUnits in Brightspace. For example, this can happen with the default handlers for a section that is part of one or more section associations. When the input contains an SISId for an OrgUnit but no mapping, we need to select a single mapping from the set. The Get Is Gradable Mapping handler picks the first mapping which is marked as Is Gradable.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesGradableMappingGetIsGradableMappingHandler
Expected behavior
The handler performs the following tasks:
If there is already an OrgUnitMapping attached to the request, the handler does nothing.
Otherwise, if there is no SisId on the request, the handler throws an IncompleteRequestException.
If the SisId exists, the handler looks up its OrgUnit Mappings in the database.
If there are multiple mappings returned, the handler selects the first one that has the is gradable flag set to true. If there is no such mapping, the handler throws a NoGradableSectionsException.
If multiple mappings are set to gradable, the handler throws a MultipleGradableSectionsException.
The request object Mapping is updated with this value. This information is available to later handlers.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
The GradableMapping handler should be placed before actual grades are retrieved from the database.
There are handlers that use other criteria to select a mapping, including picking the first mapping with grades or just the first mapping in general. To avoid confusion, only one such GradableMapping handler should be used in a given configuration list.
            ReadGradesResolveGradeTypeFromCourseSettingHandler
When a grade type (final adjusted/calculated) is not yet set (via a translator or earlier handler), this handler sets the grade type based on the relevant config variable (Grades.Calculation.ReleaseAdjustedGrade).
The handler reads the setting from the course offering and not the section. It grabs the parent org unit mapping (course offering) for config variable access.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesResolveGradeTypeFromCourseSettingHandler
Expected behavior
The handler performs the following tasks:
If the grade type is not yet set, retrieve the config variable for GradeType. It is controlled by a grade book setting.
Set the grade type (either final calculated or final adjusted).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
The ResolveGradeType handler should occur before the actual grades are retrieved from the database (i.e. before ReadGradesGetGradesForSectionHandler) and after selecting the Mapping.
            ReadGradesStatusDefaultAllHandler
This handler sets the grade status to All.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesStatusDefaultAllHandler
Expected behavior
If the grade status is not yet set, set the grade status to All.
Configuration notes
The StatusDefault handler must occur before the DisplayTypeDefault (Points or Symbols) handler.
The StatusDefault handler should occur before the actual grades are retrieved from the database (ie before ReadGradesGetGradesForSectionMappingHandler).
This StatusDefault handler should not be used in conjunction with any other StatusDefault handler.
            ReadGradesGetGradesForSectionMappingHandler
The ReadGradesGetGradesForSectionMappingHandler retrieves the grades from the database.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesGetGradesForSectionMappingHandler
Expected behavior
The handler performs the following tasks:
If the input SIS Id does not correspond to a Section in the IM tables, the handler throws an exception.
Otherwise, the handler retrieves the actual Grades from the Grades Manager, filtered by the options set so far.
Retrieves the SIS Enrollments for all users enrolled in the specified OrgUnit from the Mapping.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should occur after any handler that sets the request Type, Status, or Mapping, but before the Grades are filtered.
            ReadGradesValidateHandler
The ReadGradesValidateHandler validates that all required properties have been set, and the orgUnit is of a type that supports grades in the Brightspace.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesValidateHandler
Expected behavior
If the input SIS Id does not correspond to a Section of Offering in the IM tables, the handler throws an exception.
Otherwise, the handler validates that the GradeType and GradeStatus on the request object have been set by previous translators and/or handlers.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should occur after the type and status are selected, but before actually reading the grades from the database.
            ReadGradesMatchGradesToSISEnrolledUsersHandler
The ReadGradesMatchGradesToSISEnrolledUsersHandler accepts a list of grades, and returns a list of grades paired with SIS UserIds. Any grades that do not correspond to SIS Enrolled users are omitted.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesIncludeOnlySISEnrolledUsersHandler
Expected behavior
The Grades manager returns all Grades for the OrgUnit, but those Grades correspond to an LMS UserId, not an SIS UserId. This handler determines the appropriate SIS UserId for each Grade, and returns a set of Grade/SISUserId pairs. If there is no SIS UserId for a given user, the associated Grade is omitted from the results.
The handler performs the following tasks:
Retrieve a list of Enrollments for the current OrgUnit.
For each one, determine the SIS UserId of the enrolled User.
Find the first IGrade matching that User, if any.
Create a new object encapsulating pairs of IGrade and SISUserId, and attach it to the response.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should occur after reading the grades from the database.
This handler is necessary to allow the SIS to match grades to users using an Id they understand. This handler (or a customized replacement) should always be configured.
            ReadGradesStatusDefaultReleasedOnlyHandler
The ReadGradesStatusDefaultReleasedOnlyHandler handler sets the grade type to Released.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesStatusDefaultReleasedOnlyHandler
Expected behavior
If the grade type is not yet set, set the grade type to Released.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
The StatusDefault handler must occur before the DisplayTypeDefault (Points or Symbols) handler.
The StatusDefault handler should occur before the actual grades are retrieved from the database (i.e., before ReadGradesGetGradesForSectionMappingHandler).
This StatusDefault handler should not be used in conjunction with any other StatusDefault handler.
            ReadGradesGradableMappingGetFirstMappingWithGradesHandler
The ReadGradesGradableMappingGetFirstMappingWithGradesHandler sets the org unit mapping to the first (sorted by orgunitmapping id) which has available grades.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesGradableMappingGetFirstMappingWithGradesHandler
Expected behavior
The handler performs the following tasks:
If the org unit mapping is not set, the handler grabs all org unit mappings which match the external identifier and sorts them by org unit mapping id.
The handler checks for the first one which has a grade marked as available. Checked grades are pulled based on the related offering grade type flag (i.e., if the section's course offering is configured to release FinalAdjusted, then the handler checks for Available Final Adjusted grades). Available means that the grade either has a numerator that is greater than 0, or has a symbol set. Essentially availability means the grade has a set value in that section.
The handler sets the request org unit mapping to that mapping.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
If no org unit mappings are found, an OrgUnitMappingNotFoundException is thrown.
If no grades are found for any of the org unit mappings, then a NoGradableSectionFoundException is thrown.
Configuration notes
This handler should be placed before the grades are actually read from the database. It should also be placed before any handler which needs to know the org unit it's working on (such as the handler which tries to read org unit configuration).
This handler is one of many which selects an org unit mapping. There should never be more than one of these such handlers in the active configuration at one time.
            ReadGradesDisplayTypeDefaultPointsHandler
The ReadGradesDisplayTypeDefaultPointsHandler sets the grade display type to Points. This affects the display in the Grades Export UI, as well as the grades sent to the SIS.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesDisplayTypeDefaultPointsHandler
Expected behavior
If the grade display type is not yet set, the handler sets the grade display type to Points.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
The DisplayTypeDefault handler should occur before the actual grades are retrieved from the database (i.e., before ReadGradesGetGradesForSectionMappingHandler).
This DisplayTypeDefault handler should not be used in conjunction with any other DisplayTypeDefault handler.
            ReadGradesDisplayTypeDefaultSymbolsHandler
The ReadGradesDisplayTypeDefaultSymbolsHandler sets the grade display type to Symbols. This affects the display in the Grades Export UI, as well as the grades sent to the SIS.
Implementation
D2L.IM.IPSIS.Default.Grades.Handlers.ReadGradesDisplayTypeDefaultSymbolsHandler
Expected behavior
If the grade display type is not yet set, the handler sets the grade display type to Symbols.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
The DisplayTypeDefault handler should occur before the actual grades are retrieved from the database (i.e., before ReadGradesGetGradesForSectionMappingHandler).
This DisplayTypeDefault handler should not be used in conjunction with any other DisplayTypeDefault handler.




--------------------------------------------------


About the IDeleteOtherOrgUnitHandler interface

The plug-in interface for IDeleteOtherOrgUnitHandler is used by IPSIS Adapters to support the delete operation for OrgUnits other than Department, Semester, CourseTemplate, CourseOffering, CourseSection, and SectionAssocation.
The interface implementation is D2L.IM.IPSIS.OrgUnits.OtherOrgUnits.IDeleteOtherOrgUnitHandler.
The IPSIS, Template -Org Unit configuration list provides a starting point for any IPSIS implementation.
The DeleteOtherOrgUnitIMHandler (Sort Order = 10) is used as a starting point.
            DeleteOtherOrgUnitIMHandler
The DeleteOtherOrgUnitIMHandler marks the Org unit as deleted in the IM tables if it has no children in the Hierarchy tables, and has no impact on Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.DeleteOtherOrgUnitIMHandler
Expected behavior
The handler performs the following tasks:
If the Org unit has any children in the IM Hierarchy tables, this process fails with an exception.
The handler performs a soft-delete of the specified OrgUnit from the IM Platform Tables.
The handler removes any IM Hierarchy records for this OrgUnit.
Processing continues to the next available handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be configured as the last Delete Handler.
            DeleteOtherOrgUnitLMSHandler
The DeleteOtherOrgUnitLMSHandler deletes the OrgUnit from Brightspace if it has no children.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.DeleteOtherOrgUnitLMSHandler
Expected behavior
The handler performs the following tasks:
If the OrgUnit has children in the Brightspace, this process fails with an exception.
The OrgUnit is deleted (automatically resulting in an audit log entry).
The IM Mapping entry for the OrgUnit is marked as deleted.
Processing continues to the next available handler.
Note: The OrgUnit is available in the recycle bin in Brightspace.
Configuration note
This handler should be configured before the Delete IM Handler.



--------------------------------------------------


About the IReadSectionAssociationHandler interface

The plug-in interface for IReadSectionAssociationHandler is used by IPSIS Adapters to support the read operation for Section Associations.
The interface implementation is D2L.IM.IPSIS.OrgUnits.SectionAssociations.Handlers.IReadSectionAssociationHandler.
The IPSIS, Template - SectionAssociation configuration lists provide a starting point for any IPSIS implementation.
The following handler list is used as a starting point:
ReadSectionAssociationIMHandler (Sort Order = 10)
ReadSectionAssociationValidateHandler (Sort Order = 20)
            ReadSectionAssociationIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReadSectionAssociationIMHandler
Expected behavior
The handler attempts to read all information stored in the IM tables for the requested Section Association.
Configuration notes
This handler should be configured at the beginning of the list, before any Validate handlers.
            ReadSectionAssociationValidateHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReadSectionAssociationValidateHandler
Expected behavior
The handler performs the following tasks:
Checks the type of any previously retrieved OrgUnit information.
If it does not match the expected OrgUnit type (Section Association), the handler throws an exception.
Configuration note
This handler should be configured after the ReadIM handler.



--------------------------------------------------


About the IReplaceDepartmentHandler interface

The plug-in interface for IReplaceDepartmentHandler is used by IPSIS Adapters to support the replace operation for Departments.
The interface implementation is D2L.IM.IPSIS.OrgUnits.Departments.Handlers.IReplaceDepartmentHandler.
The IPSIS, Template - Department configuration lists provide a starting point for any IPSIS implementation.
The following handler list is used as a starting point:
ReplaceDepartmentReadHandler (Sort Order = 10)
ReplaceDepartmentValidateHandler (Sort Order = 20)
ReplaceDepartmentCreateLMSHandler (Sort Order = 30)
ReplaceDepartmentCreateIMHandler (Sort Order = 40)
ReplaceDepartmentSaveLMSHandler (Sort Order = 50)
ReplaceDepartmentSaveIMHandler (Sort Order = 60)
            ReplaceDepartmentReadHandler
The ReplaceDepartmentReadHandler reads all information related to the Department that exists in the LMS or IM Tables of the database to be used in further handlers.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departmentss.Handlers.ReplaceDepartmentReadHandler
Expected behavior
The handler performs the following tasks:
Attempts to read information about the Department from the IM tables:
If found, the handler attempts to read any mappings to the LMS for the Department.
If found, the handler attempts to read about the Department from the LMS.
Attempts to read information about any indicated parent OrgUnits from the IM tables.
If none are found, the handler sets the default parent list of the Organization at the only parent.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
A Read handler should occur before Validate handlers.
            ReplaceDepartmentValidateHandler
The ReplaceDepartmentValidateHandler ensures that a Valid Code and Name are assigned to the Department.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReplaceDepartmentValidateHandler
Expected behavior
The handler performs the following tasks:
The Validate handler checks to ensure that both a Code and Name were specified for the request. The Code and Name values must be strings of length greater than 0. If either the Code or the Name are null or empty, the handler throws an ArgumentNullException and all handler processing stops.
The Validate handler also checks to make sure that the request isn't trying to change the type (ex. change a College to a Department) of an existing org unit.
If the request is trying to change the type then an InvalidOperationException is thrown and all handler processing stops.
If everything is successful, processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
Validate handlers should be configured before the Create handler.
            ReplaceDepartmentParentsNoUpdateLMSHandler
The ReplaceDepartmentParentsNoUpdateLMSHandler retrieves org unit parents manually created in the LMS and preserves the relationship so that it is not overwritten by this update operation.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReplaceDepartmentParentsNoUpdateLMSHandler
Expected behavior
The handler performs the following tasks:
Fetches all parents of the department and updates the parent list.
Processing continues to the next handler (Return True).
Error behavior
No errors are thrown for this translator.
Configuration note
This handler must occur after the Read & Validate handlers.
This handler must occur before the Save handlers.
Recommended Sort Order = 3.
            ReplaceDepartmentCreateLMSHandler
The ReplaceDepartmentCreateLMSHandler creates the Department in the Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReplaceDepartmentCreateLMSHandler
Expected behavior
This handler only runs if there are no Brightspace Departments associated with the request. The handler performs the following tasks:
Creates the Brightspace Department using the information passed in the request (triggering automatic audit logging).
If everything is successful, the handler sets the status of the result to EntityCreated.
If there is an error, the handler sets the status of the result to CreateFailed.
Processing continues to the next handler (Return True).
Error behavior
If there was a problem processing, an exception is thrown, along with as much detailed information available.
Configuration notes
This handler is placed after any Validate handlers.
The Create LMS handler should occur before the Create IM handler.
            ReplaceDepartmentCreateIMHandler
The ReplaceDepartmentCreateIMHandler creates the Entity in the IM tables, and a mapping if one is defined.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReplaceDepartmentCreateIMHandler
Expected behavior
This handler only runs if there is no matching Entity in the IM tables. The handler performs the following tasks:
Creates the Department in the IM Platform.
If there is an LMS OrgUnit associated with the request, the handler creates the IM Platform Department Mapping to the LMS Department.
If everything is successful, the handler sets the status of the result to EntityCreated.
Processing continues to the next handler (Return True).
Error behavior
If there was a problem processing, an exception is thrown, along with as much detailed information available.
Configuration note
This handler would be placed after any CreateLMS Handler.
            ReplaceDepartmentSaveLMSHandler
The ReplaceDepartmentSaveLMSHandler saves any changes that have been made to the Brightspace Department.
Implementation
This handler only runs if there are changes to be saved for the Brightspace Department. The handler performs the following tasks:
Updates the Brightspace Department (triggering automatic audit logging).
If the request is an update, and at least one field was modified, the handler sets the status of the result to EntityUpdated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed after any Create handlers.
            ReplaceDepartmentSaveIMHandler
The ReplaceDepartmentSaveIMHandler saves any changes that have been made to IM Entity and Mappings.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReplaceDepartmentSaveIMHandler
Expected behavior
The handler only runs if there are changes to be saved for the Entity or Hierarchy in the IM tables. The handler performs the following tasks:
Updates the IM Entity if there are pending changes.
Updates the IM Entity Hierarchy relationships if parents were added or removed.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed after any SaveLMS handlers.
            ReplaceDepartmentMapByCodeHandler
This handler associates a Department with an existing Brightspace Department by Matching on OrgUnitCode.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReplaceDepartmentMapByCodeHandler
Expected behavior
This handler should only be used if the Org Unit Code is expected to be unique within an Org. The handler performs the following tasks:
If there is no Department Mapping, the handler attempts to find a Department in the Brightspace that matches on OrgUnitCode.
If a match is found, the handler updates the request object to contain the matched orgUnit.
If no match is found, the handler does nothing.
If multiple matches are found, the handler throws a MultipleOrgUnitsFoundException which results in an error being returned.
The handler should only be used if the Org Unit Code is expected to be unique within an Org.
Processing proceeds to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler would typically be placed between the Read handlers and the Create handlers, in which case it only executes if the Read handlers fail to find a mapped Department.
            ReplaceDepartmentNameNoUpdateLMSHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReplaceDepartmentCreateHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the Name should not be updated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed before any SaveLMS Handlers.
            ReplaceDepartmentValidateLMSOrgUnitExistsHandler
The ReplaceDepartmentValidateLMSOrgUnitExistsHandler checks to see if the org unit that the request corresponds to has been deleted in the Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Departments.Handlers.ReplaceDepartmentValidateLMSOrgUnitExistsHandler
Expected behavior
The handler performs the following tasks:
Tries to get the current org unit.
If the current org unit does not exist (either the request is a create, or the org unit was deleted from Brightspace), the handler tries to get the ExternalOrgUnitInfo for the request.
If the ExternalOrgUnitInfo is valid, then this isn't a create, and the org unit was deleted from the Brightspace. An UpdateOrgUnitFailedException is thrown.
This exception will cause the LIS Service to respond with invaliddata. This was deemed to be the most suitable response code for this situation.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed after the Read handlers, usually as one of the first Validate handlers.



--------------------------------------------------


About the IReplaceOrgUnitHandler interface

The plug-in interface for IReplaceOrgUnitHandler is used by IPSIS Adapters to support the replace operation for any operations that are not of the standard OrgUnit Types including: Semesters, Departments, Course Templates, Course Offerings, and Course Sections. Examples include: Colleges, Campuses.
The interface implementation is D2L.IM.IPSIS.OrgUnits.OtherOrgUnits.Handlers.IReplaceOrgUnitHandler.
The Template - OrgUnit,IPSIS configuration lists provide a starting point for any IPSIS implementation.
The following handler list is used as a starting point:
ReplaceOrgUnitReadHandler (Sort Order = 10)
ReplaceOrgUnitValidateHandler (Sort Order = 20)
ReplaceOrgUnitCreateLMSHandler (Sort Order = 30)
ReplaceOrgUnitCreateIMHandler (Sort Order = 40)
ReplaceOrgUnitSaveLMSHandler (Sort Order = 50)
ReplaceOrgUnitSaveIMHandler (Sort Order = 60)
            ReplaceOrgUnitReadHandler
The ReplaceOrgUnitReadHandler reads all information related to the OrgUnit that exists in the LMS or IM Tables of the database to be used in further handlers.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.Handlers.ReplaceOrgUnitReadHandler
Expected behavior
The handler performs the following tasks:
Attempts to read information about the OrgUnit from the IM tables. 
If found, the handler attempt to read any mappings to the LMS for the OrgUnit with the particular Org Unit Type and attempts to read about the OrgUnit from the LMS.
The handler attempts to read information about any indicated parent OrgUnits from the IM tables.
If none are found, the handler sets the default parent list of the Organization at the only parent.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
A Read handler should occur before Validate handlers.
            ReplaceOrgUnitValidateHandler
The ReplaceOrgUnitValidateHandler ensures that a Valid Code and Name are assigned to the OrgUnit.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.Handlers.ReplaceOrgUnitValidateHandler
Expected behavior
The handler performs the following tasks:
The Validate handler checks to ensure that both a Code and Name were specified for the request. These values must be strings of length greater than 0.
If either the Code or the Name are null or empty, the handler throws an ArgumentNullException and all handler processing stops.
The validate handler also checks to make sure that the request isn't trying to change the type (e.g., change a College to a Department) of an existing org unit.
If the request is trying to change the type then an InvalidOperationException is thrown and all handler processing stops.
If everything is successful, processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
Validate handlers should be configured before the Create handler.
            ReplaceOrgUnitCreateLMSHandler
The ReplaceOrgUnitCreateLMSHandler creates the OrgUnit in the Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.Handlers.ReplaceOrgUnitCreateLMSHandler
Expected behavior
This handler only runs if there are no Brightspace OrgUnits associated with the request. The handler performs the following tasks:
Creates the OrgUnit using the information passed in the request (triggering automatic "Create {OrgUnitType}" audit logging).
If everything is successful, the handler sets the status of the result to EntityCreated.
If there is an error, the handler sets the status of the result to CreateFailed.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler would be placed after any Validate handlers.
The Create LMS handler should occur before the Create IM handler.
            ReplaceOrgUnitCreateIMHandler
The ReplaceOrgUnitCreateIMHandler creates the Entity in the IM tables, and a mapping if one is defined.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.Handlers.ReplaceOrgUnitCreateIMHandler
Expected behavior
This handler only runs if there is no matching Entity in the IM tables. The handler performs the following tasks:
Creates the OrgUnit in the IM Platform.
If there is an LMS OrgUnit associated with the request, the handler creates the IM Platform OrgUnit Mapping to the LMS OrgUnit.
If everything is successful, the handler sets the status of the result to EntityCreated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed after any CreateLMS handlers.
            ReplaceOrgUnitSaveLMSHandler
The ReplaceOrgUnitSaveLMSHandler saves any changes that have been made to the LMS OrgUnit.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.Handlers.ReplaceOrgUnitSaveLMSHandler
Expected behavior
This handler only runs if there are changes to be saved for the LMS OrgUnit. The handler performs the following tasks:
Updates the OrgUnit (triggering automatic audit logging).
If the request is an update, and at least one field was modified, then set the status of the result to EntityUpdated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed after any Create handlers.
            ReplaceOrgUnitSaveIMHandler
The ReplaceOrgUnitSaveIMHandler saves any changes that have been made to IM Entity and Mappings.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.Handlers.ReplaceOrgUnitSaveIMHandler
Expected behavior
This handler only runs if there are changes to be saved for the Entity or Hierarchy in the IM tables. The handler performs the following tasks:
Updates the IM Entity if there are pending changes.
Updates the IM Entity's Hierarchy relationships if parents were added or removed.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler would be placed after any SaveLMS handlers.
            ReplaceOrgUnitMapByCodeHandler
The ReplaceOrgUnitMapByCodeHandler associates an OrgUnit with an existing LMS OrgUnit by Matching on OrgUnitCode and type.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.Handlers.ReplaceOrgUnitMapByCodeHandler
Expected behavior
This handler should only be used if the Org Unit Code is expected to be unique within an Org. 
The handler performs the following tasks:
If there is no OrgUnit Mapping, the handler attempts to find an OrgUnit in the Brightspace that matches on OrgUnitCode and OrgUnitType
If a match is found, the handler updates the request object to contain the matched orgUnit. 
If no matches are found, the handler does nothing.
If multiple matches are found, the handler throws a MultipleOrgUnitsFoundException
Processing proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed between the Read handlers and the Create handlers, in which case it only executes if the Read handlers fail to find a mapped OrgUnit.
            ReplaceOrgUnitNameNoUpdateLMSHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.Handlers.ReplaceOrgUnitNoUpdateLMSHandler
Expected behavior
Updates the request object to indicate that the Name should not be updated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed before any SaveLMS handlers.
            ReplaceOrgUnitValidateLMSOrgUnitExistsHandler
The ReplaceOrgUnitValidateLMSOrgUnitExistsHandler checks to see if the org unit that the request corresponds to has been deleted in the Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.OtherOrgUnits.Handlers.ReplaceOrgUnitValidateLMSOrgUnitExistsHandler
Expected behavior
The handler performs the following tasks:
The handler tries to get the current org unit.
If the current org unit does not exist (either the request is a create, or the org unit was deleted from the Brightspace):
Try to get the ExternalOrgUnitInfo for the request
If the ExternalOrgUnitInfo is valid, then this isn't a create, and the org unit was deleted from the LMS. Thus, throw a UpdateOrgUnitFailedException.
This exception will cause the LIS Service to respond with invaliddata. This was deemed to be the most suitable response code for this situation.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler would be placed after the read handlers, usually as one of the first validate handlers.



--------------------------------------------------


About the IReadOrgUnitHandler interface

The plug-in interface for IReadOrgUnitHandler is used by IPSIS Adapters to support the read operation for OrgUnits.
The interface implementation is D2L.IM.IPSIS.OrgUnits.IReadOrgUnitHandler.
The IPSIS, Template - OrgUnit configuration list provides a starting point for any IPSIS implementation.
The following handler list is used as a starting point:
ReadOrgUnitIMHandler (Sort Order = 10)
ReadOrgUnitValidateHandler (Sort Order = 20)
            ReadOrgUnitIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.ReadOrgUnitIMHandler
Expected behavior
The handler performs the following tasks:
Retrieves all information from the IPSIS tables for the given OrgUnit.
If no record is found, the handler throws a DataNotFoundException.
Configuration note
This handler should be configured at the beginning of the list, before any Validate handlers.
            ReadOrgUnitLMSHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.ReadOrgUnitLMSHandler
Expected behavior
The handler performs the following tasks:
Retrieves all OrgUnit mappings for the given OrgUnit.
If no mapping is found, the handler throws a DataNotFoundException.
If one or more mappings exist, the handler looks up the OrgUnit from the first available mapping and returns details of this OrgUnit.
Otherwise, the handler throws an InvalidOrgUnitException.
Configuration note
This handler should be configured after the ReadIM handler, and before any Validate handlers.
            ReadOrgUnitValidateHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.ReadOrgUnitValidateHandler
Expected behavior
Ensures that the retrieved OrgUnit has the expected OrgUnitType.
Configuration note
This handler should be configured after ReadIM and ReadLMS (if present).



--------------------------------------------------


About the IDeleteSectionAssociationHandler interface

The plug-in interface for IDeleteSectionAssociationHandler is used by IPSIS Adapters to delete SectionAssociations from the Brightspace.
The interface implementation is D2L.IM.IPSIS.OrgUnits.SectionAssociations.Handlers.IDeleteSectionAssociationHandler.
The IPSIS, Template - Section Association configuration list provides a starting point for any IPSIS implementation.
The following handler list is used as a starting point:
DeleteSectionAssociationValidateHandler (Sort Order = 10)
DeleteSectionAssociationIMHandler (Sort Order = 20)
            DeleteSectionAssociationValidateHandler
The DeleteSectionAssociationValidateHandler should always be used. It performs input validation that is needed to ensure that all the other Delete handlers perform properly.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.DeleteSectionAssociationValidateHandler
Expected behavior
The handler performs the following tasks:
Checks that the SIS Id on the request corresponds to a real item in the IM tables.
Checks that the OrgUnit Type the service expects matches the Type of the orgUnit in the database.
If all checks pass, the handler saves the ExternalOrgUnitInfo on the request for later handlers to use.
Error behavior
If any part of the validation fails, an exception is thrown, along with as much detailed information as possible.
Configuration note
The Validate handler should typically be run first in the list of handlers, before any handler that updates or deletes information from the database.
            DeleteSectionAssociationIMHandler
The DeleteSectionAssociationIMHandler should always be used. It performs input validation that is needed to ensure that all the other Delete handlers perform properly.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.DeleteSectionAssociationValidateHandler
Expected behavior
The handler performs the following tasks:
Checks that the SIS Id on the request corresponds to a real item in the IM tables.
Checks that the OrgUnit Type the service expects matches the Type of the orgUnit in the database.
If all checks pass, the handler saves the ExternalOrgUnitInfo on the request for later handlers to use.
Error behavior
If any part of the validation fails, an exception is thrown, along with as much detailed information as possible.
Configuration note
The Validate handler should typically be run first in the list of handlers, before any handler that updates or deletes information from the database.
            DeleteSectionAssociationIMHandler
The DeleteSectionAssociationIMHandler does a soft-delete of the SectionAssociation in the IM Tables.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.DeleteSectionAssociationIMHandler
Expected behavior
The handler performs the following tasks:
Marks the SectionAssociation as Deleted in the IM OrgUnits Table.
Removes the Hierarchy records for the SectionAssociation.
If there is a problem during processing, the handler sets the status of the result to the appropriate error code.
If everything is successful, processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
The IM Delete handler should occur last.
            DeleteSectionAssociationInactiveLMSOfferingHandler
The DeleteSectionAssociationInactiveLMSOfferingHandler is used if the desired behavior is to have all mapped LMS Offerings inactivated.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.DeleteSectionAssociationInactiveLMSOfferingHandler
Expected Behavior
The handler performs the following tasks:
Inactivate all Course Offerings associated with the specified SectionAssociation in the LMS. This handler marks all mappings to LMS Course Offerings as inactive.
If everything is successful, the handler sets the status of the result to EntityDeleted.
Processing continues to the next handler (Return True).
Error Behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration Notes
This handler must run before the DeleteIM Handler.
            DeleteSectionAssociationDeleteLMSGroupSectionHandler
The DeleteSectionAssociationDeleteLMSGroupSectionHandler is used if the desired behavior is to delete any LE Groups or Sections that are associated with an LE Course Offering assigned to the Section Association.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.DeleteSectionAssociationDeleteLMSGroupSectionHandler
Expected Behavior
This handler can only proceed if there is a mapping for the Section Association record itself. The handler performs the following tasks:
For each LMS OrgUnit that the Section Association is mapped to, the handler determines the LMS OrgUnit's children in the Brightspace
For each such LMS Group or Section child of an OrgUnit that the SA is mapped to, the handler, deletes the LMS Group/Section (automatically resulting in an audit entry) and deletes all IM Mapping records associated with the LMS Group/Section.
If everything is successful, the handler sets the status of the result to EntityDeleted.
Processing continues to the next handler (Return True)
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler must run before the DeleteIM Handler
If this handler is used together with the DeleteLMSOffering handler, DeleteLMSGroupSection must precede DeleteLMSOffering.
            DeleteSectionAssociationDeleteLMSOfferingHandler
The DeleteSectionAssociationDeleteLMSOfferingHandler is used if the desired behavior is to have the Brightspace Course Offering associated with the Section Association deleted.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.DeleteSectionAssociationDeleteLMSOfferingHandler
Expected Behavior
For each mapped LMS Course Offering, the handler performs the following tasks:
If the Offering has no more Mapped Sections as its children (need to compare all children of Offering to org units in IM Mapping table), the handler deletes the LMS Course Offering (Automatically resulting in an audit entry).
If the offering has more Mapped Section as its children, the handler does not delete the LMS Course Offering.
The handler does a soft-delete of the IM Mapping record associated with the Offering.
If everything is successful, the handler sets the status of the result to EntityDeleted.
Processing continues to the next handler (Return True).
Error Behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration Notes
This handler must run before the DeleteIM Handler.
            DeleteSectionAssociationUnenrolLMSGroupSectionHandler
The DeleteSectionAssociationUnenrolLMSGroupSectionHandler unenrolls users from any sections that are to be removed from the association.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.DeleteSectionAssociationUnenrollLMSGroupSectionHandler
Expected behavior
This handler only runs if there is a mapping for the Section Association and there are associated sections (with a mapping) to be removed from the LMS. The handler performs the following tasks:
For each Section in the Section Association Hierarchy, the handler determines which users are enrolled in the Section (from the IM Enrollments Table).
Unenrolls the users from the specific LMS Course Section that is the be removed (automatically resulting in an audit entry).
If everything is successful, the handler sets the status of the result to EntityDeleted.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be placed before the DeleteLMSGroupSection handler to ensure no enrollments remain in the LMS that shouldn't.
            DeleteSectionAssociationUnenrolLMSOfferingHandler
The DeleteSectionAssociationUnenrolLMSOfferingHandlerUnenrolls users from the offering parents of the deleted section mapping unless they're enrolled in another group/section with the same group type under the offering.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.DeleteSectionAssociationUnenrolLMSOfferingHandler
Expected behavior
This handler only runs if there is a mapping for the Section Association and there are associated sections (with a mapping) to be removed from the LMS. The handler performs the following tasks:
For each Section in the Section Association Hierarchy, the handler determines which users are enrolled in the Section (from the IM Enrollments Table).
If the User is not enrolled in any Sections (or Groups) with the same group type, under the LMS Offering, the handler unenrolls the users from the LMS Course Offering that is the be removed (automatically resulting in an audit entry).
If everything is successful, the handler sets the status of the result to EntityDeleted.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed after the Create IM handler.
This handler should be placed before the DeleteLMSGroupSection handler to ensure no enrollments remain in the LMS that shouldn't.
This handler should be placed before the Save IM handler.




--------------------------------------------------


About the IReadSemesterHandler interface

The plug-in interface for IReadSemesterHandler is used by IPSIS adapters to support the read operation for Semesters.
The interface implementation is D2L.IM.IPSIS.OrgUnits.Semesters.Handlers.IReadSemesterHandler.
The following configuration lists provide a starting point for any IPSIS implementation:
IPSIS, Template - Semester
ReadSemesterIMHandler (Sort Order = 10)
ReadSemesterValidateHandler (Sort Order = 20)
            ReadSemesterIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReadSemesterIMHandler
Expected behavior
Attempts to read all information stored in the IM tables for the requested Semester.
If no record is found, the handler throws a DataNotFoundException.
Configuration note
This handler should be configured at the beginning of the list, before any Validate handlers.
            ReadSemesterLMSHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReadSemesterLMSHandler
Expected behavior
The handler performs the following tasks:
Retrieves all OrgUnit mappings for the given Semester.
If no mappings are found, the handler throws a DataNotFoundException.
If one or more mappings exist, the handler looks up the LMS OrgUnit from the first available mapping and return details of this OrgUnit.
Otherwise, the handler throws an InvalidOrgUnitException.
Configuration note
This handler should be configured after the ReadIM handler, and before any Validate handlers.
            ReadSemesterValidateHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReadSemesterValidateHandler
Expected behavior
The handler ensures that the retrieved OrgUnit is actually a Semester.
Configuration note
This handler should be configured after ReadIM and ReadLMS (if present).



--------------------------------------------------


About the IDeleteSemesterHandler interface

The plug-in interface for IDeleteSemesterHandler is used by IPSIS Adapters to support the delete operation for Semesters.
The interface implementation is D2L.IM.IPSIS.OrgUnits.Semesters.Handlers.IDeleteSemesterHandler
The following configuration lists provide a starting point for any IPSIS implementation:
IPSIS, Template - Semester
DeleteSemesterIMHandler (Sort Order = 10)
            DeleteSemesterIMHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.DeleteSemesterIMHandler
Expected behavior
If there is anything dependent on the Semester (IM Hierarchy children) this must fail. The handler performs the following tasks:
The handler performs a soft-delete of the Semester from the IPSIS tables.
Deletes any IM Hierarchy parent entries that reference this Semester.
Processing continues to the next configured handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be configured as the last Delete handler.
            DeleteSemesterLMSHandler
The DeleteSemesterLMSHandler deletes the Semester from the LMS if it has no children in the org structure.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.DeleteSemesterLMSHandler
Expected behavior
The handler performs the following tasks:
If the semester has no LMS children, the handler deletes the Semester (automatically creating an audit entry) and deletes the IM Mapping for the Semester.
Note: The semester is available in the recycle bin in the LMS.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be configured as before the IM Delete handler.
            DeleteSemesterCascadeDeleteCourseOfferingHandler
The DeleteSemesterCascadeDeleteCourseOfferingHandler is used to cascade the delete to any Course Offering children that still exist.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.DeleteSemesterCascadeDeleteCourseOfferingHandler
Expected behavior
The handler performs the following tasks:
For each remaining Course Offering referencing this Semester in the IM Hierarchies Tables, the handlers configured for IDeleteCourseOffering delete the Course Offerings.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This must occur before either the LMS or IM Table deletes (examples: DeleteSemesterLMSHandler, DeleteSemesterIMHandler).



--------------------------------------------------


About the IReadUserHandler interface

The plug-in interface for IReadUserHandler is used by IPSIS adapters to support the read operation for users.
The interface implementation is D2L.IM.IPSIS.Users.Handlers.IReadUserHandler.
The following configuration list for the ReadUserHandler interface is shipped with the product. 
IPSIS, Template
ReadUserIMHandler (Sort Order = 10)
ReadUserLMSHandler (Sort Order = 20)
            ReadUserIMHandler
The ReadUserIMHandler obtains the mapping for the requested user.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReadUserIMHandler
Expected behavior
The handler performs the following tasks:
The handler attempts to get the user mapping from the sourcedId in the SOAP request.
This mapping is stored in the request object to be used by later handlers.
Error behavior
If no mapping is found, a UserMappingNotFoundException is thrown.
Configuration note
This handler should always be placed before the LMS read handler.
            ReadUserLMSHandler
The ReadUserLMSHandler obtains the org user for the requested user.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReadUserLMSHandler
Expected behavior
The handler performs the following tasks:
The handler tries to get the user mapping from the request. If it is null, an error is returned.
Using this mapping, the handler tries to get the corresponding OrgUser. This OrgUser is returned in the result object along with the mapping.
Error behavior
If the mapping on the request is null, the handler throws an ArgumentNullException.
If no user was found (i.e. they were deleted from the LMS but the mapping still exists) the handler throws a UserMappingNotFoundException.
Configuration note
This handler should always be placed after the IM read handler.



--------------------------------------------------


About the IReplaceSectionAssociationHandler interface

The plug-in interface for IReplaceSectionAssociationHandler is used by IPSIS Adapters as well as the Section Association UI to support the replace operation for Section Associations.
For the typical configuration, a SectionAssociation Request is turned into an Offering in Brightspace. The Sections get hung off the Offering. The Offering inherits some properties, including Template parent, from the first Section in the list.
The interface implementation is D2L.IM.IPSIS.OrgUnits.SectionAssociations.Handlers.IReplaceSectionAssociationHandler.
The following configuration lists provide a starting point for any IPSIS implementation:
IPSIS, Template - Sections
ReplaceSectionAssociationReadHandler (Sort Order = 10)
ReplaceSectionAssociationPropertiesDefaultFirstSectionHandler (Sort Order = 20)
ReplaceSectionAssociationValidateHandler (Sort Order = 30)
ReplaceSectionAssociationCreateLMSOfferingHandler (Sort Order = 40)
ReplaceSectionAssociationCreateIMHandler (Sort Order = 50)
ReplaceSectionAssociationAddLMSSectionHandler (Sort Order = 60)
ReplaceSectionAssociationUnenrollLMSGroupSectionHandler (Sort Order = 70)
ReplaceSectionAssociationUnenrollLMSOfferingHandler (Sort Order = 80)
ReplaceSectionAssociationRemoveLMSGroupSectionHandler (Sort Order = 90)
ReplaceSectionAssociationSaveLMSOfferingHandler (Sort Order = 100)
ReplaceSectionAssociationSaveIMHandler (Sort Order = 110)
IPSIS, Template - Groups
ReplaceSectionAssociationReadHandler (Sort Order = 10)
ReplaceSectionAssociationPropertiesDefaultFirstSectionHandler (Sort Order = 20)
ReplaceSectionAssociationValidateHandler (Sort Order = 30)
ReplaceSectionAssociationCreateLMSOfferingHandler (Sort Order = 40)
ReplaceSectionAssociationCreateIMHandler (Sort Order = 50)
ReplaceSectionAssociationAddLMSGroupHandler (Sort Order = 60)
ReplaceSectionAssociationUnenrolLMSGroupSectionHandler (Sort Order = 70)
ReplaceSectionAssociationUnenrolLMSOfferingHandler (Sort Order = 80)
ReplaceSectionAssociationRemoveLMSGroupSectionHandler (Sort Order = 90)
ReplaceSectionAssociationSaveLMSOfferingHandler (Sort Order = 100)
ReplaceSectionAssociationSaveIMHandler (Sort Order = 110)
SA, Template - Sections
This endpoint is used by the Section Association User Interface when associations require creating or updating LMS Sections:
ReplaceSectionAssociationAddLMSSectionHandler (Sort Order = 10)
ReplaceSectionAssociationUnenrolLMSGroupSectionHandler (Sort Order = 20)
ReplaceSectionAssociationUnenrolLMSOfferingHandler (Sort Order = 30)
ReplaceSectionAssociationRemoveLMSGroupSectionHandler (Sort Order = 40)

ReplaceSectionAssociationUpdateHierarchyHandler (Sort Order = 50)

SA, Template - Groups
This endpoint is used by the Section Association User Interface when associations require creating or updating LMS Groups:
ReplaceSectionAssociationAddLMSGroupHandler (Sort Order = 10)
ReplaceSectionAssociationUnenrolLMSGroupSectionHandler (Sort Order = 20)
ReplaceSectionAssociationUnenrolLMSOfferingHandler (Sort Order = 30)
ReplaceSectionAssociationRemoveLMSGroupSectionHandler (Sort Order = 40)
            ReplaceSectionAssociationReadHandler
The Read handler gets a large amount of information from IM and LMS tables and adds it to the request message so that later handlers may use it.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationReadHandler
Expected behavior
The handler performs the following tasks:
Reads the Section Association from the IM Tables if it exists.
Reads the Section Association Hierarchy from the IM Tables if it exists.
Reads the Section Association Mappings from the IM Tables if it exists. If there are no mappings, the handler does not create or delete any sections from the LMS. Any changes to sections (add/remove) happen in the IM Tables only.
Reads the Course Sections from the IM Tables for the Course Sections in the Association.
Prepares a list of Sections to add. These consist of sections missing in the hierarchy that are part of the current request.
Prepares a list of Sections to remove. These consist of extra sections in the hierarchy that are not part of the current request.
If the mapping for the sections being removed can be determined, the handler includes the mapping.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically going to be the first handler as it is the default Read handler.
            ReplaceSectionAssociationPropertiesDefaultFirstSectionHandler
If any Section Association Properties are not set to a non-null value, set them to those of the First Section in the Association List. The properties that are set if missing include the Name, Status, Dates, and Parent list.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationPropertiesDefaultFirstSectionHandler
Expected behavior
This handler only takes action the first time the Section Association is received by IPSIS (i.e., it doesn't exist in the IM Tables).
The Section Association Properties are set from those specified in the IM Tables for the first Section in the Association List if they were not previously set:
Name
Status
Start Date
End Date
Parent List (taken from the first Offering parent of the first section, includes Templates and/or Semesters)
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically configured prior to any validate and create handlers.
            ReplaceSectionAssociationValidateHandler
This handler ensures that the minimum required information is available to create a Course Offering for the Section Association.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationValidateHandler
Expected behavior
This handler throws an appropriate exception if any of the following values are not set:
Name
Code
Status
Course Template Parent (new Associations only)
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically configured prior to any validate and create handlers.
            ReplaceSectionAssociationCreateLMSOfferingHandler
The ReplaceSectionAssociationCreateLMSOfferingHandler creates an LMS Course Offering for the Section Association if this is the first time the Section Association has been seen.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationCreateLMSOfferingHandler
Expected behavior
This handler only runs if there is no record of this Section Association in the IM Tables. The handler performs the following tasks:
Creates an LMS Course Offering Org Unit (automatically resulting in an audit entry).
If everything is successful, the handler sets the status of the result to EntityCreated.
If there is an error, the handler sets the status of the result to CreateFailed.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed after the validate handler.
This handler should be placed before the Create IM handler.
            ReplaceSectionAssociationCreateIMHandler
The ReplaceSectionAssociationCreateIMHandler creates an IM Section Association, and maps it to the appropriate LMS entity, if any.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationCreateIMHandler
Expected behavior
This handler only runs if there is no record of this Section Association in the IM Tables. The handler performs the following tasks:
Creates an IM Section Association Record.
If an OrgUnit is created in the LMS for the Section Association, the handler creates the Mapping.
If everything is successful, the handler sets the status of the result to EntityCreated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed after the validate handler.
This handler should be placed before the Create IM handler.
            ReplaceSectionAssociationAddLMSSectionHandler
The ReplaceSectionAssociationAddLMSSectionHandler creates an LMS Course Section for the associated Sections defined in the Add Section List.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationAddLMSSectionHandler
Expected behavior
The handler performs the following tasks:
Creates an LMS Course Section Org Unit (automatically resulting in an audit entry).
Creates an IM Mapping record for the section and the newly created Org Unit.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed after the Create IM handler.
This handler should be placed before the Save IM handler.
            ReplaceSectionAssociationAddLMSGroupHandler
The ReplaceSectionAssociationAddLMSGroupHandler creates an LMS Course Group for the associated Sections defined in the Add Section List.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationAddLMSGroupHandler
Expected behavior
The handler performs the following tasks:
Gets the value in d2l.integration.IPSIS.GroupCategory.
If the value is not set, the handler throws an InvalidConfigurationVariableException.
If an LMS Group Category matching the name in d2l.integration.IPSIS.GroupCategory does not exist, the handler creates an LMS Group Category with a name and description from the config variable (triggering a create group audit entry).
If LMS Group Category creation is not successful, the handler throws an exception with an explicit indication of the problem and section identifier.
Creates an LMS Course Group Org Unit with the GroupType (automatically resulting in an audit entry).
Creates an IM Mapping record for the section and the newly created Org Unit.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed after the Create IM handler.
This handler should be placed before the Save IM handler.
This handler provides an alternative to ReplaceSectionAssociationAddLMSSectionHandler.
            ReplaceSectionAssociationUnenrolLMSGroupSectionHandler
The ReplaceSectionAssociationUnenrolLMSGroupSectionHandler unenrolls users from any sections that are to be removed from the association.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationUnenrolLMSGroupSectionHandler
Expected behavior
This handler only runs if there are associated sections (with a mapping) to be removed from the LMS. The handler performs the following tasks:
Determines which users are enrolled in the Section (from the IM Enrollments Table).
Unenrolls the users from the LMS Course Section or LMS Group that is to be removed (automatically resulting in an audit entry).
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed after the Create IM handler.
This handler should be placed before the DeleteLMSGroupSection handler to ensure that no LIS-initiated enrollments remain in the LMS entity when it is deleted.
This handler should be placed before the Save IM handler.
            ReplaceSectionAssociationUnenrolLMSOfferingHandler
The ReplaceSectionAssociationUnenrolLMSOfferingHandler unenrolls users from the offering parents of the deleted section mapping unless they are enrolled in another group/section with the same group type under the offering.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationUnenrolLMSOfferingHandler
Expected behavior
This handler only runs if there are associated sections (with a mapping) to be removed from the LMS. The handler performs the following tasks:
Determines which users are enrolled in the Section (from the IM Enrollments Table).
If the user is not enrolled in any other Sections (or Groups) with the same group type, under the LMS Offering, the handler unenrolls the user from the LMS Course Offering that is the be removed (automatically resulting in an audit entry).
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed after the Create IM handler.
This handler should be placed before the DeleteLMSGroupSection handler to ensure no enrollments remain in the LMS that shouldn't.
This handler should be placed before the Save IM handler.
            ReplaceSectionAssociationRemoveLMSGroupSectionHandler
The ReplaceSectionAssociationRemoveLMSGroupSectionHandler deletes the LMS Group or Section that is mapped to the Section being removed from the Section Association.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationRemoveLMSGroupSectionHandler
Expected behavior
This handler only runs if there are associated sections (with a mapping) to be removed from the LMS. The handler performs the following tasks:
Deletes the LMS Group/Section (automatically producing an audit entry).
Deletes the mapping for the LMS Group/Section.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed after the Create IM handler.
This handler should be placed after the Unenroll handlers to ensure that no LIS-initiated enrollments remain in the LMS entity when it is deleted.
This handler should be placed before the Save IM handler.
            ReplaceSectionAssociationUpdateHierarchyHandler
The ReplaceSectionAssociationUpdateHierarchyHandler saves any changes to the IM Section Association, IM Hierarchy, and mappings for the Section Association.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers. ReplaceSectionAssociationUpdateHierarchyHandler
Expected behavior
This handler only runs if there are changes to the IM Tables. The handler performs the following options:

If any of the following cases are not valid, handler is skipped:

Course being associated to is part of IPSIS


Sections being used in association are part of IPSIS


Course and sections are all under the same source system



Updates the IM Section Association History.


Updates the IM Hierarchy if there are any updates to the section assignments:

All Add records should have new Sections to add as children to the Section Association.


All Remove records should have Sections to remove as children of the Section Association.



Updates the IM Mappings for any new Group/Sections that were created or removed:

All Add records should have new mappings to add.


All remove records should have mappings to remove.



Processing continues to the next handler (Return True).

Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler would typically run last.
            ReplaceSectionAssociationSaveLMSOfferingHandler
The ReplaceSectionAssociationSaveLMSOfferingHandler saves any changes to any mapped LMS Offerings.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationSaveLMSOfferingHandler
Expected behavior
This handler only runs if there are mapped Offerings and any of the Offering Properties have changed. The handler performs the following tasks:
Updates the LMS Course Offering (automatically resulting in an Audit Entry).
If the status of the result is not EntityCreated, and at least one field was changed, set the status of the result to EntityUpdated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed after the Create IM handler.
This handler should be placed after the add/remove group/section handlers.
This handler should be placed before the Save IM handler.
            ReplaceSectionAssociationSaveIMHandler
The ReplaceSectionAssociationSaveIMHandler saves any changes to the IM Section Association, IM Hierarchy, and mappings for the Section Association.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationSaveIMHandler
Expected behavior
This handler only runs if there are changes to the IM Tables. The handler performs the following options:
Updates the IM Section Association Record.
Updates the IM Hierarchy if there are any updates to the section assignments:All Add records should have new Sections to add as children to the Section Association.All Remove records should have Sections to remove as children of the Section Association.
Updates the IM Mappings for any new Group/Sections that were created or removed:All Add records should have new mappings to add.All remove records should have mappings to remove.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler would typically run last.
            ReplaceSectionAssociationNameNoUpdateLMSOfferingHandler
The ReplaceSectionAssociationNameNoUpdateLMSOfferingHandler is used to prevent updates to the Name of the mapped LMS Offering after initial creation.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationNameNoUpdateLMSOfferingHandler
Expected behavior
This handler only runs if there is a mapping to an LMS Course Offering. The handler performs the following tasks:
Updates the request object to indicate that the Name should not be updated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler would typically run after the read but before the SaveLMSOffering handler.
            ReplaceSectionAssociationStatusNoUpdateLMSOfferingHandler
The ReplaceSectionAssociationStatusNoUpdateLMSOfferingHandler is used to prevent updates to the Status of the mapped LMS Offering after initial creation.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationStatusNoUpdateLMSOfferingHandler
Expected behavior
This handler only runs if there is a mapping to an LMS Course Offering. The handler performs the following tasks:
Updates the request object to indicate that the Status should not be updated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler would typically run after the read but before the SaveLMSOffering Handler.
            ReplaceSectionAssociationDatesNoUpdateLMSOfferingHandler
The ReplaceSectionAssociationDatesNoUpdateLMSOfferingHandler is used to prevent updates to the Start and End dates of the mapped LMS Offering after initial creation.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationDatesNoUpdateLMSOfferingHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the StartDate and EndDate should not be updated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should typically run after the read but before the SaveLMSOffering handler.
            ReplaceSectionAssociationSetMappingsIsGradableFalseHandler
The ReplaceSectionAssociationSetMappingsIsGradableFalseHandler is used to set the Is Gradable flag to false on the association between the section and course offering. That is, the original section will be left as the gradable section (if one is set).
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationSetMappingsIsGradableFalseHandler
Expected behavior
Updates the request object to indicate that the Is Gradable flag should be set to false.
Processing continues to the next handler (Return True)
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should typically run after the read but before the SaveLMSOffering handler.
            ReplaceSectionAssociationValidateLMSOrgUnitExistsHandler
The ReplaceSectionAssociationValidateLMSOrgUnitExistsHandler checks to see if the org unit that the request corresponds to has been deleted in the LMS.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.SectionAssociations.Handlers.ReplaceSectionAssociationValidateLMSOrgUnitExistsHandler
Expected behavior
The handler performs the following tasks:
Tries to get the current org unit, if the current org unit does not exist (either the request is a create, or the org unit was deleted from the LMS), the handler tries to get the ExternalOrgUnitInfo for the request.
If the ExternalOrgUnitInfo is valid, then this isn't a create, and the org unit was deleted from the LMS and the handler throws a UpdateOrgUnitFailedException.
This exception causes the LIS Service to respond with invaliddata. 
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be placed after the read handlers, usually as one of the first validate handlers.



--------------------------------------------------


IPSIS logic

It is recommended that once an org unit, user, or enrollment is provisioned through IPSIS, any updates or delete requests continue through IPSIS instead of manually through Brightspace. If an org unit or enrollment is manually deleted from Brightspace, the logic in IPSIS for orphaned org units and enrollments is as follows:
When a delete request is sent for an org unit that no longer exists in Brightspace, the org unit mapping in IPSIS is deleted and does not result in an error in the IPSIS system log.
When an update request is sent for an org unit that no longer exists in Brightspace, the org unit mapping in IPSIS is deleted and does not result in an error in the IPSIS system log, and a new org unit is created.
When a delete request is sent for an org unit or an enrollment that no longer exists in Brightspace or IPSIS, the IPSIS system log displays a warning instead of an error.
This logic does not apply to users, if a user is deleted from Brightspace outside of IPSIS. The next time a request is sent for that user, an error is displayed in the IPSIS system log.



--------------------------------------------------


About the IReplaceUserHandler interface

The plug-in interface for IReplaceUserHandler is used by IPSIS adapters to support the replace operation for users.
The interface implementation is D2L.IM.IPSIS.Users.Handlers.IReplaceUserHandler.
The following configuration list provides a starting point for any IPSIS implementation:
Template - User, IPSIS
ReplaceUserReadIPSISHandler (Sort Order = 10)
ReplaceUserReadLMSHandler (Sort Order = 20)
ReplaceUserStatusDefaultActiveHandler (Sort Order = 30)
ReplaceUserRoleDefaultFirstRoleHandler (Sort Order = 40)
ReplaceUserValidateBaseHandler (Sort Order = 50)
ReplaceUserCreateLMSHandler (Sort Order = 60)
ReplaceUserCreateIPSISHandler (Sort Order = 70)
ReplaceUserSaveLMSHandler (Sort Order = 80)
ReplaceUserSaveIPSISHandler (Sort Order = 90)
ReplaceUserSavePasswordPlainTextHandler (Sort Order = 100)
ParentPortalCreateRelationshipHandler
ReplaceUserReadIPSISHandler
The ReplaceUserReadIPSISHandler populates the request object with information from the IM tables pertaining to the user indicated in the request.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserReadIPSISHandler
Expected behavior
The handler performs the following tasks:
If the user was previously submitted, this handler first gets any existing data for this user, including mapping (UserId) from the IM tables.
Processing proceeds to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
A Read IPSIS handler should occur before a Read LMS handler.
ReplaceUserReadLMSHandler
The ReplaceUserReadLMSHandler populates the request object with information from the LMS tables pertaining to the user indicated in the request.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserReadLMSHandler
Expected behavior
The handler performs the following tasks:
If the LMS Userid is available, the handler reads the existing LMS values for user properties.
Processing proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
A Read IPSIS handler should occur before a Read LMS handler.
ReplaceUserStatusDefaultActiveHandler
The ReplaceUserStatusDefaultActiveHandler defaults the status of the user to active if it was not previously set.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserStatusDefaultActiveHandler
Expected behavior
The handler performs the following tasks:
Sets the status to Active if it was not previously set.
Processing proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be placed before the Validate handler.
ReplaceUserValidateBaseHandler
The ReplaceUserValidateBaseHandler ensures that the minimum required properties for the user have been set. These include the User Identifier, the Username, Role, and Status.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserValidateBaseHandler
Expected behavior
The handler performs the following tasks:
Ensures that the following values set: Entity Identifier, Username, Role, and Status.
If any of the values are not set, an ArgumentNullException is thrown with specifics of the missing value. The Adapter logs the specific exception message and returns a general error to the SIS.
If the password is set to be updated, and the encryption type is an unsupported type, an InvalidDataException is thrown with specifics of the unsupported encryption type. The Adapter logs the specific exception message and returns a general error to the SIS.
Processing proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This should be placed before the first Create handler.
ReplaceUserCreateLMSHandler
The ReplaceUserCreateLMSHandler creates the user in the LMS if it doesn't already exist there.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserCreateLMSHandler
Expected behavior
The handler performs the following tasks:
If there is not a valid LMS user object in the request, the handler creates the user in the Brightspace tables (triggering automatic audit logging).
Enters the audit for create user if the user is created.
If everything is successful, the handler sets ReplaceRequestStatus = EntityCreated.
Processing proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This should be placed before the IPSIS Create handler.
ReplaceUserCreateIPSISHandler
The ReplaceUserCreateIPSISHandler creates the user in the IM tables if it doesn't already exist there.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserCreateIPSISHandler
Expected behavior
The handler performs the following tasks:
Creates the user in the IM Tables if it doesn't exist already.
Proceeds to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This should be placed after the LMS Create handler.
This should be placed before the Save handlers.
ReplaceUserSaveLMSHandler
The ReplaceUserSaveLMSHandler saves any updates required to the LMS.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserSaveLMSHandler
Expected behavior
The handler performs the following tasks:
If there are any user updates for the LMS, the handler saves them (triggering automatic audit logging).
If there is a problem with the save, the status is set to Error.
If everything is successful, the handler creates and updated user when data changes and sets ReplaceRequestStatus = EntityUpdated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This should be placed after the Create handlers.
ReplaceUserSaveIPSISHandler
The ReplaceUserSaveIPSISHandler saves any updates required to the IM tables.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserSaveIPSISHandler
Expected behavior
The handler performs the following tasks:
If there are any user updates for the IM tables, the handler saves them.
Processing proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This should be placed after the Create handlers.
ReplaceUserSavePasswordPlainTextHandler
The ReplaceUserSavePasswordPlainTextHandler saves the Plain Text Password to the LMS.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserSavePasswordPlainTextHandler
Expected behavior
The handler performs the following tasks:
If there is a password that is provided in plain text, and it is identified as updated, the handler saves the password to the LMS. If the password is stored in any other encryption type, the handler does nothing.
The handler creates an updated password audit entry.
A handler should be configured for the specific encryption type.
If the password was updated, and the status was not EntityCreated, then the status is set to EntityUpdated.
Proceed to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This should be placed after the Create handlers.
ReplaceUserRoleDefaultFirstRoleHandler
The ReplaceUserRoleDefaultFirstRoleHandler Defaults the primary role of the LMS user to the first role from the role list in the request, if one was not previously set.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserRoleDefaultFirstRoleHandler
Expected behavior
If a Primary Role has not been set, set it to the first role from the request role list, and proceed to the next handler.
If a Primary Role has not been set and the request role list is empty, this handler continues to the next handler without a defined primary role.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed before the Validate handler.
This handler populates the role in the IPSIS request object, and this role is used when creating/updating the LMS user. This handler should be configured if a role from the request should be applied to LMS users. Without this handler, the request role(s) are not used when creating/updating the LMS user.
When used in conjunction with ReplaceUserRoleDefaultConfigVariableHandler, this handler should be placed before it if you ever want the role from the request set as the user's role. If you expect role information to be missing from the request, also configure ReplaceUserRoleDefaultConfigVariableHandler to follow this handler.
ReplaceUserRoleDefaultConfigVariableHandler
The ReplaceUserRoleDefaultConfigVariableHandler is used to set a role based on the d2l.Integrations.IPSIS.DefaultRole configuration variable if one was not previously assigned. The configuration variable is set to a Brightspace Role ID.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserRoleDefaultConfigVariableHandler
Expected behavior
The handler performs the following tasks:
If a primary role has not been set, the handler sets it to the role found in d2l.Integrations.IPSIS.DefaultRole, and proceeds to the next handler.
If a primary role has been set, the handler does nothing and proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
If the config variable is not configured, a RoleNotFoundException is thrown with the message "No default role is set for config value: d2l.Integrations.IPSIS.DefaultRole".
Configuration notes
This should be placed before the Validate handler.
This handler populates the role in the IPSIS request object, and this role is used when creating/updating the LMS user. This handler should be configured in one of two situations:LIS person requests always exclude a role. A role is necessary to create an LMS user. LIS person requests may sometimes, but not always, specify a role. Another handler, such as the ReplaceUserRoleDefaultFirstRoleHandler should be configured before this one to set the IPSIS request object role to the role from the request, thereby ensuring the user is created/updated with the role from the request. However, when the request is missing a role, this handler sets a role, and ensures the user can be created properly.
ReplaceUserUsernameFromEmailPrefixHandler
The ReplaceUserUsernameFromEmailPrefixHandler sets the Username to the Email Address prefix ( before the @ ) if a username is not already set.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUsernameFromEmailPrefixHandler
Expected behavior
If a username is not set, and there is a value in the email address, the sets the username to the email address prefix and proceeds to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed before Validation.
ReplaceUserUsernameGenerateHandler
The ReplaceUserUsernameGenerateHandler generates a Username using the LMS Username generation method if a username is not already set.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserUsernameGenerateHandler
Expected behavior
If a username is not set, generate one using the LP Username generation algorithm and proceed to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed as the last Username handler before Validation.
ReplaceUserUsernameFromEmailHandler
The ReplaceUserUsernameFromEmailHandler sets the username to the full email address if a username is not already set.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserUsernameFromEmailHandler
Expected behavior
The handler performs the following tasks:
If a username is not set, and there is a value in the email address, the handler sets the username to the email address.
The handler proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed before Validation.
ReplaceUserUsernameNoUpdateHandler
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserUsernameNoUpdateHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the username should not be updated.
Proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed before the Create/Save handlers.
ReplaceUserFirstNameNoUpdateHandler
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserFirstNameNoUpdateHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the First Name should not be updated.
Proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed before the Create/Save handlers.
ReplaceUserLastNameNoUpdateHandler
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserLastNameNoUpdateHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the Last Name should not be updated.
Proceeds to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed before the Create/Save handlers.
ReplaceUserOrgDefinedIdNoUpdateHandler
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserOrgDefinedIdNoUpdateHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the orgdefinedid should not be updated.
Proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler typically placed before the Create/Save handlers.
ReplaceUserPasswordNoUpdateHandler
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserPasswordNoUpdateHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the password should not be updated in the LMS.
Proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed before the Create/Save handlers.
ReplaceUserRoleNoUpdateHandler
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserRoleNoUpdateHandler
Expected behavior
The handler performs the following tasks:
Updates the request object to indicate that the role should not be updated in the LMS.
Proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler must be placed after a handler that sets the Brightspace Role in the request.
This handler must be placed before the Create/Save handlers.
ReplaceUserMapByUsernameAndOrgDefinedIdHandler
The ReplaceUserMapByUsernameAndOrgDefinedIdHandler associates an SIS User with existing LMS Users by matching on Username and OrgDefinedId.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserMapByUsernameAndOrgDefinedIdHandler
Expected behavior
The handler performs the following tasks:
If there is no existing user Mapping in the IM Tables, the handler attempts to find a user in the LMS that matches on both Username and OrgDefinedId.
If a match is found, the handler updates the request object to contain the matched user. The match, if any, is always unique.
Proceeds to the next handler.
Error behavior
If a mapping already exists with the same username, but has a different sourcedId, a DuplicateUsernameException is thrown.
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed between the Read handlers and the Create handlers, in which case it only executes if the Read handlers fail to find a mapped OrgUser.
ReplaceUserMapByUsernameHandler
The ReplaceUserMapByUsernameHandler associates a SIS User with existing LMS Users by matching on Username.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserMapByUsernameHandler
Expected behavior
The handler performs the following tasks:
If there is no existing user Mapping in the IM Tables, the handler attempts to find a user in the LMS that matches on Username.
If a match is found, the handler updates the request object to contain the matched user. The match, if any, is always unique.
Proceeds to the next handler.
Error behavior
If a mapping already exists with the same username, but has a different sourcedId, a DuplicateUsernameException is thrown.
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed between the Read handlers and the Create handlers, in which case it only executes if the Read handlers fail to find a mapped OrgUser.
ReplaceUserMapByOrgDefinedIdHandler
The ReplaceUserMapByOrgDefinedIdHandler associates an SIS User with existing LMS Users by matching on OrgDefinedId.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserMapByOrgDefinedIdHandler
Expected behavior
The handler performs the following tasks:
If there is no user Mapping and no OrgUser on the request message, the handler attempts to find a user in the LMS that matches on OrgDefinedId.
If a match is found, the handler updates the request object to contain the matched user.
There may be more than one match in the database, but platform only returns a single result. This handler should only be used if the OrgDefinedId is expected to be unique within an Org.
Proceeds to the next handler.
Error behavior
If a mapping already exists with the same username, but has a different sourcedId, a DuplicateUsernameException is thrown.
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed between the Read handlers and the Create handlers, in which case it only executes if the Read handlers fail to find a mapped OrgUser.
ReplaceUserRequirePasswordChangeOnCreateHandler
The ReplaceUserRequirePasswordChangeOnCreateHandler ensures that new users must change their password on first access.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserRequirePasswordChangeOnCreateHandler
Expected behavior
The handler performs the following tasks:
Sets the flag on the request that is passed to the create handler, which marks the user as having to change the password at first login.
Proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed before the Create/Save handlers.
ReplaceUserStatusDefaultInactiveHandler
The ReplaceUserStatusDefaultInactiveHandler defaults the status to Inactive if a status is not provided.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserStatusDefaultInactiveHandler
Expected behavior
The handler performs the following tasks:
Sets the status to Inactive if it was not previously set.
Proceeds to the next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed before Validation.
ReplaceUserVerifyConsistentSourcedIdHandler
The ReplaceUserVerifyConsistentSourcedIdHandler verifies that the request is not trying to give a new sourcedId to a user which is already mapped.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserVerifyConsistentSourcedIdHandler
Expected behavior
The handler performs the following tasks:
If the request has no set D2LOrgUser, the handler does nothing.
If an org user is set, the handler checks if there are any mappings for that user in the current system/org.
If there are not, the handler does nothing.
If there are mappings, the handler checks if the existing mapping sourcedId matches the request sourcedId.
If they match, the handler does nothing.
If they do not match, the handler throws a DuplicatedUsernameException to notify the SIS that it is trying to set a new sourcedId on an existing user.
Error behavior
If a user mapping already exists for the user, and it has a different sourcedId, the handler throws an exception.
Configuration note
This handler should be placed after a MapBy handler (such as ReplaceUserMapByUsernameHandler) to verify that user isn't already mapped to a different sourcedId. It should also be placed before the save/create handlers.
ReplaceUserUpdateIPSISSourcedIdForMatchedUserHandler
The ReplaceUserUpdateIPSISSourcedIdForMatchedUserHandler verifies that the request is not trying to give a new sourcedId to a user who is already mapped.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.ReplaceUserUpdateIPSISSourcedIdForMatchedUserHandler
Expected behavior
the handler performs the following tasks:
If the request has no set D2LOrgUser, the handler does nothing.
If an org user is set, the handler checks if there are any mappings for that user in the current system/org.
If not there are no mappings, the handler does nothing.
If there are mappings, the handler checks to see if the existing mapping sourcedId matches the request sourcedId.
If they match, the handler does nothing.
If they do not match, the handler checks to see if a user mapping already exists in the source system with the request's sourcedId.
If the mapping exists, the handler throws a DuplicatedUsernameException to notify the SIS that it is trying to set a new sourcedId on an existing user, and that the sourcedId of the existing user cannot be changed to the new one due to conflict.
If they don't match, the handler changes the sourcedId of the user in the mappings table to the one on the request and sets the UserMapping on the request to the now-renamed mapping.
Error beheavior
If a user mapping already exists for the user, and it has a different sourcedId AND the requested sourcedId is already in use, the handler throws an exception.
Configuration note
This handler should be placed after a MapBy handler (such as ReplaceUserMapByUsernameHandler) but before the save/create handlers. This handler should be used in place of the ReplaceUserVerifyConsistentSourcedIdHandler.



--------------------------------------------------


IPSIS and LIS troubleshooting

IPSIS troubleshooting
Whenever troubleshooting IPSIS, one of the first places to start is the System Log. If no useful information appears, it may be necessary to configure Debug logging. Do not forget to turn off debugging when you are finished.
Common error messages

Error


Description


Invalid Configuration: Missing Role Mapping for Role {Role Name}.


This response typically indicates that there is not a role mapping for {Role Name}. Create a mapping in the IPSIS Administration Console for the source system in question.


Error in LIS PMS.replacePerson: Unable to create user.


This error indicates that the user already exists in Brightspace and has been deleted by ReplaceDelete. The person(s) are default handlers with ReplaceUserValidateBaseHandler and the expected record does not exist. As a workaround, use a handler that does expect the user instead, for example, ReplaceUserLastNameNoUpdateHandler.


Unhandled Exception in LIS PMS.replacePerson: password is not valid Parameter name: password.


This message is logged in the logging split as an error when the message provided in a PMS replacePerson message does not contain a password that meets the requirements of the config variable d2l.Auth.Password.ValidationRegex.


Error with update of user with code {User Code}. Account mapped to invalid LMS UserId {User Id}. The account may have been deleted.


This response typically indicates that the user associated with {User Id} has been deleted through Brightspace. Addressing this requires updating the IM_USER_MAPPINGS.UserId value to a new UserId (or restoring the deleted user through Brightspace).


Invalid Configuration: Role Mapping for Role {Role Name}. Desire2Learn RoleId {Role Id} does not exist.


This response typically indicates that the role associated with {Role Id} has been deleted through Brightspace. Addressing this requires updating the IM_ROLE_MAPPINGS.RoleId value to a new RoleId (or restoring the deleted role through Brightspace).


Error with update of org unit with code {Org Unit Code}. Org unit mapped to invalid LMS OrgUnitId {Org Unit Id}. This org unit may have been deleted.


This response typically indicates that the org unit associated with {Org Unit Id} has been deleted through Brightspace. Addressing this requires restoring the deleted org unit through Brightspace.


Invalid Configuration: OrgUnitTypeMapping for OrgUnitType {Org Unit Type}. D2L OrgUnitTypeId {Org Unit Type Id} does not exist.


This response typically indicates that the org unit type associated with {Org Unit Type Id} has been deleted through Brightspace. Addressing this requires restoring the deleted org unit type through Brightspace.


Create D2L.IM.Platform.OrgUnits.Default.CourseOffering object failed: Org Structure constraint preventing create of course offering. Please check Form Elements > CourseOfferingInfo.


This message is logged in the logging split and is viewable through the IPSIS Admin Log Viewer. Check the Form Element CourseOfferingInfo > Semester to see if it is marked as Required. If it is, then you can either provide a valid semester with your request or change the form element to not be Required (and then your current request will work).


Create D2L.IM.Platform.OrgUnits.Default.CourseOffering object failed.


This message is related to known issue PM#89855. If the Form Element CreateCourse > Semester is set to Required, and you provide a valid semester in your request, then you will encounter this error. Since a valid semester was provided, the request should go through successfully, but the validation logic isn't correct at this point. The current work around is to set the element to not be Required, and then resend the request. The validation functionality will be fixed in an upcoming service pack. Also of note, if the Form Element CreateCourse > Semester is Displayed is set to false, this error is also encountered.


Create D2L.IM.Platform.OrgUnits.Default.CourseTemplate object failed.


This message is logged in at least one scenario where the Form Element CreateCourse > Department is set as Required and a Department is not provided.


Unable to change the parent offering of course section with id {id}. This behavior is not supported.


This message is logged when trying to update an existing course section to have a different parent course offering. This behavior is not supported in the default implementation.


IMExternalOrgUnitInfo is null for LIS_Membership_{ListingCode}


This error occurs when an enrollment is attempted for an org unit that is not present in the IM tables in the database. The cause is typically because an enrollment was attempted into an org unit that was created manually in Brightspace. Enrollments using IPSIS must only be processed for org units that were also created using IPSIS.
Logger Type
D2L.IM.IPSIS.LIS.MMS.LISMembershipManagementServices

LIS troubleshooting
soapUI is an excellent tool for troubleshooting the LIS Adapter and other web service based interfaces. The tool can be used to send LIS requests to the LIS Services and operations supported by the LIS Adapter, and can also be used to setup mock services that can be used to troubleshoot our outgoing calls to LIS Services and operations implemented by a Student Information System.
LIS Response messages

Error


Description


Internal Server (500 Error) when accessing service endpoint


There is an error when trying to access any .svc file.
Steps to check:
Is there an im virtual directory within the d2l application within IIS?
Is there *.svc handler mapping for the application within IIS?
Can you hit the wsdl file within the service folder you are trying to access?
Check that you are accessing the site with the protocol (HTTP or HTTPS) allowed via the Site Bindings in IIS (one or both may be enabled). Top setting is for http (basicHttpBinding_Insecure) and bottom is for https (basicHttpBinding_SSL_WS_Security).
Depending how the website is set up, you might have to switch between the HTTP and HTTPS binding.


No security header found in request


This response typically indicates that the LIS Request is not using WS-Security or providing a Username and Password as part of the Security Header.





--------------------------------------------------


About the IReplaceSemesterHandler interface

The plug-in interface for IReplaceSemesterHandler is used by IPSIS adapters to support the replace operation for Semesters.
The interface implementation D2L.IM.IPSIS.OrgUnits.Semesters.Handlers.IReplaceSemesterHandler.
The following configuration list provides a starting point for any IPSIS implementation:
Template - Semester, IPSIS
ReplaceSemesterReadHandler (Sort Order = 10)
ReplaceSemesterValidateHandler (Sort Order = 20)
ReplaceSemesterCreateLMSHandler (Sort Order = 30)
ReplaceSemesterCreateIMHandler (Sort Order = 40)
ReplaceSemesterSaveLMSHandler (Sort Order = 50)
ReplaceSemesterSaveIMHandler (Sort Order = 60)
            ReplaceSemesterReadHandler
The ReplaceSemesterReadHandler reads all information related to the Semester that exists in the LMS or IM Tables of the database to be used in further handlers.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReplaceSemesterReadHandler
Expected behavior
The handler performs the following tasks:
Attempts to read information about the Semester from the IM tables. If the information is found, the handler attempts to read any mappings to the LMS for the Semester and attempts to read about the Semester from the LMS.
Attempts to read information about any indicated parent OrgUnits from the IM tables, if none are found, the handler sets the default parent list of the Organization at the only parent.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
A Read handler should occur before Validate handlers.
            ReplaceSemesterValidateHandler
The ReplaceSemesterValidateHandler ensures that a Valid Code and Name are assigned to the Semester.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReplaceSemesterValidateHandler
Expected behavior
The Validate handler checks to ensure that both a Code and Name were specified for the request. These values must be strings of length greater than 0. The handler performs the following tasks:
If either the Code or the Name are null or empty, the handler throws an ArgumentNullException and all handler processing stops.
The validate handler also checks to make sure that the request isn't trying to change the type (e.g., change a College to a Department) of an existing org unit. If the request is trying to change the type an InvalidOperationException is thrown and all handler processing stops.
If everything is successful, processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
Validate handlers should be configured before the Create handler.
            ReplaceSemesterCreateLMSHandler
The ReplaceSemesterCreateLMSHandler creates the Semester in the Brightspace.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReplaceSemesterCreateLMSHandler
Expected behavior
This handler only runs if there are no Brightspace Semesters associated with the request. The handler performs the following tasks:
Creates the LMS Semester using the information passed in the request (triggering automatic Create Semester audit logging).
If everything is successful, the handler sets the status of the result to EntityCreated.
If there is an error, the handler sets the status of the result to CreateFailed.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be placed after any Validate handlers.
The Create LMS handler should occur before the Create IM handler.
            ReplaceSemesterCreateIMHandler
The ReplaceSemesterCreateIMHandler creates the Entity in the IM tables, and a mapping if one is defined.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReplaceSemesterCreateIMHandler
Expected behavior
This handler only runs if there is no matching Entity in the IM tables. The handler performs the following tasks:
Creates the Semester in the IM Platform.
If there is an LMS OrgUnit associated with the request, the handler creates the IM Platform Semester Mapping to the LMS Semester.
If everything is successful, the handler sets the status of the result to EntityCreated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler would be placed after any CreateLMS handlers.
            ReplaceSemesterSaveLMSHandler
The save handler saves any changes that have been made to the LMS Semester.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReplaceSemesterSaveLMSHandler
Expected behavior
This handler only runs if there are changes to be saved for the LMS Semester. The handler performs the following tasks:
Updates the LMS Semester (triggering automatic audit logging).
If the request is an update, and at least one field was modified, then the handler sets the status of the result to EntityUpdated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler would be placed after any Create handlers.
            ReplaceSemesterSaveIMHandler
The save handler saves any changes that have been made to IM Entity and Mappings.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semester.Handlers.ReplaceSemesterSaveIMHandler
Expected behavior
This handler only runs if there are changes to be saved for the Entity or Hierarchy in the IM tables. The handler performs the following tasks:
Updates the IM Entity if there are pending changes.
Updates the IM Entity's Hierarchy relationships if parents were added or removed.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler would be placed after any SaveLMS handlers.
            ReplaceSemesterMapByCodeHandler
The ReplaceSemesterMapByCodeHandler associates a Semester with an existing LMS Semester by matching on OrgUnitCode.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReplaceSemesterMapByCodeHandler
Expected behavior
The handler performs the following tasks:
If there is no Semester Mapping, the handler attempts to find a Semester in the LMS that matches on OrgUnitCode
If a match is found, the handler updates the request object to contain the matched orgUnit. The handler should only be used if the Org Unit Code is expected to be unique within an Org.
Proceeds to next handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is typically placed between the Read handlers and the Create handlers, in which case it will only execute if the Read handlers fail to find a mapped Semester.
            ReplaceSemesterNameNoUpdateLMSHandler
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReplaceSemesterNoUpdateLMSHandler
Expected behavior
The handler performs the following tasks:
Update the request object to indicate that the Name should not be updated.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler should be placed before any SaveLMS handlers.
            ReplaceSemesterValidateLMSOrgUnitExistsHandler
The ReplaceSemesterValidateLMSOrgUnitExistsHandler checks to see if the org unit that the request corresponds to has been deleted in the LMS.
Implementation
D2L.IM.IPSIS.Default.OrgUnits.Semesters.Handlers.ReplaceSemesterValidateLMSOrgUnitExistsHandler
Expected behavior
The handler performs the following tasks:
Tries to get the current org unit.
If the current org unit does not exist (either the request is a create, or the org unit was deleted from the LMS), the handler tries to get the ExternalOrgUnitInfo for the request.
If the ExternalOrgUnitInfo is valid, then this isn't a create, and the org unit was deleted from the LMS. The handler throws a UpdateOrgUnitFailedException. This exception causes the LIS Service to respond with invaliddata. 
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This handler is placed after the read handlers, usually as one of the first validate handlers.



--------------------------------------------------


Overview of Grades and IPSIS

Integration Pack for Student Information Systems (IPSIS) Grades Export is an add-on to Grades tool. It enables users to export final grades from Brightspace to a SIS that supports the IMS LIS v2.0 standard. The export may be initiated from an export page in Brightspace or grades may be pulled from Brightspace by a process initiated from the SIS. 
Grades Export has these features:
Grade exchange with near-real-time feedback 
Compatible with a SIS supporting LIS v2.0 (for example, Oracle SAIP) 
Exchange in either a push or pull model 
Consistent and familiar Brightspace user interface 
Flexibility to submit symbolic or numeric grades 
Option to restrict submitted grades to released grades only 
Submission of calculated or adjusted final grades 
Grade submission section by section, group by group, or all sections/groups 
Configurable instructions and error messages 
Note: Your institution must acquire, implement, and configure a SIS supporting LIS v2.0 independently. This is beyond the scope of this administration guide. Your SIS vendor may be required to configure your SIS to receive or extract grades from this solution. 



--------------------------------------------------


Ways to initiate Grades Export

Exports may be initiated by a user from Brightspace (push to SIS) or by a process from the SIS (pull from Brightspace). The process you choose depends on your institution’s preferred approach and the capabilities of your SIS.
Enable the Grades Export tool
The Grades Export tool must be enabled in order for users to have access to the Grades Export page. Install administrators and D2LSupport can configure this tool. 
From the Admin Tools menu on the minibar, select Tools.
Toggle GradesExport. 
Process flow: Pulling grades from Brightspace by a SIS 
Instructors review and confirm grades in Brightspace. 
In the SIS user interface, instructors initiate grade import. 
The SIS requests grades for a course from Grades Export, which packages the grades and returns them to the SIS. 
A response by Grades Export reports errors and successes to the SIS. 
The instructor can review feedback in the SIS user interface. 
Process flow: Pushing grades to a SIS
This section lists the typical events that users experience during the Grades Export process. Your process may vary depending on how you configure Grades, Grades Export, and IPSIS. 
Click Grades on the org unit's navbar. 
In the Enter Grades tool, click Export to SIS to access the Grades Export page. Note: Users with Export Grades permission and a properly configured ExportHandlerPage can see this link. 
Select a section from the Scope list. The name of the section, the number of users who will be exported, and the number of users that cannot be exported for the section are displayed. Click View Details to see the users, their grades, and reasons for any exclusions. 
Click Export to initiate an export of grades for the chosen section. Grades marked as ‘Excluded’ are not sent. The export request goes into a ‘Pending’ state and waits for the Grades Export service to process the request. Users can navigate away from the current page and return at a later point in time to review the results of the Grades Export. Users can also initiate exports for other sections for the same or different course offering while exports are in progress or pending. 
Beside the Scope list, click Refresh and then wait for the export to complete. When the export is complete, it appears under the Most Recent Exports list to the right of the page. 
To view the Export Details page for the export, click the name of the section in the Most Recent Exports list. The Export Details page contains information about who initiated and when the export ran, whose grades and how many user grades were successfully sent to the SIS, whose were not, and who was excluded. 
Click Export to SIS at the top of the page to return to the main Grades Export page.




--------------------------------------------------


About the IDeleteUserHandler interface

The plug-in interface for IDeleteUserHandler is used by IPSIS adapters to support the delete operation for users.
The interface implementation is D2L.IM.IPSIS.Users.Handlers.IDeleteUserHandler.
The following configuration lists provide a starting point for any IPSIS implementation:
IPSIS, Template - User
DeleteUserIMHandler (Sort Order = 10)

ParentPortalDeleteRelationshipHandler

            DeleteUserIMHandler
The DeleteUserIMHandler performs a hard delete of the user from the IM Tables.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.DeleteUserIMHandler
Expected behavior
Deletes the user from the IM Tables.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This should be the last handler in the configuration list after any LMS deletes (or alternatives).
            DeleteUserLMSInactiveHandler
The DeleteUserLMSInactiveHandler inactivates the user in the LMS.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.DeleteUserLMSInactiveHandler
Expected behavior
The handler performs the following tasks:
Inactivates the user in the LMS.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This handler should be configured before user is deleted from the IM Tables, and after Cascaded Enrollment Deletes (if required).
This handler should not be run with DeleteUserLMSHandler.
            DeleteUserLMSHandler
The DeleteUserLMSHandler performs a delete of the user from the LMS.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.DeleteUserLMSHandler
Expected behavior
The handler performs the following tasks:
Deletes the user form the LMS.
Processing continues to the next handler (Return True).
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration notes
This should be placed before the user is deleted from the IM Tables, and after Cascaded Enrollment Deletes (If required).
This handler should not be run with DeleteUserLMSInactiveHandler.
            DeleteUserCascadeDeleteEnrollmentHandler
If there are any remaining enrollments that are dependent on this user, the configured IPSIS Platform handlers for the IDeleteEnrollmentHandler are used to apply the desired behavior for deleting enrollments for the organization.
Implementation
D2L.IM.IPSIS.Default.Users.Handlers.DeleteUserCascadeDeleteEnrollmentHandler
Expected behavior
The handler performs the following tasks:
Obtain the list of remaining enrollments for this user specific to IPSIS. Enrollments performed on the LMS are not deleted.
The IDeleteEnrollmentHandler interface to delete the remaining enrollments.
Processing continues to the next configured Handler.
Error behavior
If there is a problem during processing, an exception is thrown, along with as much detailed information as possible.
Configuration note
This must occur before the IM Table delete (example: DeleteUserIMHandler).
This must occur before the LMS deletes if you wish to also delete LMS Users (example: DeleteUserLMSHandler).




--------------------------------------------------


Grades Export permissions and configurations

Grant Grades Export permissions
You can only grant permission at the organization level.
From the Admin Tools menu on the minibar, select Roles and Permissions.
Click the role that you want to access the Course Mappings Interface tool.
Under Filter by Tool, select Grades and then click Apply Filter.
Select any of the following permissions and then click Save and Close:

Setting


Allow users to


See the Grades Tool


This permits the user to see the Grades link within the course offering. 


Manage Grades


This permits the user to open the Grades tool.


Export Grades


This permits the user to see the Export to SIS button and open the Grades Export pages. 


Enter Final Grades


This permits Grades Export pages to access and display final grades. Without this permission, the export pages indicate that a grade is missing for each learner. Grades cannot be exported without this permission.


Manage Final Grades Properties


This permits the Grades Export pages to display grades that have not been released. That is, without this property, the export pages indicate that grades are not missing for learners with non-released grades.


Release Final Grades


If Brightspace is configured to send only released grades to SIS, grant this permission to enable the user to mark grades as released before they are exported.

Configure Grades Export
From the Admin Tools menu on the minibar, select Config Variable Browser.
Configure any of the following variables: 

Variable


Description


d2l.Tools.Grades.ExportHandlerPage


This org level variable provides the URL with the necessary context to the Grades Export page. There is no default value. 
This variable must be configured for users with Export Grades permission to see the Export to SIS option on the Enter Grades page in the Grades tool.
This variable can be set for specific courses (for testing purposes) or for the Org so that all courses have it configured. The variable value remains the same in either case, but when setting it up in the Config Variable Browser, choose either a specific course offering org unit ID or specify the org unit ID of the organization. 
Set this variable as follows for Grades Export: 
/d2l/im/ipsis/grades/export/{orgUnitId}/Home?retUrl=/d2l/lms/grades/admin/enter/user_list_view.d2l%3Fou%3D{orgUnitId} 
Note: This variable is used by Banner Grades and Grades Export. Installations that have Banner and IPSIS need to set this value to avoid having the Banner default conflict with the IPSIS installation. For example, if Banner is installed, this variable has a default value that applies to all Orgs and OrgUnits. To ensure that the Banner default is not applied to non-Banner Organizations, this variable can be set to an empty value and overridden where necessary. 
Without this variable configured, clicking the Export to SIS link takes the user to a page displaying Error: Internal Error. There was an error processing the page you requested. 


d2l.Integrations.IPSIS.GradesExportUIRefreshRate


This org level variable determines how often the Grades Export page is refreshed when a user has enabled Auto Refresh. The refresh is measured in seconds. 
The default value is 30. If the value is lower than 15, the Grades Export page performs a refresh every 15 seconds. 


d2l.Integrations.IPSIS.GradeServiceFrequency


This variable determines how often the Grades Export service checks for new exports to process. The service is responsible for pushing grades to the SIS and storing its responses. This variable does not represent the sleep time between checks. The frequency is measured in seconds. 
If you need to change or update the default value, it can be done by D2L Support or any Install Admin user. 
The default value is 10. If the value is less than 10, the Grades Export service checks every 10 seconds and issue a warning to the system log on each run.


d2l.Integrations.IPSIS.ParallelGradeJobs


This variable controls the number of grade exports that can be actively running at one time. It does not prevent more Grades Export requests from being made from the Grades Export page; those requests are processed right away, but the service executes requests only when the number of simultaneous jobs is below the maximum specified by this variable. 
If you need to change or update the default value, it can be done by D2L Support or any Install Admin user.
The default value is 0, which implies no limit. The value must be greater than or equal to 0.

Display symbol grades in Grades Export
When IPSIS Grades Export is configured for grades in symbols format, without symbols enabled under the grade book settings, the IPSIS Grades Export page displays this error:
Request cannot be processed. 
In the Grades Setup Wizard, under Grade Details, enable Grade Scheme Symbol. See the Grades Administrator Guide for more information.
Extension points and plug-ins for Grades Export
Grades Export relies on IPSIS handlers to extract the users and grade information in the right format from Brightspace. It relies on translators to exchange the data with the SIS in a LIS-specific format. Proper configuration of IPSIS extension points ensures that grades appear in the right format and that grades for the right users appear in the SIS.



--------------------------------------------------


Push to the SIS

Viewing users and grades in the export grades page relies on the following handler extension points: 
IReadGradesHandler 
At present, IPSIS Grades Export supports data exchange with SISs supporting the LIS v2.0 IMS standard. Pushing grades relies on LIS translators in addition to IPSIS handlers: 
IReadGradesHandler 
IPushGradesHandler 
ITranslateGradesToLISResults 
ITranslateGradeTypeForReplaceLineItemRequest 




--------------------------------------------------


IReadGradesHandler


Ref # 


Plug-in Name 


Required for Push 


Note 


1 


ReadGrades GradableMappingGetFirstMappingWithGradesHandler 


No 


  


2 


ReadGrades GradableMappingDefaultToFirstMappingHandler 


No 


  


3 


ReadGrades GradableMappingGetIsGradableMappingHandler 


No 


  


4 


ReadGrades ResolveGradeTypeFromCourseSettingHandler 


Yes 


This handler determines whether to display final adjusted or final calculated grades on the export page based on the course setting. If not configured, an error retrieving grades from the Learning Suite will be generated because the handler won’t know to get adjusted or calculated grades. 


5 


ReadGrades StatusDefaultAllHandler 


YesSee Note 


Either must be configured. If not configured, the export page will not display users. 


6 


ReadGrades StatusDefaultReleasedOnlyHandler 


7 


ReadGrades DisplayTypeDefaultPointsHandler 


YesSee Note 


Either must be configured. If not configured, grades will not be displayed on the export page. 


8 


ReadGrades DisplayTypeDefaultSymbolsHandler 


9 


ReadGrades ValidateHandler 


Yes 


  


10 


ReadGrades GetGradesForSectionMappingHandler 


Yes 


If not configured, the export page will not display users. 


11 


ReadGrades MatchGradesToSISEnrolledUsersHandler 


Yes 


If not configured, the export to the SIS will fail with an error because users unknown to the SIS will be missing important SIS-specific information. 





--------------------------------------------------


IPushGradesHandler


Ref # 


Plug-in Name 


Required for Push 


Note 


12


ReplaceLineItemHandler 


Yes


Used for formatting and then communicating grade information with the SIS. 





--------------------------------------------------


ITranslateGradeTypeForReplaceLineItemRequest


Ref# 


Plug-in Name 


Required for Push 


Note 


16 


ReplaceLineItemRequestGradeTypeTranslator 


Yes 


Sets the grade type (to ‘Final’) on the LIS request. 





--------------------------------------------------


ITranslateGradesToLISResults


Ref # 


Plug-in Name 


Required for Push 


Note 


13 


LISResultsRequiredTranslator 


Yes 


Provides conversion of the internal D2L grade object to a LIS compatible format. 


14 


LISResultsGradePointsRequiredTranslator 


NoSee Note 


Determines the format of grades to send – either points or symbols. Configuring either isn’t required as the equivalent handlers will set the format. These translators allow for overriding what is sent regardless of what is displayed on the export page. 


15


LISResultsGradeSymbolsRequiredTranslator


NoSee Note


Determines the format of grades to send – either points or symbols. Configuring either isn’t required as the equivalent handlers will set the format. These translators allow for overriding what is sent regardless of what is displayed on the export page.





--------------------------------------------------


ITranslateReadResultIdsForLineItemWithLineItemTypeRequest


Ref # 


Plug-in Name 


Required for Pull 


Note 


1 


ReadResultIdsForLineItemWithLineItemTypeRequestGetSectionRequiredTranslator 


Yes 


Extracts the section identifier from the request. 


2 


ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsSectionTranslator 


YesSee Note 


Validates that the SIS is sending a request for grades from a section/group, offering, or either. The default configured translator is ‘Section’.One of these validate translators must be configured. If not, an error will be thrown in the IPSIS handlers. 


3 


ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsOfferingTranslator 


 


 


4 


ReadResultIdsForLineItemWithLineItemTypeRequestValidateOrgUnitIsOfferingOrSectionTranslator 


 


 


5 


ReadResultIdsForLineItemWithLineItemTypeRequestFinalAdjustedLineItemTypeRequiredTranslator 


YesSee Note 


Forces return of Final Calculated or Adjusted grades to the SIS regardless of course setting. If not configured, the ‘GradeTypeFromCourseSetting’ IReadGradesHandler must be configured. 


6


ReadResultIdsForLineItemWithLineItemTypeRequestFinalCalculatedLineItemTypeRequiredTranslator


 


 





--------------------------------------------------


Pull by the SIS

Grades are extracted from Brightspace by the SIS. There is no direct user intervention within Brightspace. IPSIS Grades Export for pulling grades supports data exchange with SISs supporting the LIS v2.0 IMS standard. Pulling grades relies on these LIS translators in addition to IPSIS handlers: 
IReadGradesHandler 
ITranslateReadResultIdsForLineItemWithLineItemTypeRequest 
ITranslateReadResultIdsForLineItemWithLineItemTypeResponse 
ITranslateReadResultsRequest 
ITranslateGradesToLISResults 
The following table matches handlers and translators required for pulling grades: 



--------------------------------------------------


IReadGradesHandler


 Ref # 


Plug-in Name 


Required for Push 


Note 


7 


ReadGrades GradableMappingGetIsGradableMappingHandler 


Yes 
 


The section for which the SIS requests grades may be associated with several LMS sections. These handlers allow the user to choose how IPSIS determines which LMS section should be used.The last one can be used as a backup if either of the other two fail to find a section (marked as gradable or which has grades). Only one of the first two should be configured. The last one is optional. 


8 


ReadGrades GradableMappingGetFirstMappingWithGradesHandler 


9 


ReadGrades GradableMappingDefaultToFirstMappingHandler 


10 


ReadGrades ResolveGradeTypeFromCourseSettingHandler 


See Note 


Uses the course setting to determine if adjusted or calculated grades should be sent to the SIS. Required if one of the related translators is not configured. 


11 


ReadGrades StatusDefaultAllHandler 


Yes 


Identifies export of all or just ‘released’ grades. One of these must be configured. If not, the export will fail. 


12 


ReadGrades StatusDefaultReleasedOnlyHandler 


13 


ReadGrades DisplayTypeDefaultPointsHandler 


NoSee Note 


Excludes from configuration. Required only for pushing grades. 


14 


ReadGrades DisplayTypeDefaultSymbolsHandler 


 


 


15 


ReadGrades ValidateHandler 


Yes 


  


16 


ReadGrades GetGradesForSectionMappingHandler 


Yes 


If not configured, the export page will not display users. 


17 


ReadGrades MatchGradesToSISEnrolledUsersHandler 


Yes 


If not configured, the export to the SIS will fail with an error because users unknown to the SIS will be missing important SIS-specific information. 





--------------------------------------------------


ITranslateReadResultsRequest


 Ref # 


Plug-in Name 


Required for Push 


Note 


19 


ReadResultsRequestResultIdsRequiredTranslator 


Yes 


Extracts the grade identifiers from the request. 





--------------------------------------------------


ITranslateGradesToLISResults


Ref # 


Plug-in Name 


Required for Push 


Note 


20 


LISResultsRequiredTranslator 


Yes 


Provides conversion of the internal D2L grade object to an LIS compatible format. 


21 


LISResultsGradePointsRequiredTranslator 


NoSee Note 


Determines the format of grades to send – either points or symbols. Configuring either isn’t required as the equivalent handlers will set the format. These translators allow for overriding what is sent regardless of what is displayed on the export page. 


22 


LISResultsGradeSymbolsRequiredTranslator





--------------------------------------------------


Configure Grades Export language terms

You can configure all text and messaging presented in the IPSIS Grades Export user interface using Language Management. Administrators should review the User Interface and update entry points, instructions, and error messages to suit their institution. 
For example, "Export Grades to SIS" might make more sense to your instructors as "Export Grades to PeopleSoft" or "Export Grades to Registrar". You might prefer "Submit Grades" over "Export".
From the Admin Tools menu on the minibar, select Language Management.
Click the language that you are using.
Type a search term next to Search For.
In the Tool Packages list, select IPSISGrades.
Select the check box next to a term that you want to customize and then type the custom value.
After you are satisfied with your changes, click Save and Close.




--------------------------------------------------


About Integrity Advocate

Integrity Advocate is an online proctoring and identification verification application that integrates with Brightspace and works with Quizzes to allow assessments to be proctored. Integrity Advocate requires no downloads for the user and works in all modern browsers (exceptions apply where the option to use a secure browser is selected).
Administrators are required to follow the LTI 1.3 Dynamic Registration process to setup their tool and add the newly created LTI widget to course homepages.
Enable and configure Integrity Advocate
Integrity Advocate is turned on by default at the instance level. However, it is turned off at the organization level.
To enable and configure Integrity Advocate:
From the Admin Tools menu, select Organization Tools.
Search for Integrity Advocate and toggle it on.
From the Admin Tools menu, select Config Variable Browser.
Search for the d2l.3rdParty.IntegrityAdvocate.AppId configuration variable.
Enter your full AppId provided by Integrity Advocate as the instance value.
Registering an external learning tool for Integrity Advocate
Make note of your AppId provided by Integrity Advocate.
From the Admin Tools menu, click Manage Extensibility.
In the LTI Advantage tab, click Register Tool.
Select the Dynamic radio button.
In the Tool initiation registration endpoint* field, enter the following URL, adding your AppId at the end:https://www.integrityadvocateserver.com/integration/d2l/DynamicRegister?app_id={YourAppIdHere}For example:https://www.integrityadvocateserver.com/integration/d2l/DynamicRegister?app_id=xc186xxx-xxxx-xxxx-xxxx-xxacb09d5xxx
Select the Configure Deployment check box.
Click Register and follow the prompts. A success message appears.
Once complete, navigate to Manage Extensibility and check on your new tool registration and deployment.
At the deployment level, ensure you properly share the new tool deployment to the courses you want proctoring available to.
At the deployment level, also ensure the following security settings have been enabled:
Org Unit Information
First Name
Last Name
Email
User Id
Under Make tool available to, click Add Org Units.
Select the desired course(s) or just add the top level org unit and all descendents.
Click Add.
Click Save.
Scroll to the bottom and click View Links.
Click the Integrity Advocate LTI 1.3 link name.
Set the Height field to 1000.
Click Save and Close.
Enable proctoring on a quiz
In Brightspace, navigate to a course homepage.
In the Integrity Advocate widget, click on the Quizzes tab to view the list of quizzes in the current course.
Locate the quiz you want to enable proctoring on and select the check box in the Enable Integrity Advocate column.
To associate a grade item to the proctoring results, select the Use Grade Item check box.Note: Enabling proctoring on a quiz also enables automatic grading, which ensures that quiz completions automatically navigate to a quiz submission view. All quizzes redirect to a default view, unless otherwise overridden in the quiz settings. See Quiz settings, Submission View tab options.
API Usage
Integrity Advocate leverages API calls to send and receive data from the Brightspace. 
Users familiar with Brightspace APIs are aware that the first time a user accesses an API app from Brightspace, a permissions consent message appears. This message prompts an individual user to authorize the app to make API calls on their behalf. This prompt is kept in place for security purposes.
The integration makes use of the following Brightspace APIs:
Sync grade value for a specific grade object, for a particular user
Get details of a specific grade
Create a new grade item (pass/fail)
Update the value of a grade item (pass/fail)
Delete a grade item (pass/fail)
Get all quizzes in a specific course
Update quiz (header and instruction fields)
Troubleshooting and FAQs 
Proctoring does not start when taking a quiz
As a learner, if you take a quiz that does not start proctoring, there may be a deployment issue for that quiz.
In the Integrity Advocate widget, on the Quiz Settings tab, verify that the quiz is enabled to be proctored.
Ensure the Integrity Advocate tool is turned ON at both the course and organization level.
Ensure your configuration variables under d2l.3rdParty.IntegrityAdvocate. are configured with the correct values.
API calls for the integration are failing
This integration makes use of basic GET calls (see above) to get particular objects from the courses. If the widget does not load a list of quizzes, it’s likely that the user viewing the widget does not have permissions to get/view the list of quizzes.
Typically hidden/invisible quizzes won’t be available to learners.
Quizzes that haven’t started yet likely won't appear to learners.
Typically, all objects appear to instructors and administrators whether they are set to be visible or not.
Proctoring results are not appearing in the widget
If you note that proctoring results do not appear in your Integrity Advocate homepage widget:
It’s possible the user does not have their proctoring session closed. In such cases you need to wait for the automatic 10 minute timeout before their session is closed and submitted for review.
Can't see the Integrity Advocate widget on the homepage
If a user says they cannot see the Integrity Advocate widget on their course homepage:
Ensure the widget is added to the homepage currently in use for the course.
Ensure the widget is shared to the course by updating the LTI 1.3 deployment sharing rules.
The system flagged a session as failed but it should be a pass
To override the course level activity results in the Integrity Advocate widget:
Click on the Participants tab.
Select a submission and click Override to manually override proctoring results. 
Note that overrides cause all associated Integrity Advocate Pass/Fail grade items to be updated respectively. This override is a course level change and does not reflect an individual activity.
Existing Client Looking To Upgrade
Are you an existing Integrity Advocate client? If you setup your integration prior to May 2021, you are using the classic version of Integrity Advocate. With this release, D2L recommends that all existing clients consider upgrading to the latest version of Integrity Advocate, which provides improved work flows and greater flexibility in everyday use.
D2L tips and best practices for using the newest version:
The classic integration uses LTI 1.1. The latest version uses LTI 1.3. Both integrations can live within your platform in tandem and will not conflict with each other. For example, you can have the LTI 1.1 widget and the LTI 1.3 widget added to the same homepage. Both widgets will show the same page. However, D2L only recommends having one on a page at a time to avoid user confusion.
Set up the new version of the integration, while leaving the existing integration in place. Do not remove or delete the existing configurations you have. To safely manage user access, we recommend only removing Sharing Rules for your LTI Tool Providers, LTI Links, and Remote Plugin.
Remove the classic LTI 1.1 widget from course homepages. Doing so simply removes it from your homepages and does not delete or remove any course data. Adding it back to the homepages, brings back all course data. 
While removing the old widget, add the new LTI 1.3 widget.
Let instructors know that they no longer need to copy and paste HTML scripts into their quizzes. Enabling proctoring within the widget is everything they need to get up and running.
To enable and configure Integrity Advocate:
From the Admin Tools menu, select Organization Tools.
Search for Integrity Advocate and toggle the switch on.
From the Admin Tools menu, select Integrity Advocate Settings.
For App ID, enter your Integrity Advocate App Id. Note: This can be obtained by contacting Integrity Advocate at sales@integrityadvocate.com

Under Proctored Roles, select the role(s) for which you wish to have Integrity Advocate proctoring enabled.Note: We recommend Student and any other Learner roles.


Click Save and Close.

Create Integrity Advocate Service Account and Role
Integrity Advocate utilizes a service account role and user to make API calls to your D2L Brightspace instance.
To create the role:
Download the Role import file for configuring the Integrity Advocate service account.
From the Admin Tools menu, select Roles and Permissions.
Click Create/Copy.
Select Start Fresh and create the new role with the following settings:
Name: Integrity Advocate Service Account
Description: Service account role for Integrity Advocate integration
 Enable Cascading Role
 Select the following checkboxes:Access inactive coursesAccess past coursesAccess future courses, selecting the following radio buttons: 
Access all course sections
Access all course groups
Click Save.
On the Role Interactions page, ensure that any administrator accounts can Search For, Enroll, and Impersonate the new role by checking all the appropriate administrator checkboxes.
Click Save.
Click Import/Export.
Select Import role permissions from a CSV file and click Next.
Select the new Integrity Advocate Service Account role and click Next.
Click the Choose File control and select the role export file from Step 1 and click Next.
On the Preview Import page, ignore any errors and click Import.Note: The errors are for controls you don’t have installed or enabled and can be safely ignored.
Click OK.
Set IMS Role Mappings for the Integrity Advocate Service Account
From the Admin Tools menu, select IMS Configuration.
Click Edit Role Mapping in the Institution Role column.
Check the boxes for Administrator, Faculty (1.1 Only), and Instructor.
Click Save.
Click Edit Role Mapping in the Context Role column.
Check the boxes for Administrator and Instructor.
Click Save.
Create the Integrity Advocate Service Account User
Integrity Advocate utilizes a service account role and user to make API calls to your D2L Brightspace instance.
To create the user:
From the Admin Tools menu, select Users.
Click New User.
On the new user creation page, enter the following details:
OrgDefinedId: ia.serviceaccount
Legal First Name: IA
Legal Last Name: ServiceAccount
Email: noreply@integrityadvocate.com
Role: Integrity Advocate Service Account
Username: ia.serviceaccount
Password: Generate a strong passwordNote: D2L recommends using a random password generator, such as https://passwordsgenerator.net
Click Save.
Send the following information to your Integrity Advocate account manager:
Instance URL, for example https://yourorganization.brightspace.com
Password that you generated in Step 3, above. 
Register the Integrity Advocate External Tool
Integrity Advocate makes use of an LTI 1.3 tool to provide integrated functionality. Within this widget, you can review participant results, set admin options, review credit consumption, and read Integrity Advocate tool news/updates.
From the Admin Tools menu, click Manage Extensibility.
In the LTI Advantage tab, click Register Tool.
Select the Dynamic radio button.
In the Tool Initiation Registration Endpoint field, enter the following Url, adding your Integrity Advocate app ID at the end. For example, https://www.integrityadvocateserver.com/integration/d2l/DynamicRegister?app_id=YOUR-APPID-HERE
Check the Configure Deployment checkbox.
Click Register.
A new window opens and displays the message “Success!”. Close the success message window and return to your D2L Brightspace instance.
From the Admin Tools menu, click Manage Extensibility.
Click the LTI Advantage tab and change from Enabled view to All view. Then click All. 
Click the Integrity Advocate LTI 1.3 tool name.
Toggle the Enabled switch on.
Click Save.
Scroll to the bottom and click View Deployments.
Click the Integrity Advocate LTI 1.3 deployment name and check the following boxes under security settings:Org Unit InformationFirst NameLast NameEmailUser ID
Under Make tool available to, click Add Org Units.
Select the desired course(s) or just add the top level org unit and all descendents.
Click Add.
Click Save.
Scroll to the bottom and click View Links.
Click the Integrity Advocate LTI 1.3 link name.
Set the Height field to 1000.
Click Save and Close.
Add the Integrity Advocate Widget to Homepages
From the Admin Tools menu, select Homepage Management.
Select the homepage that you want to include the Integrity Advocate widget.NOTE: D2L recommends a full width display (Height 1000) for the Integrity Advocate widget. If you’re using the Basic layout, click Change Layout, then select Basic Plus and click  Update.
Click Add Widgets in the full width section and search for Integrity Advocate.
Select Integrity Advocate LTI 1.3 and click Add.
Click Save and Close.
Using the Integrity Advocate Widget
There are four tabs within the Integrity Advocate LTI 1.3 widget.
Participants: Search for participant review results for all of the activities within this course that have Integrity Advocate enabled.
Activities: Manage the Integrity Advocate settings for each activity in your course. Enable/disable, create a grade item, and select rules for each activity.
Admin: Update the administrative settings (contact info) and review credit consumption details.
News: Review all of the latest updates on new Integrity Advocate features and upcoming/past releases.
Enable Integrity Advocate on an Activity
To enable Integrity Advocate on a course activity:
Within the Integrity Advocate LTI 1.3 widget, click the Activities tab.
Find the activity you want to enable for Integrity Advocate proctoring.
Check the box for Enable Integrity Advocate for the desired activity.
If you wish to use a grade item, check the box Use Grade Item for the desired activity.NOTE: This creates a new grade item updated by Integrity Advocate with a review status. Integrity Advocate does not change any grade items you may have set up.
Click Select Rules and check the boxes for the desired rules for the activity.
Click Submit.
Remove Integrity Advocate code from quizzes
This topic only applies when upgrading Integrity Advocate and is not necessary when configuring a new install.
The new D2L Brightspace/Integrity Advocate integration no longer requires instructors or admins to paste code into the Introduction, Header, and Submission views of quizzes. These code blocks must be removed on any quizzes you intend to use in the future.
To remove Integrity Advocate code from quizzes:
Determine which courses have quizzes that use Integrity Advocate.
On the applicable Course home page, click on Quizzes in the navigation bar, or click Course Toolsand select  Quizzes from the drop down menu.
Find the quizzes that have Integrity Advocate installed.
Click on the applicable quiz name to edit the quiz settings.
In the Introduction field, click the </> icon in the editor and remove the following code: <iframe src="/shared/IntegrityAdvocate/IntegrityAdvocateHeader.html" style="height: 0px; width: 0px; border: none;"></iframe>
In the Page Header  click the </> icon in the editor and remove the following code: <iframe src="/shared/IntegrityAdvocate/IntegrityAdvocateHeader.html" style="height: 0px; width: 0px; border: none;"></iframe>
Scroll up and click on the Submission Views tab.
Click the name of the submission view to edit it. 
 In the Message field, click the </> icon in the editor and remove the following code: <iframe src="/shared/IntegrityAdvocate/IntegrityAdvocateClose.html" style="height: 0px; width: 0px; border: none;"></iframe>
Click Save.
Remove Integrity Advocate LTI 1.0 Widget from course home pages
This topic only applies when upgrading Integrity Advocate and is not necessary when configuring a new install.
The new D2L Brightspace/Integrity Advocate integration uses the LTI 1.3 standard to integrate with your Brightspace instance and provide you with access to Integrity Advocate participant results, admin options, credit consumption, etc.
Remove the existing Integrity Advocate LTI widget from any course home pages where it currently is displayed. To remove the Integrity Advocate LTI widget from a course page:
In the Admin Tools menu, select Homepage Management.
Click on the name of a homepage that has the Integrity Advocate LTI 1.0 widget on it.
Scroll to the Widgets section and click the X to remove the Integrity Advocate widget.
Click Save and Close.
Delete the Integrity Advocate Shared Files
This topic only applies when upgrading Integrity Advocate and is not necessary when configuring a new install.
As part of the original Integrity Advocate installation, files would have been added to the Shared Files section of your instance. The new version of the integration does not use these files and they should be deleted.
To delete the Integrity Advocate shared files:
In the Admin Tools menu, select Shared Files.
Locate the Integrity Advocate folder and check the checkbox next to it.
Click the trash can icon at the top of the folder and file list to delete the folder.
Update Integrity Advocate Service Account Role
This topic only applies when upgrading Integrity Advocate and is not necessary when configuring a new install.
Integrity Advocate utilizes a service account role and user to make API calls to your D2L Brightspace instance. Integrity Advocate’s new D2L integration allows for the addition of Integrity Advocate to not just quizzes, but also Assignments and Content activities. An update of the role permissions is required to give our system access to these activities.
To update the role:
Download the Role import file for configuring the Integrity Advocate service account.
From the Admin Tools menu, select Roles and Permissions.
Click Import/Export.
Select Import role permissions from a CSV file and click Next.
Select the Integrity Advocate Service Account role and click Next.
Click the Choose File control and select the role export file from Step 1 and click Next.
On the Preview Import page, ignore any errors and click Import.Note: The errors are for controls you don’t have installed or enabled and can be safely ignored.
Click OK.
Reset the Service Account Password
This topic only applies when upgrading Integrity Advocate and is not necessary when configuring a new install.
Integrity Advocate’s new D2L integration uses the existing service account we created when we initially set up Integrity Advocate on your instance. We will reset the password so that the new global Integrity Advocate app can be authorized to integrate with your instance.
Generate a new, strong password. Note: D2L recommends using a random password generator, such as https://passwordsgenerator.net
From the Admin Tools menu, select Users.
Search for ia.serviceaccount and click on the account name to edit it.
Update the password to the one you generated in Step 1 and click Save.
Send the updated password to your Integrity Advocate account manager.




--------------------------------------------------


ITranslateReadResultIdsForLineItemWithLineItemTypeResponse


Ref # 


Plug-in Name 


Required for Push 


Note 


18 


ReadResultIdsForLineItemWithLineItemTypeResponseRequiredTranslator 


Yes 


Creates identifiers for the grade items to be sent to the SIS in an LIS-specific format. 





--------------------------------------------------


LTI Advantage (v1.3)

Learning Tools Interoperability® (LTI®)  is an integration that allows Brightspace to  connect with external learning tools easily and securely. The connection supports Brightspace by passing information in a standards-based way to the tool. These include  the role of that user (learner or instructor) and the course where they launched the tool from (for example, Biology versus Creative Writing). It can create user accounts in the tool upon launch as well, acting as both a registration and single sign-on in one easy workflow. Additionally, LTI Advantage supports grade return from your LTI tool to Brightspace gradebook. The LTI Advantage standard is large and covers many areas. D2L doesn't yet comply with all aspects of the standard, but is committed to ongoing support and innovation.
LTI Advantage (1.3)
LTI Advantage is now the only version of LTI supported by IMS. LTI Advantage consists of a launch protocol and a package of optional extensions:
Launch: The LTI 1.3 core launch flow follows a more modern security approach by adopting OpenId Connect (OIDC) specifications, OAuth2 and JSON Web Tokens.
Assignment and Grades Services v2.0 (AGS): A replacement for the Basic Outcome service. AGS allows the LTI tool to create and manage grade objects and exchange scores and instructor comments. AGS includes additional capabilities two-way gradebook integration, where the LTI tool can request updates to grade values linked to the tools Assignments; allowing the Brightspace gradebook and tool to stay in sync.
Names and Roles Provisioning Services v2.0: The service that allows the LTI tool to request a list of participants in a course offering in a safe and secure fashion. Typically used to repopulate the classlist in the external tool.
Deep Linking 2.0: A replacement for Content Item Message (CIM) service. Provides an intuitive way to add specific content from a publisher directly into Brightspace content, creating a seamless learner experience.
What is LTI Advantage vs LTI Advantage Complete?
The LTI Advantage  badge is awarded by IMS Global when a tool certifies their integration against the IMS certification suite using LTI 1.3 and one or two of the available extensions. If the certification is completed with LTI 1.3 and all optional tool extensions, the LTI Advantage Complete badge is awarded.
LTI Advantage (1.3) advantages
LTI Advantage includes many great new features that are improvements against earlier LTI versions:
Updated administrative workflows, including a new centralized process to register and deploy a tool. This aims to reduce and simplify where tools can be created in the org, providing LTI administrators better visibility of tool usage and location.
Better control over which extensions can be implemented, not only during the registration process but also during deployment. This allows LTI administrators better control over which extensions get implemented for which tools.
Assignment and Grade service (AGS):Supports multiple grade items linked to the same LTI link, removing the need for the LTI tool to use Brightspace APIs to support this workflowSupport for comment pass back from the external tool to the Brightspace Gradebook.Support for the external tool to request updated grades from the Brightspace gradebook to keep the tool's grades in sync
Anonymous launch support for simple LTI launches that do not require context.
Deep Linking:Support for optional start, end and due dates that can be applied at the content topic level.
Updated IMS Configuration UISupport for both Institutional and Contextual role passing. This allows the external tool to know the user’s role at both the Organization level, as well as their role at the org where the activity was launched. For many clients, these could be different roles.

LTI Advantage Service User

LTI Advantage uses a D2L generated role and user, called the LTI Advantage Service User, to log all LTI grade activity against. This new role and user are used in all LTI Advantage tools and is generated at initial tool registration.


If the role or user is accidently disabled, D2L auto-generates either the missing user or role the next time the tool is registered.


The role D2L creates has no permissions, and cannot be seen in classlists.


The role is limited to the LTI Advantage scopes that the LTI administrator has enabled at the Registration and Deployment level for the specific tool.


If the user is disabled, logging of actions still occurs.


Getting Started with LTI Advantage (1.3)
Familiarize yourself with LTI Advantage:IMS Global LTI Advantage OverviewIMS Global Learning Tools Interoperability: access to LTI 1.3 and extension specificationsLTI Advantage Product Certifications: Stay up-to-date as tools certify for LTI AdvantageOAuth2.0OIDC
Review your institution's LTI tools and their compatibility with LTI Advantage (1.3). All tools must move to LTI Advantage to keep their IMS LTI compliance.
Determine what in-house tools your institution has that are not LTI Advantage certified and what is needed to get them there.




--------------------------------------------------


LTI Advantage - Developer FAQ

General
Q: Does LMS implement quota policies or other usage restrictions, like rate limits, for extension requests?
A: Yes and No. For LTI Advantage 1.3 the LTI endpoints for AGS and NRPS are rate limited the exact same way as Brightspace APIs. Rate limiting is based on a per integration basis, not a per user basis. LTI legacy 1.1 outcomes are not rate limited.
Q. I’m Receiving a “422 unprocessable entity” when sending a line item score from a tool to the platform.
A. This error message is sent when a tool attempts to send a line item score for a non-gradeable user, this functionality is controlled by the Can be graded in Grades option. This can be found by navigating to Roles and Permissions > Edit Settings > Tool Behaviour Options.
Authentication
Q: I'm receiving a 404 when trying to re-launch back to the platform.
A: You must include all the parameters (including optional state) when performing a re-launch to bind the request.
Q: What values are required in the request for an auth token?
A: The below values are required:
iss: A unique ID for who issued the JWT. the value of client_id from the platform. Same as sub.
sub: Same as iss, client_id value of Oauth from platform.
aud: Authorized server identifier(s), provided by the platform.
Given in tool registriation via UI.URL: https://api.brightspace.com/auth/token They don’t go here, only pass this value in aud claim.
iat: Timestamp the JWT was created.
exp: Timestamp for JWT to expire.
jti: A unique identifier (potentially reusable) for the token.
https://www.imsglobal.org/spec/security/v1p0#using-json-web-tokens-with-oauth-2-0-client-credentials-grant
Q: Does Brightspace support public and private keys from a tool?
A: No, as per Best Practices, Brightspace decided to support tool's JWK Key Set only.
Q: I'm receiving "error_description": "Error validating assertion: KeyId not found in token".
A: Brightspace supports tool's JWKS routes. The key must be wrapped in a keys array as per the JWKS standard.
Q: I'm receiving an "error":"invalid_client"?
A: The iss must be the client id which is the same as the sub. It was a late addition to the spec. 
Q: When requesting an access token for the LTI service, I am receiving failure which states something like:
{"error":"invalid_grant","error_description":"Client is not authorized to set a 'kid' claim"}
{"error":"invalid_grant","error_description":"Error validating assertion: KeyId not found in token"}
A: Kid should only ever be included in the header and not in the payload.
Q: Sometimes sending a request to the auth service fails with an unknown error, such as:
{"error":"server_error","error_description":"An unexpected exception occured"}
A: This is being thrown by our authentication service, which can be difficult to debug. Usually the errors are more clear, but in cases where they are not, our best chance is to have the tool retrieve the request and send it to us to debug the issue.
Q: Does the platform support GET or POST for authorizing redirect URLs?
A: Both GET and POST are supported methods
Q: Does the platform support one-time public keys or JWKS URL?
A: We support the use of JWKS URLs for both the platform keys and to retrieve the keys from the tool.
Q: What signing algorithms are supported: RS225 or RS512?
A: RS256
Q: What size of key is supported: 1024 or 2048?
A: 2048
Q: What is the token retrieval endpoint for the platform?
A: Brightspace Oauth2 Access Token URL: https://auth.brightspace.com/core/connect/token
Q: I am receiving a Bad Request.
A: Check the D2L System Log for any of the following messages:
Invalid Message Hint: The hint doesn't exist.
Message Hint Expired: This hint expired. Hints have a ten-minute expiry window for the initial login.
Failed to parse message hint: The hint doesn't have the correct format. See spec.
Assignments & Grades Service
Q: Which OAuth 2 grant type does the platform support for Assignments & Grades service?
A: We follow the security spec: Oath 2 client credentials grant.
Q: My tool is returning a grade, but the grade book is not being updated.
A: The Brightspace grade book will only reflect grades from the tool with a status of Fully Graded.
Q: My LineItem pass back is failing and/or not getting created when adding it via Insert Stuff.
A: This is by design. We recommend using a QuickLink instead if a LineItem is required.
Q: "Line item cannot be associated with a widget context_launch resource link id".
A: Standalone line items will be accepted, but a line item cannot be associated with a widget in Brightspace.
Names & Roles
Q: I am not getting users unknown to my tool from the class list when using the Names & Roles Extension.
A: There are a few reasons that could affect how the platform decides to send users over:
“Send Unknown Users” Toggle: The obvious one is the toggle at the deployment level that dictates whether a tool is allowed to receive users it doesn’t already know about. As of Brightspace version 20.20.11, if “Classlist including users not known to this deployment”, then an NRPS request from the tool will auto-generate an LTI UserId for any user who has never launched an LTI link in Brightspace.
Structure of your GET: A tool side thing, it's possible to request the class list in filtered views that don’t ask for “all users”. Tools should ensure that your request is structured to get any users in a given course via their N&R API call.
Deep Linking
Q: I'm receiving an "IDX10511: Signature validation failed."
A: In this case, the modulus started with 00. There is a bug in .NET that is unable to handle this and the extra byte should be removed before encoding.
Q: Posting back during the deep linking workflow returned me to an Internal Error or a 500.
A: KID must be included in the header of the JWT.
Q: The deep linking return is failing with no error.
A: Always check the System Log. Further information including the message will be visible in the system log to help troubleshoot the issue.
Example: Could not find public key with id would mean that the KID in the JWT doesn't appear in the JWKS.
Q: I'm getting a bad request when sending back data from my tool.
A: The message hint expires after six hours. If you are in the tool for longer than six hours before returning back data, the message hint will expire and result in a bad request.
Migration API
Q: I have a custom widget using LTI 1.1. Can I migrate it using the API to 1.3?
A: No. We recommend recreating the widget using the LTI 1.3 placement worklfow.



--------------------------------------------------


LTI 1.3 permissions

Tool
Permission

Details

External Learning Tools
Manage External Learning Tools Configuration

Allows a role to:
See the External Learning Tools item in the Admin Tools menu
Modify the default tool consumer information (if the permission is enabled at the org level) and org unit context information (if the permission is enabled at the org)

External Learning Tools
Launch External Learning Tool Links
Allow role to follow Quicklinks to external learning tools (tool provider links). Roles without this permission receive an authorization error when they follow Quicklinks to external tools.
External Learning Tools
Launch External Learning Tool Links

Allow role to see the External Learning Tools link in the Admin Tools menu and create and edit external learning tool links

External Learning Tools
Manage External Learning Tool Links
Allow role to see the External Learning Tools links in the Admin Tools menu and create and edit external learning tool links
External Learning Tools
Manage External Learning Tool Providers
Allow role to see the External Leaning Tools link in the Admin Tools menu and modify integration details for external tool providers
External Learning Tools
Create Quicklinks from available External Learning Tools links
Create Quicklinks from the Brightspace Editor from External Learning Tools links that are available to the org unit. Also applies to API routes.
External Learning Tools
Create External Learning Tool Links from available External Learning tool providers

Allows role to:
Create new External Learning Tool links using only tool providers that are already approved
This permission gives users a subset of the permission Manage External Learning Tool Links
Note: This requires Launch External Learning Tool links and Create Quicklinks from Available External Learning Tools links.

External Learning Tools
Manage LTI Advantage tool registrations
Provides a role access to the Manage Extensibility tool, specifically for the LTI Advantage tab. This enables the role to register new LTI Advantage compliant tools
External Learning Tools
Manage LTI Advantage Tool Deployments
Provides the role access to the LTI Advantage tab in the External Learning Tools page. From there, users can create a deployment of a currently registered tool. This permission also allows the user to see the Create Deployment option during the Dynamic Registration workflow.
External Learning Tools
Manage LTI Migration
Provides the role the ability to migrate LTI links through a Brightspace API. For more information, refer to the LTI Migration topic.
External Learning Tools
Download LTI Launch Data Set
Provides the role access to download the LTI Launches Data Set. Note: This requires the appropriate permissions to download Brightspace Data Sets. 
External Learning Tools
View LTI Migration Log
Provides the role the ability to access the Migration Audit Log area of the External Learning Tools item.
IMS Configuration
Manage IMS configuration
Enables the role to access the IMS Configuration tool, enabling them to map org units and roles to IMS standards.
Grades
Manage Items and Categories
Enables the role to create, edit and delete associations between the gradebook and the LTI content item
Recommended permissions setup
When creating an ideal operating state for user permissions, consider the following:
Instructors do not require full manage permission permissions for links, even at the course level
Administrators are the only users that can manage both LTI links AND tool providers
Instructors create and insert LTI objects into course content
Instructors should only be permitted to create links from vendors trusted by the institution (a trusted vendor indicates an administrator to create a Registration, Deployment, or Tool Provider for the integration)
Learners typically only require launch permissions (and should never have the Manage External Learning Tool Links permission for any reason, as this can create numerous unmetered LTI links)
If required, learners can be enabled to create LTI links, using the Create External Learning Tool Links from available External Learning Tool Providers permission, from trusted vendors.
Instructors can be given the View Migration Audit Log permission for their course but  must contact an administrator with permission to create LTI tools and deployments to fix issues.




--------------------------------------------------


About LTI 1.3 launch and authentication

As a result of new requirements from LTI 1.3, D2L updated several areas of the Brightspace platform. With an entirely new process for deploying and managing learning tools, there are a few things you will want to learn to better support your instance.
Platforms now act like an OpenID Connect provider, communicating the user's identity to the tool using the OpenId login flow.  The full authentication workflow comprises of an OIDC Launch, then a subsequent 1.3 Launch.
All LTI services are direct platform-to-tool communications and do not go through a browser. Tool-to-platform service requests are authenticated via a bearer token for access (OAuth2 client credentials grant code).
There are three main components of the LTI 1.3 security model:
OIDC: An initial OpenID Connect (OIDC) launch occurs, wherein the tool is notified to an upcoming LTI launch and a third party-initiated login OIDC flow happens. This serves as a way to identify which user gets launched and helps ensure no launches are intercepted. D2L uses the LTI launch endpoint as the login URL.
JSON Web Tokens: After the OIDC launch, we perform the 1.3 launch. When the launch payloads are constructed, they are signed as a JWT. All LTI messages are sent as JWTs, signed by the sender of the message. The receiver uses the public key, identified by KeyID, to verify the JWT signature. The receiver of this token can verify:
Who sent itThat the contents have not been altered
OAuth2: To extend the services like Assignments & Grades, OAuth2 tokens are used to make subsequent service API calls, such as retrieving scores from the gradebook or syncing a new result.
Registration
Creating a new learning tool starts with an LTI Advantage administrator registering a new tool. Registering an LTI tool requires an administrator to either use the Dynamic Registration workflow (if available by the tool) or the manual workflow where the tool provides core details, such as the tool domain URL, tool redirect URL or keyset URL.
For any tool to create links, it needs to first be registered. Disabled registrations do not allow users to perform launches or use the tool. When setting up a new tool, D2L recommends that you disable it during setup. This allows administrators to create links and configure the tool fully before enabling it.
The required fields in the UI come directly from your tool. It is possible for tools to provide many redirect URLs. To add more, click + Add Redirect URL.  The Domain URL is used in Brightspace to assist with domain matching, allowing Brightspace to suggest tools to bind ad-hoc links to during creation. You only need the Keyset URL if you use the extensions.
Substitution and custom parameters can be created at the registration level and cascade down to the deployment and link levels.
Once a tool is registered, you receive a Client Id, Brightspace Keyset URL, and a Brightspace OAuth2 Access Token URL to provide to the tool.
Domain: Used for domain matching only (when creating new links through content to populate the dropdown).
Redirect URLs: Redirect URLs which are end points where the authorization response can be sent to. This can be one or many values.
OpenId Connect Login URL: The OpenId URL of the tool that is the location where the tool will launch to during the initial OIDC launch.
Target Link URI: If a tool does not return a URL for the LTI link (ltiResourceLink) in the Deep Linking response, the target link URI is used as the URL. If neither are supplied, the domain in the LTI Registration is used.
Keyset URL: The URL where the tool stores the keys. Used as a reference point when D2L performs a key lookup during the OIDC launch.
Dynamic Registration
Dynamic Registration is an LTI specification that allows for the automatic creation of a registration within a tool and platform, without the need to manually complete the registration. Dynamic Registration also supports the optional creation of the deployment and org level links within Brightspace. 
Note: Dynamic Registration is publicly available for tools and platforms to implement and is in the Public Candidate Final stage of the standards development process.
The tool provides an endpoint URL to initiate the dynamic registration process; this endpoint must be https. When launching to the tool endpoint, D2L sends the tool a one-time use token that is given to the tool as part of the configuration URL; this token expires after 1 use or 1 hour, whichever comes first.
If deployment or links fail to be created, the registration process is still considered successful. The Dynamic Registration APIs return errors to the tool if there is a failure.
Out of scope: Registration updates
Registration level:
Validation exists following existing registration validation rules
URLs must be in HTTPS format
Name and Domain must be unique across Org
Keyset must be reachable




--------------------------------------------------


Add an LTI link to a navbar

Currently, you can use the following types of External Learning Tool links:
Learning Tool: An interface which provides access to features and functions for the overall course but not for a learner's learning path, including help documentation, dashboards, or administrator functions for the LTI tool.
Learning Activity: An interface in which learners ultimately interact within the context of the course's learning path (the Brightspace Content tool). A Learning Activity could be a piece of content or an assessment, but its interface stands on its own and provides the learner with a meaningful learning experience.
Embedded Learning Activity: This is the same as a Learning Activity except that it is embedded within another content file. The most common example is a media (video) player.
Add an LTI learning tool link to a Brightspace navbar
From the Admin Tools menu, click Navigation & Themes.
Click on the course navbar you want to modify.
Click Add Links.Figure: The Add links button on the Edit Navbar page.
Click Create Custom Link.
Ensure the following fields are filled in:
Name: The name of the link as it appears in the navbar.URL: Click Insert Quicklink > External Learning Tools and then select the LTI tool you want to create a navbar link for.Behavior: Determines the behavior of the user interface when the link is clicked:						If you selected New window/tab, specify the Width (px) and Height (px) of the new window/tab.Under Browser Attributes, specify if you want the new window to include the Menubar (File, Edit, etc.), or the Toolbar (Back, Refresh, etc.) or neither of these options.Description: Provides an optional description of the custom link.Icon: An icon to use with the custom link.Availability: Determines the visibility of the custom link.                        To share with child organization units, select the Share with child org units checkbox.To limit the visibility of the custom link to specific roles, select the Limit to specific roles check-box and then select the roles.To limit thevisibility of the custom links to users with specific locales, select the Limit to specific locales checkbox and then select the locales
Click Create.
Click Save and Close.




--------------------------------------------------


Tool Registration, Deployment, and Links

Register an external learning tool for LTI Advantage
Registration is the first step of integrating a tool with a platform and completes the security and sing sign-on (SSO) processes of the integration. 
Important: An external learning tool can only have one functioning domain registered with a platform.
The following information is relevant to the tool registration.
Client Id: The ID used in OAuth2 authentication to make requests to the services (Names and Roles, Assignment and Grade)
Brightspace Keyset URL: Where Brightspace keys are stored. Tools require this during the registration and are used during launch (D2L signs the launch message, and the tool validates D2L's signature with this)
Brightspace OAuth2 Access Token URL: Where tools go to retrieve new access tokens for OAuth2 service requests
OpenId Connect Authentication Endpoint: The endpoint where Brightspace sends the login response to
Brightspace OAuth 2 Audience: The intended recipient of the token			
Issuer: The URL of the Brightspace instance; Tool validates that we set this as the issuer when we sign our launch message
Note: To register a tool, ensure the Manage LTI Advantage Tool Registrations and Manage LTI Advantage Tool Deployments permissions are set at the organization level, and complete the following steps.To register a tool
From the Admin Tools menu, click Manage Extensibility.
From the LTI Advantage tab, click Register Tool.Figure: The Register Tool button.
Choose either Dynamic or Standard registration, click Register.
For Standard registration complete the following fields (* indicates required fields):
Name*DescriptionDomain* Note: Domains can only be used in one enabled registration at a time. If you attempt to register a tool with a domain that is already in use, you will be prompted to disable the existing registration.Redirect URLs*Note: There should not be more than a few redirect URLs. Redirect URLs must be an exact match and wildcarding is not supported.OpenID Connect Login URL*Target Link URIKeyset URLExtensionsFor Dynamic registration, complete the following fields: enter the Dynamic Registration URL provided by the tool. It is optional to allow the tool to also create the deployment with links. Once the Dynamic Registration workflow is complete, the Registration is disabled by default as per the specification. It is recommended to review the Extensions, Parameters, and Security Settings (in the deployment if applicable) that the tool has asked for to ensure they meet your organization's use cases.Note: Dynamic registration redirects to the tool’s endpoint in a new tab. This prevents same site and cross-site cookie issues.
Under Roles, choose to send IMS role data for the Institution and Context roles or only the Context role. If the Send Institution Role checkbox is selected, Context and Institution roles are included in the role mapping from the IMS configuration when the tool is launched. The user's Context Role is also included unless the security setting at the Deployment is set to Anonymous. If the Send Institution Role checkbox is cleared, only Context roles are included.
Substitution Parameters: Users can select from a pre-defined list of parameters that is dynamically substituted with a value from the LMS at the time of launch. Brightspace currently supports the following parameters:$Context.id.history$CourseOffering.sourcedId$CourseOffering.title$CourseSection.label$CourseSection.sourcedId$CourseSection.title$CourseSection.timeFrame.begin$CourseSection.timeFrame.end$CourseTemplate.sourcedId$CourseTemplate.title$Person.address.timezone$Person.email.primary$Person.name.family$Person.name.full$Person.name.given$Person.sourcedId$ResourceLink.available.startDateTime$ResourceLink.available.endDateTime$ResourceLink.description$ResourceLink.id.history$ResourceLink.submission.endDateTime$ResourceLink.title$User.id$User.username
Customer Parameters: In instances where tools need to define both the name and value of a custom parameter, they can be defined here. These parameters are not dynamically replaced and are constrained to sending a static value for each launch.Note: Substitution Parameters and Custom Parameters created at the Registration level cascade to the Deployment and Link level.
Click Register.
Deploy an external learning tool for LTI Advantage
Deployments allow sharing of registered tools in Brightspace to specific org units or descendants of parent org units. When you deploy a tool, specify the extensions available along with all the applicable security settings. A check box is available to allow LTI Administrators to set if all links below that level are automatically set to Open as External Resource.
Note: To deploy an external learning tool, ensure the Manage LTI Advantage Tool Registrations and Manage LTI Advantage Tool Deployments permissions are set at the organization level and the tool has been registered.To deploy an external learning tool
From the Admin Tools menu, click External Learning Tools.
In the LTI Advantage tab, click New Deployment.
Figure: The New Deployment button.
From the Tool drop-down list, select Registration.
Enter a Name and Description.
Select an Extension, the desired Security Settings, and Configuration Settings.
Set any required Substitution Parameters. Users can select from a pre-defined list of parameters that is dynamically substituted with a value from the LMS at the time of launch. Brightspace currently supports the following parameters:
$CourseSection.timeFrame.begin$CourseSection.timeFrame.end$ResourceLink.available.startDateTime$ResourceLink.available.endDateTime$ResourceLink.submission.endDateTime
Set any required Customer Parameters:in instances where tools need to define both the name and value of a custom parameter, they can be defined here. These parameters are not dynamically replaced and are constrained to sending a static value for each launch.
Select Add Org Units to authorize sharing of the tool.
Click Create Deployment.
Note: Substitution and Custom parameters that you create at the Registration level cascade to the Deployment and Link level. After a deployment is created for that Tool, the Tool for that deployment can no longer be changed.
Once the tool is successfully deployed, you receive a Deployment Id. This is a GUID-based globally unique ID for this specific deployment. It is used to uniquely reference this specific deployment of a registered tool, which may be required by the tool during setup.
Registered tools can have multiple deployments. Each individual deployment can be unique, supporting the ability for different LTI extensions and Security Settings per deployment. The deployment is what shares the learning tool to courses. The Add Org Units sharing button at the bottom of the creation screen for deployments is how your new tool is made available to your courses.
Substitution and Custom Parameters can also be created at the Deployment level and cascade down to the link level. If parameters are created at the Registration level, they are visible at the Deployment and link levels, but are greyed out and not editable. If a parameter is created at both the Registration and Deployment level, the Deployment parameter is used in the LTI launch.
Create an external learning link for LTI Advantage
Once you successfully create a tool deployment, you need to create the LTI links. Links can be created for use in the org unit(s) from the deployment, or users with permissions can create individual links at the org level where the tool is deployed to. In cases where a tool requires multiple LTI links to be created per course or for many courses, the tool would provide a deep linking workflow to enable users to create the links quickly and easily.
Most integrations create the LTI links via deep linking for you. But on occasion you may need to create an LTI link manually. You can create these in the following ways:
From the deployment page of a newly deployed tool, by clicking View Links.Note: Links created for a deployment appear in all courses the deployment is shared to. Substitution and Custom Parameters can also be created at the Link level. If parameters are created at the Registration or Deployment level, they are visible at the link level, but are grayed out and not editable. If the same parameter is created at the Registration, Deployment and link level, the link parameter is used in the LTI launch.
Directly from the External Learning Tool page in a course, under LTI Advantage, you can add new links. Items highlighted and clickable in blue are links you can edit created at the course level. Greyed out link names are links created at the deployment level and cannot be edited at the course level. Note that links created at the org unit will not be visible from the deployment level.
To create an LTI link
From the Admin Tools menu, click External Learning Tools.
On the LTI Advantage tab, select an existing deployment.
Scroll to the bottom and click View Links.
Click New Link.
Specify the following fields on the Create Link section:
Name: The desired name for your content selector. The name you specify here is the name that appears in the UI in other areas.URL: The launch point URL that the user navigates to when they click the content selector.Description: An optional description to help users understand what this tool does.Type: The type defined dictates how the link can be used. The default value is Basic Launch, meaning the link only performs the usual LTI launch. For deep linking, select one of the following deep linking selector types supported by Brightspace:Deep Linking Quicklink: Exposes the link as a content selector in our quicklink menu areas.Deep Linking Insert Stuff: Exposes the link as a content selector in the Insert Stuff Brightspace Editor area.Note: The plugin used should be dictated by the tool provider.Width and Height: When selecting content, Brightspace opens an iFrame displaying the tool UI to discover content. These settings dictate the size of the iFrame.Substitution Parameters: You can select from a pre-defined list of parameters that is dynamically substituted with a value from the LMS at the time of launch. Brightspace currently supports the following parameters:
$CourseSection.timeFrame.begin$CourseSection.timeFrame.end$ResourceLink.available.startDateTime$ResourceLink.available.endDateTime$ResourceLink.submission.endDateTimeCustom Parameters: In instances where tools need to define both the name and value of a custom parameter, they can be defined here. These parameters are not dynamically replaced and are constrained to sending a static value for each launch.Note: Substitution and Custom parameters that are shared from the Registration or Deployment level are grayed out at the link level and are not editable. If a duplicate parameter is created at the link level, the link parameter details are included in the launch.

Click Save and Close.

Note: The following workflows result in a link defaulting to Open as External Resource regardless of the Deployment setting:
Lessons experience: if a link is added from Content > Existing Activities > External Learning Tools.
Brightspace Editor: Quicklinks created via CIM.




--------------------------------------------------


Assignments and grades services extension with LTI 1.3

Assignments and grade services (AGS) is an LTI extension. LTI 1.3 is designed to handle advanced grade interactions between a tool and a platform. It enables developers with a series of sub-services that allow the management of grade objects and values inside Brightspace.
The Assignments and grade services (AGS) comprises three services:
LineItem Service
Result Service
Score Service
Understanding the behavior of Grades with AGS
Administrators should be aware of the following considerations that affect the behavior of grades when using the Assignments and Grades Service. AGS scores are stored only when the Can be graded in Grades option is enabled for the user being assessed. If a grade item is submitted for a user with a role that cannot be graded, the grade is no longer stored, and an error message is sent to the submitting tool.
To set tool behaviors:
From your organizational homepage, click Admin Tools.
Under the Security section, click Roles and Permissions. 
Click the More Actions menu beside the role for which you want to set the Can be graded in Grades option. 
Click Edit Settings. 
Under Tool Behavior Options, select Can be graded in Grades. 
Click Save and Close. Figure: When you enable the Can be graded in Grades option, you can assess users enrolled with this role in the Grades tool. 
Administrators should also be aware that if Can Exceed is not set for a grade item, and a tool sends the grade book a grade higher than the maximum set for the grade item:
The maximum allowable score (not the higher grade submitted) appears in the grade book. 
The score sent from the tool that is higher than the maximum is recorded in an internal table for future reference. 
Note: LTI tools and D2L customers do not have access to this internal table.
To turn on or turn off the Can Exceed status for a grade item:
From the course navbar, click Grades. 
Click the Manage Grades tab and select the grade item.
On the Properties tab, under Grading, confirm or update the Can Exceed check box as applicable. Figure: The Can Exceed option in the Grading area of a grade item's Properties.
LineItem Service
The LineItem Service is used to manage the grade items for learning tools. It enables a tool to create, delete, and get details of grade items that the tool itself owns. This service offers the following capabilities:
LineItems.url: The endpoint URL for accessing the LineItem container for the current context.
LineItem.url: The endpoint URL for accessing the line item when there is only one line item associated with the resource link; If there is more than one line item, this property must be blank.
Scope
Description
Allowed HTTP Method
https://purl.imsglobal.org/spec/lti-ags/scope/lineitem
The tool can fully manage its line items, including adding and removing line items

LineItems.url: GET, POST 
LineItem.url: GET, PUT, DELETE

https://purl.imsglobal.org/spec/lti-ags/scope/lineitem.readonly
The tool can query the line items, no modification is allowed

LineItems.url: GET 
LineItem.url: GET

There are different defined media types by the LineItem Service:

application/vnd.ims.lis.v2.lineitem+json, with a sample:

					{
						"id" : https://lms.example.com/context/2923/lineitems/1,
						"scoreMaximum" : 60,
						"label" : "Math 202 Quiz",
						"resourceId" : "a-9334df-33",
						"tag" : "grade",
						"resourceLinkId" : "1g3k4dlk49fk",
						"startDateTime": "2019-03-06T20:05:02Z",
						"endDateTime": "2019-04-06T22:05:03Z"

					}
				

application/vnd.ims.lis.v2.lineitemcontainer+json, with a sample:
					[{
					"id": "https://lms.example.com/context/2923/lineitems/1",
					"scoreMaximum": 60,
					"label": "Math 202 Quiz",
					"resourceId": "a-9334df-33",
					"tag": "grade",
					"resourceLinkId": "1g3k4dlk49fk",
					"endDateTime": "2019-04-06T22:05:03Z"},
					{
					"id": "https://lms.example.com/context/2923/lineitems/47",
					"scoreMaximum": 100,
					"label": "Week 3 Assignment",
					"resourceId": "a-9334df-33",
					"tag": "originality",
					"resourceLinkId": "1g3k4dlk49fk"
					},
					{"id": "https://lms.example.com/context/2923/lineitems/69",
					"scoreMaximum": 60,
					"label": "Week 4 Assignment",
					"tag": "grade"

					}]
				
When trying a GET request to the container endpoint, you may want to filter the following results:
resource_link_id: Return only those items associated with the specified tool platform's resource ID for the link in content.
resource_id: Return those only those items associated with the specified tool resource identifier. Multiple line items can share the same resourceId within a context.
tag: Return only those items associated with the specified tag. Always a string.
limit: Restrict the number of line items returned. If more items exist following the returned ones, a 'Link' http header with a URL pointing to the next page and a 'rel' value of 'next' MUST be included in the response. D2L limits GET calls to 200.
Sample of a new line itemTo create a new grade item
 You must POST to application/vnd.ims.lis.v2.lineitem to the LineItems.url. It can appear as follows:
			{
			"scoreMaximum" : 60,
			"label" : "Math 101 Quiz",
			"resourceId" : "quiz-2031",
			"tag" : "math",
			"startDateTime": "2019-07-07T20:05:02Z",
			"endDateTime": "2019-07-07T22:05:03Z",

			}
		
Result Service
The Result service allows users to make tool query the platform for the current values of grade objects it owns. The term result itself represents a current grade for a given object or for a particular user. To sync new grades, see the Score Service section of this topic.	
Note: A result cannot be directly altered through this service, so only GET commands are supported.
Scope
Description
Allowed HTTP Methods
https://purl.imsglobal.org/spec/lti-ags/scope/result.readonly
The tool can access current results for its line items	
{LineItem.url}/results: GET
The service endpoint is a subpath of the line item resource URL. The resource URL has the path appended with '/results'. This service only supports GET operations and returns all the results for the line item. For example:[{
			"id": "https://lms.example.com/context/2923/lineitems/1/results/5323497",
			"scoreOf": "https://lms.example.com/context/2923/lineitems/1",
			"userId": "5323497",
			"resultScore": 0.83,
			"resultMaximum": 1,
			"comment": "This is exceptional work."

		}]Tools can filter these results using the following query parameters:user_id: Filter the results to a single user based on their ID.limit: Restrict the number of results returned. D2L limits results to 200.Score ServiceA score represents the value of an activity that a user just completed. The term score refers to that value at the time the activity was taken. The Score Service is used by a tool to publish the latest score to Brightspace. Because Brightspace only posts new scores, this service is write-only. When accessed later, D2L accesses it as a result using the result service, which is read only.ScopeDescriptionAllowed HTTP Methodshttps://purl.imsglobal.org/spec/lti-ags/scope/scoreThe tool can publish score updates to its line items		{LineItem.url}/scores: POST					There is only one media type defined by this service: application/vnd.ims.lis.v1.score+json. The follow is how a sample result might appear: 
			{"timestamp": "2017-04-16T18:54:36.736+00:00",
			"scoreGiven" : 83,
			"scoreMaximum" : 100,
			"comment" : "This is exceptional work.",
			"activityProgress" : "Completed",
			"gradingProgress": "FullyGraded",
			"userId" : "5323497"
			>}

		Timestamp is a mandatory value indicating when the score is changed and is intended to be used by the platform to guard against out of order score updates. The timestamp value is an ISO 8601 date time of the server time when the score state is modified. To protect data historically, this value is expected to increase with each request.Activity Progress denotes the status of a specific activity at that point in time. While IMS documents several available values, Brightspace ignores these values and instead only relies on Grading Progress status value.Final gradesThe field grading progress has many available values, as documented by 1EdTech. However, Brightspace currently only recognizes the FullyGraded value: the grading process is completed; the score value, if any, represents the current Final Grade. See the details of Grading Progress in the official IMS documentation.When checked, grades created through AGS are included in the final grade calculation by default. When not checked, grades created through AGS are excluded from the final grade calculation by default.Grades sync function on a "last update" model, meaning if a faculty member updates the gradebook in Brightspace and then retriggers a sync from the tool, the grade will be overwritten. However, you can check the grade event log to show the changes that occur for a particular grade object.You can delete the grade items that you create using LTI Advantage if you send Assignments and grades services (AGS) delete command. If the grade item has a score, the AGS line item is deleted, but the grade item in Brightspace remains.Automatic grade item creationLTI 1.3 tools can optionally automatically create grades if none are already set up. The automatic grade item creation option is controlled by the Auto Create Grade Items LTI Advantage Deployment configuration setting (the default value is OFF).To enable automatic grade item creationFrom the Admin Tools menu, click External Learning Tools.Select the LTI Advantage tab. Do one of the following:
If you want to create a new deployment, click New Deployment.If you want to make changes to an existing deployment, click on the corresponding deployment name in the table.In the Configuration Settings area, select Auto Create Grade Items.Figure: The Auto Create Grade Items LTI Advantage Deployment configuration setting is ON.Do one of the following:
Click Create Deployment (for creating new deployments).Click Save and Close (for editing deployments).As a result, grades are automatically created in the Grade book after receiving a score from the LTI tool for the first time, regardless of if there is already a grade association.Link Placements and GradesEvery placement of a link in a course is associated to the same grade object. This is completed by having every placement of the link have the same Resource Link ID within that course. If additional line items are needed for a specific link, additional links can be created through External Learning Tools > LTI Advantage or, if the tool supports Deep Linking, the resource selected through the deep linking launch has a distinct LTI resource link ID and line item association.AGS can be used to manually create a grade associated to a link by including the Resource Link ID received from the launch, this works for all links except for widgets.HTML Editor and Deep LinkingLine items can be created using the HTML editor and deep linking in two ways:By using Auto Create Grades: the line item is created automatically. The grade is out of 100, and any further updates to the line item should be made through AGS.Through AGS: a tool can use AGS to manually create a line item. To ensure the grade has the correct link association, the tool must include the ResourceLinkId received from the launch when creating the line item.Maximum ScoreIf Can Exceed is not selected and a tool sends a score higher than the max allowed, the max score is shown in the grade book, and the actual score sent from the tool is stored in an internal table, tools and customers do not have access to this table.



--------------------------------------------------


Deep linking extension with LTI 1.3

Deep Linking represents a streamlined content creation experience for users. This process occurs through two main interaction points: 
Deep Linking Request: The Deep Linking request sends from the platform (Brightspace) to the tool to initiate the Deep Linking resource selection/creation workflow. Users here pick the content they want to import or are guided to create a new learning resource. 
Deep Linking Response: The Deep Linking response sends from the tool back to the platform to communicate the results of selection and close off the workflow. It is here that a tool confirms the selection and pushes it back to Brightspace for consumption. When Brightspace receives this response from a tool, it handles creating all the objects/links and returns ready-made links.
LTI links are one of many different content types that a tool could potentially return. Here are the other types: 
Links: A link is a fully qualified URL to a resource hosted on the internet. The item may include different rendering options (window, iFrame, or embed).
LTI Resource Link: A link to an LTI resource. Tools can also send over line items (grades) along with the link to have an immediate grade item created.
File: A file is a resource transferred from the tool to stored and/or processed by the platform.
HTML Fragment: An HTML fragment to be embedded in HTML document. This is only supported in Insert Stuff.
Image: Image is a URL pointing to an image resource.
Set up a Deep Linking-enabled tool
Before setting up a Deep Linking enabled tool, consult with your provider to ensure it supports Deep Linking. Both the platform and tool must support the same extensions for these to work. Once support has been confirmed, an LMS administrator must register and deploy a new 1.3 learning tool. Extensions require the Keyset URL. This URL is needed for the tool and platform to communicate and use the extensions. Once defined, ensure that you select the checkbox to enable the Deep Linking extension (External Learning Tools > LTI Advantage > Deep Linking).
Create a link
Creating links allows one to pick content and return it to the platform quickly and easily.
To create a link
From the Admin Tools menu, click External Learning Tools.
Navigate to the tool deployment page and click View Links.
Click New Link.Figure: The New Link button.
Complete the following fields in the Create Link screen:
Name: The desired name for your content selector. The name you specify here is the name that appears in the UI in other areas.
URL: The launch point URL, the user, navigates to when they click the content selector.
Description: An optional description that helps users understand what this tool does.
Type: The type defined dictates how this link can be used. The default value is Basic Launch, meaning the link only performs the usual LTI launch. For Deep Linking, change this to be one of the following Deep Linking selectors types supported by Brightspace. These include Deep Linking Quicklink, which exposes the link as a content selector in our quicklink menu areas, and Deep Linking Insert Stuff, which exposes the link as a content selector in the Insert Stuff Brightspace Editor area.Note: The plugin used should be dictated by the tool provider.
Width and Height: When selecting content, Brightspace opens an iFrame displaying the tool UI to discover content. These settings dictate the size of the iFrame.
Substitution Parameters: You can select from a pre-defined list of parameters that are dynamically substituted with a value from the LMS at the time of launch. Brightspace currently supports the following parameters: 
$CourseSection.timeFrame.begin
$CourseSection.timeFrame.end
$ResourceLink.available.startDateTime
$ResourceLink.available.endDateTime
$ResourceLink.submission.endDateTime Read more about the full set of Substitution Parameters in the Tool Registration, Deployment, and Links topic.
Custom Parameters: In instances where tools need to define both the name and value of a custom parameter, they can be defined here. These parameters are not dynamically replaced and are constrained to sending a static value for each launch.
Click Save and Close.
Find deep linking Quicklinks
Content selector links are created in Content menus as a starting point for selecting content. After clicking your desired tool, a window opens and launches the user through the tool's specific experience. Whether creating an activity or selecting content through discovery, the tool helps return back exactly the content the user wants.
To find a deep linking Quicklink in Classic Content
Navigate to Content.
Select a module.
Click Existing Activities.
Click External Learning Tools.
Select the desired item.

Figure: The Adding Existing quicklinks page in the Classic Content Experience.To find a deep linking Quicklink in the New Content Experience
Navigate to Content.
Select a module.
Click Add Existing.
Select the desired quicklink.

Figure: The Adding Existing quicklinks page in the New Content Experience.
 



--------------------------------------------------


Names and Roles extension with LTI 1.3

LTI 1.3 was originally built in a way to allow the IMS community to continue adding new extensions, which would add functionality to the Core of 1.3. The Names and Roles extension was built as the next generation to the Membership Service introduced commonly found in LTI 1.0.
The LTI Names and Role Provisioning Services (NRPS) is an LTI specification for providing access to a list of users and their roles within the context of a course, program, or other groupings. The LTI specification enables tools to automate the pre-provisioning of student lists in the tool via APIs. User information is passed safely and in a secure manner using this service. The Names and Roles Provisioning Services also allows instructors to be provided a display within the tool showing the activity of all their learners, and whether they have accessed the tools.
In the previous LTI version (1.0), a tool could not request a full class list of users enrolled in a course.
To enable this extension for a tool
Consult with your tool provider to ensure that it supports/requires this service. Both the platform and tool must support the same extensions for this to work.
Assuming that support is not an issue, an LMS administrator must register and deploy a new 1.3 learning tool.
Ensure that you define the optional Keyset URL. This URL is required for the tool and platform to communicate and use the extensions.
Once defined, at the registration and deployment levels, ensure that you select Names and Roles Provisioning Services to enable the Names and Roles Extension. Once enabled at the tool registration level, you must also enable it at the deployment level.
Classlist user information shared with the tool
The security setting, set at the deployment level, is titled Classlist including users not known to this deployment. With this disabled, a tool using the Names and Roles extension only receives users that have launched that specific tool already. With this enabled, a tool is free to poll for a full classlist, regardless of whether users have already used the tool or not.
Note: If the user has never launched an LTI tool in Brightspace, the NRPS call auto-provisions the LTI UserId if this security setting is enabled. Clearing this checkbox does not delete the user's LTI UserId.
The following Classlist user information could be shared with the tool (dependent on other Security Settings) if the tool uses the Names and Roles Service Provisioning API. This API allows the tool to pre-provision users to promote a seamless launch between Brightspace and the tool:
Full Name
Email
LTI UserId
LIS_Person_SourcedId
IMS Context Roles




--------------------------------------------------


Security settings for LTI Advantage (1.3)

Once you have an LTI Advantage tool registered, you can deploy it from the External Learning Tools page. When deploying a new tool, provide a name, associate it to a registered tool, set the available extensions, and set the security settings:
Anonymous: An option to completely anonymize the user details of the launch. When selected, all the fields under User Information become unavailable.
User Information: Determines the tool's ability to send the context information around the current user. D2L supports sending the user's:NameEmailUser IDUsernameOrg Defined Id
Org Unit Information: Determines whether the org unit information will be shared with the tool on LTI launch. If enabled, Brightspace  sends:Org Unit IdCourse NameCourse CodeOrg Unit TypeLIS Course Offering SourcedidLIS Course Section SourcedidWhen the course does not have a section or the launching user is not enrolled in any section, this is the course offering value.If the launching user is enrolled in a single section, this is the section value.If the launching user is enrolled in multiple sections, this is the value for the first section alphabetically.Link Information: Determines whether the launch will include details about the LTI link itself. Makes the title and description data available to the launchSample request for 1.3 launchThe following is what an LTI 1.3 request coming from Brightspace may look like, with all security settings enabled at the deployment level:{"iss": "https://testforjsmith2.devlms.brightspace.com","aud": "811b8625-b463-4a94-b745-ce3f6408ec83","exp": 1560442688,"nbf": 1560440888,"iat": 1560440888,"sub": "15495cdc-4a00-43e0-b28c-042523bad957_169","https://purl.imsglobal.org/spec/lti/claim/lti11_legacy_user_id": "15495cdc-4a00-43e0-b28c-042523bad957_169","name": "John Smith","given_name": "John","family_name": "Smith","email": "","https://purl.imsglobal.org/spec/lti/claim/custom": {"user_id": "$User.Id"},"nonce": "ce2aa88ce4961847f704","https://purl.imsglobal.org/spec/lti/claim/message_type": "LtiResourceLinkRequest","https://purl.imsglobal.org/spec/lti/claim/version": "1.3.0","https://purl.imsglobal.org/spec/lti/claim/deployment_id": "9806AD80-2B03-4637-8032-E67553DD8B0F","https://purl.imsglobal.org/spec/lti/claim/target_link_uri": "https://lti-ri.imsglobal.org/lti/tools/279/launches","https://purl.imsglobal.org/spec/lti/claim/resource_link": {"id": "1533934239","title": "IMS Reference Implementation","description": "John testing out the RI"},"https://purl.imsglobal.org/spec/lti/claim/roles": ["http://purl.imsglobal.org/vocab/lis/v2/membership#Administrator","http://purl.imsglobal.org/vocab/lis/v2/institution/person#Administrator"],"https://purl.imsglobal.org/spec/lti/claim/context": {"id": "6609","label": "C1","title": "Course","type": ["http://purl.imsglobal.org/vocab/lis/v2/course#CourseOffering"]},"https://purl.imsglobal.org/spec/lti/claim/lis": {"course_offering_sourcedid": "testforsheena2.devlms.brightspace.com:C1","course_section_sourcedid": "testforsheena2.devlms.brightspace.com:C1"},"https://purl.imsglobal.org/spec/lti/claim/tool_platform": {"product_family_code": "desire2learn"},"https://purl.imsglobal.org/spec/lti/claim/launch_presentation": {"locale": "en-us"},"http://www.brightspace.com": {"tenant_id": "17aa5fae-05d2-4db4-8014-bc4aad6054c9","org_defined_id": ""}}



--------------------------------------------------


Org Units and Role Mapping

In Brightspace, you can map varying roles and Org Units to a universally accepted set of defined names based on the IMS LTI 1.3 specification. This context mapping means that roles and Org Units impact the way a tool handles an LTI launch. Brightspace enables you to create as many custom roles and types of Org Units as required; as a result, a tool could receive an unlimited number of different types of contexts.
Context Types in LTI
As a part of the LTI specification, IMS has defined a specific set of common context types that tools can expect to receive the LTI message. The supported context types are:
CourseTemplate
CourseOffering
Note: Currently, Brightspace does not send CourseSection or Group as context, as all links and course activity are completed at the CourseOffering level.
Org Units Mapping
Org Units Tools
In Brightspace, Org Units are managed with the following tools:
Org Unit Type Editor:  enables administrators to create or edit custom Org Unit types, named however they wish.
Org Unit Editor: manages the actual Org Units. You can create, edit, delete, and manage the information of all the Org Units in their instance. The column on the left is a hierarchical tree view of the current organization structure, with the details of the currently selected Org  Unit on the right. From here, you can quickly launch into a given Org Unit.
Map Org Unit types to the standardized IMS
Brightspace Org Units are mapped with four IMS-supported type standards. An Org Unit type can be mapped to send one or many of the IMS contexts at launch.
Note: D2L recommends that you map BrightspaceOrg Unit types to standardized IMS roles early in an instance's life or in the event that new custom Org Unit types are created.
To map the different Brightspace Org Unit types to the standardized IMS roles
From the Admin Tools menu, click IMS Configuration.
Navigate to the Org Unit Types tab.
Make the necessary changes and click Save.

Figure: An example of mapping Org Unit types to the standardized IMS.
Org unit code sample
Depending on how a given Org Unit type has been mapped, the receiving tool would receive one or many of the mapped IMS contexts in the launch. Here is what a 1.3 LTI launch looks like for passing context, in this case, mapped to the context CourseOffering:"https://purl.imsglobal.org/spec/lti/claim/context": {
        "id": "c1d887f0-a1a3-4bca-ae25-c375edcc131a",
        "label": "ECON 1010",
        "title": "Economics as a Social Science",
        "type": ["http://purl.imsglobal.org/vocab/lis/v2/course#CourseOffering"]
        },
Whether it be role or context management, the definition of these is not a daily task. Once set up, they are rarely updated. If, when using an LTI tool, you see errors pertaining to an unrecognized role or context, misconfigured IMS mappings is likely the cause. Ensure that your mappings are set up properly to avoid errors when adopting new LTI tools.
Roles Mapping
Roles in Brightspace represent a user's permissions set for a given org unit. A user can hold only one role for each Org Unit but can have different roles across different Org Units (for example, a user could be a student in some courses but an instructor in others).
While Brightspace provides some pre-made roles, users often create entirely custom roles based on specific needs or tool access.
You can create an unlimited number of roles but should be aware that an integration must be prepared to receive all these roles and recognize them in a standard way.
Roles and their inline permissions are centrally managed through the Roles and Permissions tool.
Roles in LTI
IMS defines user and role objects as follows:
User: An object representing a person with a current session within the platform and provided to the tool.
Role: The role represents the level of privilege a user has been given within the context hosted by the platform.
A role belongs to a user and exists as separate types of roles:
Institution role: The role that the user holds at the org level. For supported institution roles, see LIS vocabulary for institution roles.
Context Role: The user’s role at the current context level (where the activity is being launched). For supported context roles, see LIS vocabulary for content roles.
Map the LTI standardized roles
The IMS Configuration tool enables you to map the many roles they have in Brightspace to the standard roles defined by IMS.
Note: D2L recommends that you map each Brightspace role to at least one institution and context role.To map an IMS role to a Brightspace role
From the Admin Tools menu, click IMS Configuration.
Navigate to Org Unit Types tab.
Click +Edit Role Mapping.
Select the roles you wish to map.
Click Save.

Figure: An example of mapping the LTI standardized roles.
Role code sample
Depending on how a given role has been mapped, the tool receives one or many of the mapped IMS roles in the launch. Here is what a 1.3 LTI launch looks like for passing roles, mapped to Student, Learner and Mentor:"https://purl.imsglobal.org/spec/lti/claim/roles": [ "http://purl.imsglobal.org/vocab/lis/v2/institution/person#Student", "http://purl.imsglobal.org/vocab/lis/v2/membership#Learner", "http://purl.imsglobal.org/vocab/lis/v2/membership#Mentor"],
The role parameter has two different role mappings embedded within the IMS specification for managing roles. Tools must be able to identify both an institutional role and a context role for a given user launch.



--------------------------------------------------


LTI Migration

Brightspace users can continue to use Legacy LTI implementations in Brightspace. However, D2L supports the following methods of migrating existing Legacy LTI Links (1.1.x) to LTI Advantage (1.3): 
Manual links migration by clicking the Migrate button on the Manage Tool Links (Legacy) tab.
Migration through a Brightspace API
Course Import.
Course Copy.
Registration of LTI tools and deployments is a centralized administration workflow in LTI Advantage unlike in Legacy LTI 1.1 or 1.2. The permissions and interfaces for LTI Advantage are different from Legacy LTI 1.1. Ensure that your designated administrators have LTI Advantage permissions to access, monitor, and troubleshoot migration activities.
Once a link has been migrated, it no longer appears under the legacy External Learning Tool Links area and is associated to the LTI Advantage deployment. The launch also includes a migration claim, which informs the tool that the link has been uplifted.
Manual   LTI Links Migration
You can manually migrate LTI 1.1 links to LTI 1.3 by using the Migrate button located on the Manage Tool Links (Legacy) tab of the External Learning Tools page at the Course level. 
You must have the Manage LTI Migrations permission enabled for your role to manually migrate LTI links. For all tools you must toggle on the Auto Migrate Links switch. Read more: LTI 1.3 permissions. 
Note: The following links are migrated: grades tied to a link created using Basic Outcomes.The  following links are not migrated: sharing rules from the existing tool to the LTI 1.3 tool; grades created using the Valence API. Migration is only  successful if there is an exact match between the link URL and the registration domain. To prevent links from attempting migration, remove the sharing rule for the course or disable the deployment.
To manually migrate LTI links
On the navbar, click Course Admin.
 Click External Learning Tools.

Navigate to the Manage Tool Links (Legacy) tab.


Click Migrate.
Figure: The Migrate button of the Manage Tool Links (Legacy) tab.

A migration log opens that displays your migration as queued, in progress, and then complete.
Migration through a Brightspace API
Using the API, an individual LTI link can be migrated. The following LTI types are considered eligible for migration from a legacy to an LTI Advantage tool:
Basic launches
Remote plugins: Quicklink CIM, Insert Stuff CIM, and Widgets
The API requires the Legacy LTI 1.1 LinkId, with the LTI Advantage DeploymentId and LTI 1.1 ToolProviderId, which enables D2L to bind the Legacy LTI link to a LTI Advantage deployment.
Note: The ToolProviderId can be null. This should only be the case if the link itself had its own key/secret.
Migration via Course Import or Copy
When an IMS Common Cartridge or Brightspace Course Package containing LTI links is imported, Brightspace will default to create those links as LTI Advantage if a matching LTI Advantage tool is set up with registration, deployment, and sharing rules for that course. If there is no matching LTI Advantage tool set up for the course, Brightspace will create those links as Legacy LTI 1.1.
Similarly, users can migrate LTI 1.1 links to LTI Advantage links during course copy. This migration workflow is automatically enabled; however, control over this workflow can be granular. Course links only migrate during copy when:
The LTI Advantage tool matches the domain of a previous LTI 1.1 tool
 The LTI Advantage tool has a deployment shared to the destination course prior to copy
The LTI Advantage tool has a deployment with Auto Migrate Links enabled
If there is no corresponding LTI Advantage tool or deployment, the LTI 1.1 link continues to function as expected. This can enable testing of migration prior to fully committing. There is no roll back to LTI 1.1 after a link is migrated to 1.3
When the link has been migrated, it no longer appears under the legacy External Learning Tool Links area and appears under the LTI Advantage area. The link launch will include a migration claim, informing the tool that the link has been migrated.
Migration Log
Users with the View LTI Migration Log permission have access to the Migration Log at the appropriate org unit levels. The log is found in the External Learning Tools interface.
To provide better levels of control for customers with multiple units under one organization, the migration details are locked down based on enrollments and permissions at the course offering level.
The Migration Log tracks all course copies where there are LTI migrations involved and identifies the following:
The number of Legacy LTI  links successfully migrated to LTI Advantage
The number of Legacy LTI  links that had errors (for example, had a matching tool domain found, but no deployments for that course)
The number of Legacy LTI  links that were ignored (no domain match found)
Note: Migrations performed via API or Course Import are not listed in the Migration Log.
You can search and filter the Migration Log results for more detailed information. 

Figure: The Migration Log page and table located in External Learning Tools. Click the Status drop-down menu to filter the table results.
Accessing the Migration Log from the course level External Learning Tools page shows all jobs for that course and provides access to the detailed migration log by clicking a link from the Job Id column.
You must have the  Manage LTI Migrations or View LTI Migrations Log permission at the Organization and the Course Offering levels to check course migration details.

Figure: Click the Job Id link to view the Migration Details.
For troubleshooting, the Migration Details section of the Migration Job Report page includes shortcuts and the  View Developments link, which helps to find matching deployments. This link takes users straight to the deployments page, filtered by registration.

Figure: The Migration Details section of the Migration Job Report page, with shortcuts to the tool deployment page. The Result field summarizes migration results.
The information in the Migration Details section is currently limited to the last 90 days to relevant data available during troubleshooting migrations. 
To access data older than 90 days, you can use the LTI Link Migration Audit Brightspace Data Set or Data Hub.
Considerations for Migration
Considerations for the Migration through a Brightspace API
The following list of considerations applies to the migration API only:
API users must have the Manage LTI Migrations permission. This permission is not required for Course Import or Course Copy for link migrations to occur. D2L recommends granting permission to administrators.
The LTI Advantage tool registration domain must match the Legacy LTI 1.1 domain for the migration to occur.
If the legacy link is a CIM, the LTI Advantage tool must have the Deep Linking extension turned on. Otherwise, the API responds with a message.
If the legacy link is associated with a grade, the LTI Advantage tool must have Assignments, and Grades Services turned on. Otherwise, the API responds with a message.
When using the API, if the link was created by a remote plugin, it is recommended not to include ToolProviderId whenever possible. Note that if the ToolProviderId is included, it must match the tool provider associated with the remote plugin.
When using the API, the legacy link or tool provider must have a key and secret.
When using the API, if the legacy link was shared to a course, the LTI Advantage deployment must be shared to that course.
General considerations
The following list of considerations applies to all migration methods:
The LTI Advantage tool must have a deployment.
Custom and/or substitution parameter names for a legacy link must be unique.
HTML is stripped from the description of a legacy link after migration.
Migrations are one way, Legacy LTI 1.1 to LTI Advantage, and cannot be reverted.
If the tool used LTI 1.1 for authentication and Brightspace APIs to create and update grade items in Brightspace, D2L recommends speaking with your tool provider before doing the LTI Advantage migration to ensure there is a plan for API created grade items first.
For more information about setting up an LTI Advantage tool, refer to LTI Advantage Registration.
Troubleshoot Migrations
To  find and troubleshoot failed migrations, you can use the following options:

To quickly search for the needed deployment if you have  large numbers of them,  select a registration and filter the results by their Registration Names on the LTI Advantage tab.
Figure: The Registration Names filter on the LTI Advantage tab.

 
To get more information about failed migrations, open the Migration Log tab > Migration Details and check shortcuts. You can use the  View Developments link to find matching deployments. This link takes you straight to the deployments page, filtered by registration.Figure: The Migration Details section of the Migration Job Report page, with shortcuts to the tool deployment page. The Result field summarizes migration results.

To understand migration status and check links, open the Links page (LTI Advantage > LTI Tool > View Links) and filter results by Type, Status, and Name.
Figure: The  Filter by Type option on the Links page.





--------------------------------------------------


Setting iFrame sizes

Content providers can set iFrame sizes using the IMS standard lti.frameResize through a POST message in the incoming data. This allows LTI content providers to define the iFrame size that optimally displays the learning content within Brightspace. As a result, users may notice different sizes of iFrames displaying external content. Administrators may notice a POST message included in any incoming LTI connections.
Code Samples
Administrators must send a message to the iFrame's parent (using PostMessage) in order to set iFrame height. The content of this message will contain a field called handler which is set to lti.frameResize, and a field called height which is the desired height of the iFrame.
An example piece of code in the iFrame could appear as follows:
<script type="text/javascript" >
document.addEventListener('DOMContentLoaded', function() {
setTimeout(function() { parent.postMessage(JSON.stringify({ subject:
"lti.frameResize", height: 500 }), "*"); }, 0); } ); </script>



--------------------------------------------------


Zoom© LTI Pro

The Zoom LTI Pro app supports the ability to schedule, join, and manage meetings within Brightspace. Instructors can use Zoom LTI Pro to schedule and host Zoom meetings to support distance learning, hold office hours, host study groups, capture lectures, and access their cloud recordings. Learners can use Zoom LTI Pro to join Zoom meetings to remotely attend classes, attend office hours, participate in study groups, and view recordings of previous classes.
To install the Zoom LTI Pro app visit the Zoom marketplace.
Refer to the Getting Started with LTI Pro topic for installation instructions and to review release notes.
Zoom configuration instructions are available here:

LTI Pro Integrations


Configuring LTI Pro 1.3 for Brightspace

 



--------------------------------------------------


ManageMentor®

Harvard ManageMentor® online leadership training courses from Harvard Business Publishing are now available for purchase through D2L. Harvard ManageMentor is intended for corporate and/or professional development-level users in the following languages:

English


Spanish (Latin America)


Brazilian Portuguese


French


Mandarin

Harvard ManageMentor content is available on Harvard Business Publishing’s proprietary platform, that integrates with Brightspace using Deep Linking with LTI 1.3. Once Harvard ManageMentor courses are purchased, the Deep Linking 1.3 extension enables you to add the course into Brightspace and launch the course content directly inline, for a streamlined content experience for users.
Setting up Brightspace for Harvard ManageMentor content 
 Prerequisites: 
Your organization must receive the appropriate licensing and permissions for each Harvard ManageMentor course prior to uploading the content into Brightspace. 
Review Deep Linking with LTI 1.3 
You must set up the Learning Tool Extensibility in Brightspace: 
            Ensure you have the Recommended permissions setup using the LTI permissions list.
Register the LTI tool.Create the LTI Links .Register an external learning tool for LTI Advantage.
Ensure        you have the required Security Settings for 1.3.
Complete Context mapping for LTI Roles and Org Units.
Set up the Deep Linking-enabled tool.
 



--------------------------------------------------


Overview of Microsoft Office 365

Microsoft Office 365 provides institutions with a collection of enterprise-grade communication and productivity services. Depending on the license chosen, these services may include Exchange Online, SharePoint Online, OneNote, Lync Online, and Office Professional Plus.
Through their integration solutions, Brightspace and Microsoft Office 365 services (Email, Calendar, and more) improve how students and teachers interact online. Institutions can choose any of the integration solutions appropriate to their users.
Browser consideration for the Microsoft Office 365 widget
User sessions in the Microsoft Office 365 widget are saved on your Brightspace account and are not tied to your browser session. This avoids having to log in to Office 365 each time that you access Brightspace. 
When logging in from your browser, the first email address that you use is saved in your cookies. Each subsequent login from your browser session uses this email address. It might be necessary to clear your cache or reset your browser session to log in to the widget using a different email address.
Set up integration for the Microsoft Office 365 widget
To set up your integration of the Microsoft Office 365 widget in Brightspace, you must complete several tasks, which are explained further in the following sections:
Register Brightspace with Microsoft Azure.
Enable Microsoft Office 365 in Brightspace.
Configure Brightspace for the Microsoft Office 365 Plug-in.
Add the widget to a course or home page.
Register Brightspace with Microsoft Azure
To access secured Microsoft Office 365 services in Brightspace, you need to grant your instance rights to access those services. This is done by registering Brightspace in a Microsoft Azure tenant and then configuring Brightspace with the resulting Client (Application) ID and Key. D2L recommends creating single-tenant instances instead of multi-tenant instances. 
Before you begin, ensure that you have your Azure AD authentication information. This authentication information is a user name and password combination.
Refer to Quickstart: Register an application with the Microsoft identity platform for detailed information.
To grant your instance rights to access Microsoft Office 365 services, follow the steps outlined below. Note that this information is intended for those who understand how to navigate Azure cloud (Admin). Contact your System Administrator if you are unsure of how to follow these steps:
Go to the Azure Portal and log in with your Office 365 credentials.
In the left pane, select More Services > Azure Active Directory.
Select App Registrations.
Select New Registration, and enter an appropriate display name.
Set the Application type to WebApp / API.
Set the Redirect URI  to your Brightspace Learning Environment URL.
Click Register, and make note of the ApplicationId that is generated, (this is required later in the process).
Return to the Authentication screen. Verify the redirect URI. Under the Implicit grant and hybrid flows section, select the check boxes for Access tokens (used for implicit flows) and ID tokens (used for implicit and hybrid flows).
Click Save. 
Click on the API Permissions page. Select Add a permission.
Add the Office 365 SharePoint Online (Microsoft.SharePoint) API, and add the delegated permission MyFiles > Read user files. Then click Add permission. 
Add the Microsoft Graph API, and add the delegated permissions Calendars > Read user calendars,  and Mail > Read user mail. Click Add permission after each permission selected. 
Ensure that the Grant admin consent for students is selected.Click Yes.           
From the Authentication page, under Redirect URIs, select Add URI. 
Add /d2l/im/office365/authentication/authenticatereply to the end of your Brightspace Learning Environment URL.
From the Certificates & secrets page, select New client secret.
Add an appropriate description, and pick a suitable expiry date. The maximum value is two years. 

Click Add, and observe the Key that displays under Value. 


Copy the Value. (it is not visible once this process is complete, and is required in the next steps).


Log in to Brightspace, select Admin Tools, and click Config Variable Browser.


Navigate to the d2l.Tools.Office365.ClientId configuration variable, and add the ApplicationID from step 7  as the Org Value.


Navigate to the d2l.Tools.Office365.ClientSecret configuration variable, and enter the Value you copied in step 19 as the Org Value.

Office 365 Mail, Calendar, and SharePoint Verification
After the Azure tenant is configured, the widget will only work if all of the services it is accessing are configured. The widget accesses Office 365 Mail, Calendar, and SharePoint, which must all be available when you sign in for the widget to work. User accounts can sometimes take time to set up these services, so it is important for a user to first verify that they can access them within Office 365.
API Calls
The Office 365 widget makes client and server-side calls to the Microsoft Office 365 APIs to authenticate and retrieve user information from a user's email, calendar, and OneDrive account.
Note: These requests are determined by Microsoft and are subject to change if the APIs change. 
Client-side
The requests made on the client-side in the browser are:
https://api.office.com/discovery/me/FirstSignIn
https://login.windows.net/common/oauth2/authorize
Server-side
The requests made on the server-side are:
https://login.windows.net/common/oauth2/token
https://api.office.com/discovery/me/Services
https://outlook.office365.com/api/v1.0/Me/Folders('Inbox')/Messages
https://outlook.office365.com/api/v1.0/Me/Events
https://<tenant>-my.sharepoint.com/personal/<site-path>/_api/files
The last URL for the SharePoint calls is returned to the Brightspace platform from the previous Microsoft calls. Each organization's tenant may be different, and each user's site path may be different. Refer to https://msdn.microsoft.com/en-us/office/office365/api/files-rest-operations for more information.



--------------------------------------------------


Microsoft Office 365 permissions


Setting


Expected Behavior

Can access the Office 365 Widget

Applicable Org Unit Type: Any
 
Allows users to: View and access the Microsoft Office 365 system widget
 
Users will see: The Microsoft Office 365 system widget on their course homepage
 
Also Required: None

Can add files from Microsoft OneDrive

Applicable Org Unit Type: Any
 
Allows users to: Add files from Microsoft OneDrive
 
Users will see: The Microsoft OneDrive option when adding files
 
Also Required: None

Can access the Office 365 widget when impersonating other users 

Applicable Org Unit Type: Any
 
Allows users to: View the Office 365 widget and its contents when impersonating a user if the widget was added to the homepage
 
Users will see: The Microsoft Office 365 widget on the homepage and its contents
 
Also Required: None





--------------------------------------------------


Outbound traffic

If your institution's firewall configuration does not allow outbound traffic, you must use one of the methods below to establish an outgoing HTTPS connection to these URLs:
https://api.office.com/discovery/me/FirstSignIn
https://login.windows.net/common/oauth2/authorize
https://login.windows.net/common/oauth2/token
https://api.office.com/discovery/me/Services
https://outlook.office365.com/api/v1.0/Me/Folders('Inbox')/Messages
https://outlook.office365.com/api/v1.0/Me/Events
https://<tenant>-my.sharepoint.com/personal/<site-path>/_api/files 
Use one of these methods to permit HTTPS connections to the URLs listed above:
Add a firewall rule to allow outbound connections (port 80 and port 443) from all web and scalable servers to the URLs listed above. 
Configure a proxy server on the network that allows outbound connections to the URLs listed above by setting the following configuration variables: d2l.System.Infrastructure.ProxyAddress - The address of the proxy server. It normally takes the form http://myproxy:8080/ or https://myproxy:8080/ where myproxy is the host name or IP address and 8080 is the port. d2l.System.Infrastructure.ProxyBypassAddresses - The addresses or address patterns that should not go through the proxy server. Address patterns take the form scheme://hostname:port/path where scheme is either http or https; hostname can be set as a * wildcard; port can be a specific number or a * wildcard to apply to all port numbers; and path is optional and can also contain a * wildcard. 




--------------------------------------------------


Office 365 Widget in Brightspace

To add the Office 365 widget to a course
Open the course.
Click Edit.
In the Widgets section, click Add Widgets > System Widgets.
Select Office 365 and then click Add.
Click Save.
To add the Office 365 widget to your homepage
From the Admin Tools menu on the minibar, click Homepage Management.
Select the active homepage.
In the selected location, select Add Widgets > System Widgets.
Select Office 365 and then click Add.
Click Save.
User workflows for the Office 365 Widget
To perform the initial sign in to the Office 365 widget
Use one of the following workflows for initial sign in to the Office 365 widget: 
SSO is not set up 
The user clicks the initial sign-in button in Brightspace.
A new tab opens and the user is redirected to a "Sign in" page where the user enters their email address. 
After clicking Next, the user is redirected to another "Sign in" page where the user re-enters their email address and then enters their password. 
After signing in, the tab closes and the user is redirected to Brightspace with the widget loaded.
SSO is set up 
The user clicks the initial sign in button in Brightspace.
A new tab opens and user is redirected to a "Sign in" page where the user enters their email address. 
After clicking Next, the user is redirected to another "Sign in" page where the user enters their email address again. After they enter their email address and either tab or click out of the email field, the page redirects the user to the Identity Provider (IdP) page, according to the instance configuration.
After the user has gone through the IdP process, the tab closes and the user is redirected to Brightspace with the widget loaded.
Troubleshooting the Microsoft Office 365 integration
Page Not Found
Verify that the URL that you use to access Brightspace is the same URL that is configured in the following configuration variables: d2l.settings.WebServerName and d2l.settings.WebServerNameInternal.
Sign in - Application with ID was not found in directory
After configuring the widget, if you proceed through the initial sign in for the widget and then see the error "Sign In - Sorry, but we're having trouble signing you in. We received a bad request", view the additional technical information. If the additional technical information includes, "Application with identifier <id> was not found in directory <id>", then there is an issue with your Azure tenant. Your App ID URI does not match the domain that your Brightspace instance is currently on. Verify that the App ID URI matches the URL of your Brightspace instance in your Azure tenant.  
Widget displays "Loading..." when viewing emails
This may be an issue with the cookies in your browser. Microsoft relies on the cookies in your browser session to verify the account to connect with, even if you type your email address at the beginning of the authentication process. If you are using multiple work accounts, this may affect authentication. Open a private browser session, log in to Brightspace, and then try to view emails. If you can view emails in a private browser session, delete your cookies to solve the problem in your regular browser session. 
After authenticating with Office 365 and being redirected, the widget does not sign in
If you sign in through the widget, go through the Microsoft authentication process, and then get redirected back to the LMS but the widget is still not signed in, the account may not be set up properly with the Office 365 services. One of Mail, Calendar, or OneDrive is not set up in the account that is being used to log in. Try logging into Office 365 and accessing your Mail, Calendar, and OneDrive account. After you have confirmed that you can view everything, try logging into the widget again.
Additional information on configuring Microsoft Azure
For more information on configuring Microsoft Azure, refer to the following links:
http://azure.microsoft.com/en-us/get-started/
http://azure.microsoft.com/en-us/support/trust-center/




--------------------------------------------------


About Microsoft Teams Meetings

Users with Microsoft accounts can create, schedule, and share Microsoft® Teams Meetings from within Brightspace. You can stay connected and collaborate virtually in Brightspace using either the  Teams Meetings remote plugin integration or the custom widget integration. 
As a prerequisite to either the remote plugin or custom widget, you must first install the Microsoft Teams Meetings Azure application.  As a global administrator, grant tenant-wide consent for this application by visiting the following URL, and substituting the {YOUR-TENANT-ID} placeholder with your AzureAD tenant id:
https://login.microsoftonline.com/{YOUR-TENANT-ID}/adminconsent?client_id=2005d3ee-3dc1-471d-9641-85d7886478a6
Review the permissions this application requires prior to granting consent.
 

Figure: Microsoft Teams Meetings consent form
Refer to the Configure how end-users consent to applications article for more information.



--------------------------------------------------


Set up the integration for the Microsoft Team Meetings plugin

To set up your integration of the Microsoft Teams Meetings plugin in Brightspace, you must complete the tasks, which are explained further in the following sections.
Enabling the remote plugin
From the Admin Tools menu, click Remote Plugins.
Click MS Teams Meeting.
Click Add Org Units.
Search for and select the Org Units you want to have access to this remote plugin and click Insert.
Click Save.
Renaming the remote plugin
From the Admin Tools menu, click Remote Plugins.
Click MS Teams Meeting.
Rename the remote plugin by entering a new name in the Name field.
Click Save.
Overriding the default regions for latency
From the Admin Tools menu, click Remote Plugins.
Click MS Teams Meeting.
If you observe any unexpected latency issues, adjust the Launch Point URL to use your closest geographic location:
USA (default): https://prd.ms-teams-meetings.brightspace.comCanada: https://prd.ca-central-1.ms-teams-meetings.brightspace.comIreland: https://prd.eu-west-1.ms-teams-meetings.brightspace.comSydney: https://prd.ap-southeast-1.ms-teams-meetings.brightspace.comSingapore: https://prd.ap-southeast-2.ms-teams-meetings.brightspace.com
Click Save.
Note:  No Personally Identifiable Information is sent or stored in this Launch Point.
The Launch Point URL for the Remote Plugin points to the Brightspace MS Teams Meetings LTI Launch Request Service. This service checks for valid LTI Launch requests only. Once the LTI Launch request  has been validated, it then forwards the request to your MS Teams environment.



--------------------------------------------------


Create a Microsoft Teams meeting

Creating a Microsoft Teams Meeting in Activity Feed
From your course homepage, below the Activity Feed post, click Attach.
Click Attach Link to Existing Activity.
Select MS Teams Meeting.
Authenticate and click Create meeting link.
Enter the meeting details and click Create.
Review and update the meeting options as required, and click Insert.
To share the meeting now, click Post, or to share the meeting later, click Post Later.
Creating a Teams Meeting in Announcements
In the body of an announcement, click Insert Quicklink.
Select MS Teams Meeting.
Enter your authentication information and click Create meeting link.
Enter the meeting details and click Create.
Review and update the meeting options as required, and click Insert.
Click Publish.
Creating a Teams Meeting in Email ​​
Within the body of an email message, click Insert Quicklink.
Select MS Teams Meeting.
Authenticate and click Create meeting link.
Enter the meeting details and click Create.
Review and update the meeting options as required, and click Insert.
Click Send.




--------------------------------------------------


Set up the integration for the Microsoft Team Meetings widget

To create a Teams Meetings custom widget, share it with appropriate courses, and restrict its use for instructors, follow the tasks in this section.
Creating a Microsoft Teams Meetings custom widget
From the Admin Tools menu, click Homepage Management.
On the Widgets tab, click Create Widget.
Enter a Name for your widget, such as MS Teams Meetings.
Click Add an Org Unit.
Search for and select the Org Units you want to share this widget with and click Insert.
On the Release Conditions tab, click Create and Attach.
From the Condition Type dropdown menu, select Role in current org unit.
From the Role dropdown menu, select your instructor role and click Create.
On the Content tab, open the HTML Source Editor and paste in the following code:
<script>var lang = document.documentElement.lang;@nbsp;var iframe = document.createElement('iframe');iframe.src = "https://app.ms-teams-meetings.brightspace.com/?locale=" + lang;iframe.style = "overflow-y: hidden; height: 700px; width: 100%;"document.body.appendChild(iframe);</script>
Click Save and Close.
Add your custom widget to any active widget-based homepage
From the Admin Tools menu, click Homepage Management.
Click the widget-based Homepage where you want to add the MS Teams Meetings widget.
In the Widgets section, click Add Widgets.
On the Custom Widget tab, select the MS Teams Meetings widget.
Click Add.
Drag and drop the widget where you want to organize the homepage.
Click Save and Close.
Creating and sharing a Microsoft Teams Meeting using the widget
On your homepage, in the MS Teams Meeting custom widget, click Create meeting link.
Sign in with your Microsoft account if you haven’t previously signed in.
Click Create meeting link.
Add a meeting title and select a date and time.
Click Create.
To copy the dynamically generated meeting link, click Copy.
Paste the meeting link into your course announcement, activity feed, discussion, calendar event, or email.




--------------------------------------------------


Brightspace Course Connector for Microsoft Teams

The Brightspace Course Connector for Microsoft Teams® is available for purchase and is set up as a Learning Tools Interoperability (LTI®) integration. It allows administrators and instructors to seamlessly create teams based on a course in Brightspace. This integration automatically synchronizes the class list with Microsoft Teams daily. Administrators can also manually trigger a class list synchronization on-demand for any course from the ShuffleExchange platform.
Once a course is connected, a link on the course homepage provides access to your Teams environment from within Brightspace. This integration provides enhanced communication and collaboration between instructors and learners.
 

Figure: The Course Connector for Microsoft Teams widget on a homepage.
This guide outlines the process for integrating your Microsoft Teams platform with your Brightspace and upgrading to the latest version of Brightspace Course Connector. 
Note:  For guidance on various types of integration, refer to the Limitations section.
Integrate Microsoft Teams platform with Brightspace
The following sections describe how to integrate Microsoft Teams platform with Brightspace.
To integrate Microsoft Teams platform with Brightspace
Register a new LTI Advantage tool for Course Connector in Brightspace. This workflow also includes configuring an LTI launch of Course Connector as a basic launch widget and making it available to the appropriate Org Units.
Register a new Valence API application for Course Connector in Brightspace.
Obtain student and instructor roles.
Register the ShuffleExchange LTI tool.
Register a new LTI Advantage tool for Course Connector in Brightspace
This section describes the steps to create a widget on the course homepage. 
Note: You require administrator privileges to create a widget.
To create a widget on the course homepage
Log in to Brightspace.
From the Admin Tools menu, click Manage Extensibility.Figure: The Admin Tools menu with Manage Extensibility visible.
On the LTI Advantage tab, click Register Tool.

On the Register a Tool page, enter the following details:

How would you like to register your tool?: Select Standard registration.                   
Name: Enter your preferred name for the tool. For example, Microsoft Teams.
Domain: Canada - https://teams-ca.shuffleexchange.com EMEA - https://teams-eu.shuffleexchange.com US - https://teams-us.shuffleexchange.comAustralia - https://teams-au.shuffleexchange.comSingapore - https://teams-asia.shuffleexchange.comRedirect URLs: Canada - https://teams-ca.shuffleexchange.com/teams/portalEMEA - https://teams-eu.shuffleexchange.com/teams/portal US - https://teams-us.shuffleexchange.com/teams/portalAustralia - https://teams-au.shuffleexchange.com/teams/portalSingapore - https://teams-asia.shuffleexchange.com/teams/portal
OpenID Connect Login URL: Canada - https://teams-ca.shuffleexchange.com/lti/OidcLoginEMEA - https://teams-eu.shuffleexchange.com/lti/OidcLoginUS - https://teams-us.shuffleexchange.com/lti/OidcLoginAustralia - https://teams-au.shuffleexchange.com/lti/OidcLoginSingapore - https://teams-asia.shuffleexchange.com/lti/OidcLogin
Keyset URL: Canada - https://teams-ca.shuffleexchange.com/lti/jwksEMEA - https://teams-eu.shuffleexchange.com/lti/jwksUS - https://teams-us.shuffleexchange.com/lti/jwksAustralia - https://teams-au.shuffleexchange.com/lti/jwksSingapore - https://teams-asia.shuffleexchange.com/lti/jwks
Keep all remaining default values and click Register. Your registration details appear.Figure: LTI Advantage tool registration details.
Note your Client Id and Issuer URL.
Now you can configure the LTI launch of Course Connector. 
To configure the LTI launch of Course Connector
Click View Deployments.
                On the LTI Advantage tab, click New Deployment.
To make the tool available to all Org Units, on the Deploy Tool page, enter the following details:
Tool: Select the tool name you specified in step 4 above.Name: Your preferred name for the deployment. For example, Microsoft Teams.Security Settings: Select Org Unit Information and select User ID.Figure - Security Settings with Org Unit and User ID selected.Make tool available to: Click Add Org Units and select all the course offerings where the tool should be made available and click Add.
Keep all remaining default values and click Create Deployment. Your deployment registration details appear.Figure: Deployment registration details.
                Note the Deployment Id.
To configure the widget
Click Manage External Learning Tool Links.
                Click New Link and provide the following details:
Name: Your preferred name for the tool. For example, Microsoft Teams.URL: Canada - https://teams-ca.shuffleexchange.com/teams/portalEMEA - https://teams-eu.shuffleexchange.com/teams/portal US - https://teams-us.shuffleexchange.com/teams/portalAustralia - https://teams-au.shuffleexchange.com/teams/portalSingapore - https://teams-asia.shuffleexchange.com/teams/portalType: Basic Launch Widget, Height: 300.            
                Keep all remaining default values and click Save and Close.
Register a new Valence API application for Course Connector in Brightspace
The Brightspace Course Connector for Microsoft Teams uses a Valence API to access course, section, and enrollment information. This section details steps to register a Valence application and create credentials to access Brightspace APIs.
Note: Registering a Valence application and creating credentials requires Brightspace administrator privileges.
To register a new Valence API application for Course Connector
Log in to Brightspace.
From the Admin Tools menu, click Manage Extensibility.
On the ID Key Authorization tab, click Register an App.
On the Register an Application page, provide the following details:Application Name: Your preferred name for the tool. For example, Microsoft Teams.Trusted URL: https://apitesttool.desire2learnvalence.com/index.phpSelect I accept the Non-Commercial Developer Agreement.
Keep all remaining default values and click Register Application. Your registration details appear.Figure: Valence API registration details.
Note the Application ID and Application Key.
In incognito mode, navigate to the API Test Tool page and specify the following details:
Host: Your Brightspace host URL without https or a trailing slash. For example, d2l.com.Port: 443App ID: Application ID from Step 6 above.App Key: Application Key from Step 6 above.
Click Authenticate. An access confirmation message appears.Figure: Access confirmation message.
To populate the User ID and User Key, click Continue.
Note the User ID and User Key.
You are now ready to obtain student and instructor roles.
Obtain Learner and Instructor Roles
To ensure the correct users are created as team owners and members in Microsoft Teams, ShuffleExchange, the partner platform, requires the associated role IDs mapped to course instructors and learners.
To obtain learner and instructor role IDs:
Log in to Brightspace.
From the Admin Tools menu, click Roles and Permissions.

Click on a learner or instructor role. Refer to the browser URL field to note the role ID.

Repeat Step 3 for each role and note all the role IDs for students and instructors separately.
Register the ShuffleExchange LTI Tool
The ShuffleExchange (SE) LTI Tool requires the details captured in the earlier steps to enable the Teams integration with your Brightspace instance.
To register the SuffleExchange LTI Tool
In incognito mode, navigate to https://teams-ca.shuffleexchange.com (for Canada) https://teams-eu.shuffleexchange.com (for EMEA)https://teams-us.shuffleexchange.com (for US)https://teams-au.shuffleexchange.com (for Australia)https://teams-asia.shuffleexchange.com (for Singapore)

Log in with the credentials supplied to you by your D2L partner after purchasing this add-on.Figure: Image of the ShuffleLabs Administration Panel

Integration Settings
Enter the following integration settings:

Integration Type: Select the integration type you want to use to connect to your Office 365 environment.

Standard Team (Application Permissions) doesn’t require a service account but requires administrator consent for the application to run on behalf of the tenant.


Standard Team (Delegated Permissions) requires a service account and the service account is the default owner of every team created.


Class Team is created as a Class Team rather than as a Standard Team. The team creation follows the guidelines proposed by Microsoft, which makes the team compatible with other Microsoft LTI tools. The Class Teams are created through Application Permissions.



Refresh Token: Click Connect and log in as a global administrator to install Brightspace Teams Connector. Your tenant token displays.


Brightspace URL: Your D2L Tenant URL/Brightspace domain name, without the trailing slash


Client Id: Client Id noted in the Register a new LTI Advantage tool for Course Connector in Brightspace section (step 6)


Deployment Id: Deployment Id noted in the Register a new LTI Advantage tool for Course Connector in Brightspace section (step 11)


Issuer URL: Issuer URL noted in the Register a new LTI Advantage tool for Course Connector in Brightspace (step 6)


Instructor Role ID(s): a comma separated list of instructor role Ids noted in the Obtain student and instructor roles section (step 4)


Student Role ID(s): a comma separated list of student role Ids noted in the Obtain student and instructor roles section (step 4)


App Id: Application Id noted in the Register a new Valence API application for Course Connector in Brightspace section (step 6)


App Key: Application Key noted in the Register a new Valence API application for Course Connector in Brightspace section (step 6)


User Id: User Id noted in the Register a new Valence API application for Course Connector in Brightspace section (step 10)


User Key: User Key noted in the Register a new Valence API application for Course Connector in Brightspace section (step 10)


Brightspace Tab Name: The name of the Tab in the Team’s General Channel where you access your Brightspace course.


Group Mail Prefix (obsolete): This setting is replaced by the Group Mail Format.


Group Mail Format: The email address format to be used while creating the group. Include {0} in the format string to insert the course ID. For example, where the course ID is 6744, course-{0}-group creates course-6744-group@yourdomain.com.


Team Name Format: The format to be used for naming the team. Include {0} in the format string to insert the course name. For example, where the course name is Getting Started, Brightspace {0} Team creates Brightspace Getting Started Team.


Name Blocked Words: The words that you want to remove from the Brightspace course name before using it in the Course Name Format. This feature is typically used when Office 365 has Team/Group name restrictions.


Hide ‘Learners can create new private channels’ Option: This option is normally available in the course widget. Selecting this item will hide that option and the Team will follow policies set by the Microsoft Teams Policies


Wait until Course Start Date (In days): Number of days to wait before the start date of a course before the Team is created in Microsoft. A value of zero (default) indicates that the Team will be created immediately. If the Course and Team are already synchronized and the start date is then removed or set to a future date, the Team will not be removed.


Team Course Cleaning Option: Choose what to do when a course end date passes. The options are Nothing, Delete or Archive. See the Team Course Cleaning Waiting Period option for further settings.


Team Course Cleaning Waiting Period (In days): Number of days to wait after the end date of the course, before the team is cleaned (deleted or archived). 0 indicates that no action will occur. This feature does not apply when a course is manually deleted in Brightspace. If a course is deleted in Brightspace, the related Team is simply unlinked. There is no maximum value. If the end date passes and the team is archived/deleted (per this option) and subsequently the end date is removed or set to a past date, the Team will not be re-added or re-synchronized.


Hide Synchronized Teams from the GAL: This option will apply to newly synchronized teams and will hide their underlying email address from the Microsoft Exchange Global Address List (GAL) to reduce email address clutter.This feature doesn’t turn off or disable the address. It simply hides the email address from the listing. Selecting this option does not modify GAL entries for Teams that are already created, nor will clearing this option automatically create GAL entries for existing Teams. There are few cases where insertion into the GAL cannot be suppressed. Warnings will be provided in the administration panel for these cases.


Hide Teams Calendar App: Both Brightspace and Teams offer calendars. These calendars are not synchronized, and students may confuse these two calendars. This option hides the Teams calendar from view. The calendar isn’t removed, it is hidden. An owner of the team can show the calendar, but on the next synchronization event, the calendar will be hidden again.


Hide Teams Assignments App: Both Brightspace and Teams offer assignments. These assignments are not synchronized, and students may confuse these two assignments. This option hides the Teams assignments from view. The assignment isn’t removed, it is hidden. An owner of the team can show the assignment app, but on the next synchronization event, the assignment will be hidden again.


Add Prefix to Archived Team names: As a best practice, archived teams may be renamed by adding a prefix to the names. This is helpful to prevent conflicts if course or section names are reused in future academic sessions. This option is only relevant if the Team Course Cleaning option is set to Archive.

Figure: ShuffleExchange LTI tool registration details.
Once all ShuffleExchange LTI tool registration details are entered, click Save.
Course Connector Homepage Widget
Instructors can now add the Brightspace Course Connector widget for Microsoft Teams to their course homepage.
To add the Brightspace Course Connector widget for Microsoft Teams to the course homepage

From your course homepage, click Course Admin > Homepages.


Click to select the homepage you want to edit.


In the Widgets area, click Add Widgets.


Select Microsoft Teams and click Add.


Click Save and Close.


Figure: Image of the Main Course Connector Panel


Figure: Image showing the Edit Settings Panel. The settings may differ depending on Global options.
 

Figure: Image showing the Main Panel once a Course and Team are synchronized.
 
Once a Team is synchronized, the main panel will allow the operator to navigate to the Team or to adjust the Settings. If there are multiple Teams then the panel shows all the Teams available to this user.
 

Figure: Image showing the Main Panel once a Course and multiple Teams are synchronized.
 
Course Widget Settings
The course widget allows an instructor to create a team, to edit settings and allows learners and instructors to open the Team(s).
The following options appear on the course widget:

Learners can create new private channels: Users with learner roles can create private channels. This option is only visible if the administrator allows this configuration through Settings.


Create a Team for each course section: To assist with Course organization in Brightspace, Instructors can separate their students into sections. Selecting this feature creates a separate Team for each section and rosters those teams with students from the section. The rostering is synchronized periodically. Instructors will be members of every Team. Learners who are members of multiple sections will become members in multiple Teams. Course Connector always creates a primary team linked to the Course, and then creates one Team for each section. The format of the Team name is managed by administrative settings. After the Teams are created, the Course Widget displays a list of links to available Teams. The instructor or learner can select the link to navigate to that Team. If a course section has a related Team and the section is deleted, the ‘Course Cleaning Waiting Period’ rules dictate what the Microsoft Course Connector will do with the connected Team.


Automatically add instructor(s) to all channels: Selecting this option ensures that instructors have access to all channels. The value of this option can be changed after the team is created, and the changes will occur at the next sync activity. If a Team owner accidentally removes an instructor, the next sync activity re-adds any owners based on the value of the option. Changing this option to the non-default (not automatically add) will not remove instructors from any existing channels. Once the course is created, the Course Connector widget displays links to navigate to Microsoft Team(s). If sections are mapped to Teams, a link appears for the primary Team and for each Team for which the user is member of the associated section. If any settings are edited, synchronization changes update during the next regularly recurring synchronization event. Usually within the next 24 hours.

Error Reporting on First Synchronization
If any errors occur after the first synchronization, they are reported within the Course Widget.
Errors are listed only for the first synchronization, and they are not persisted if the screen is refreshed. The administration panel in the ShuffleExchange tool displays all errors on the initial and subsequent synchronizations.


Figure: Error report after first synchronization. The error may reference a list of users. Click the participants drop-down to expand the list to view the users.
Office 365 IP Trust List
Microsoft 365 environments may reject requests made by the ShuffleExchange platform due to an unrecognized IP address.
To troubleshoot an unrecognized IP address, add the ShuffleExchange IP address range to your Microsoft 365 environment. For security reasons, contact D2L support or your account representative for further support.
ShuffleExchange Administration Panel
Operators will use the Administration Panel to manage settings, manage synchronized courses, and to perform validation.
Dashboard Tab
The Dashboard tab lists all the synchronized courses. You can search for specific courses in this list, and you can perform two actions on individual courses.

Figure: ShuffleExchange Administration Panel
For each course this list will identify the Brightspace Course Identifier, the course name, and details about the synchronization.
Course Status
The Course Status column can take on the following values:
Status
Description
Error
The Team creation failed.
Pending 
Course creation is currently happening or scheduled to happen. 
Completed
The course is created and is synchronizing.
Sync Enabled
The Sync Enabled column indicates if the ShuffleExchange connector is attempting to synchronize a selected course. This value is true until there are ten consecutive sync failures. After ten consecutive failures the synchronization attempts stop. A successful manual resynchronization returns this field to true and the Course Status field to Completed.
Failed Count
The Failed Count field shows the number of consecutive failed synchronizations attempts since the most recent successful synchronization event. Without any other manual intervention, the system performs one synchronization attempt per day.
Last Sync Status
The Last Sync Status column indicates the status of the most recent synchronization attempt. It displays one of the following values:
Status
Description
Pending 
The sync is currently happening. If it doesn’t change to COMPLETED, there may be a sync error.
Completed
The most recent synchronization was successful.
The Last Sync Details column may include additional details about a recent synchronization attempt.
Actions
Resynchronize Course: Manually synchronize a Course to the Team.
Delete Synchronization Connection: Delete the course connection in Course Connector.
Important:  Delete Synchronization Connection does not modify the Team or the course. If you have deleted the connection, there are two ways to recreate the connection. (a) delete the corresponding Microsoft Team and return to the Course Widget to create a new team, or (b) raise a support ticket with ShuffleLabs to re-connect the Course with the original Team.
Settings Tab
The settings in this tab are discussed earlier in this document.
Test Tools Tab
Administrators can validate their set up using the Test Tools tab on the ShuffleExchange Platform.

Figure: ShuffleExchange Test Tools
Access Test: Run this tool to confirm that the Valence API settings are correct. A dialog box informs the user that the settings are correct and the tool can connect to or the settings are incorrect.
Class Tests: Run this tool to confirm that the Course Connector is connected to the corresponding Teams class. The Check Instructors option checks that instructors are present in this class, and the instructor account is valid in Office 365.

Figure: Class Test Result
Email Tests: Run this tool to confirm that this user is configured in the Microsoft Office 365 Environment. You can enter the email or the UPN of the user. A dialog box provides the results of the test.
Limitations
There are several limitations imposed by Microsoft Teams.
There are limitations on the number of teams that may can be created. If delegated permissions are selected, a maximum of 1,000 Teams and a maximum of 250 Team members may can be create created.
If Class Teams application permissions are selected, the Teams are created by the system, rather than by a delegated user account. There are no limits on the number of teams or numbers of team members.
If a team is archived, a member remains a member of that Team. To remove the membership, either unenroll the user, or delete the Team.
Currently a maximum of 30 private channels may can be created per Team and each private channel may enroll a maximum of 250 members.
Validate the Brightspace Course Connector Settings
Administrators can validate their setup using the Test Tools tab on the ShuffleExchange Platform.

Figure: ShuffleExchange test tools.
The following tests are available:

Use the Access Test to confirm that the Valence API settings are correct. A dialog box displays that indicates whether or not the settings are correct and the tool can connect to Microsoft Office 365.


Use Class Tests to confirm that the Course Connector is connected to the corresponding Teams class. The Check Instructors option verifies that an instructor is present in the class, and the instructor account is valid in Office 365.


Figure: Verification information that the valence credentials are valid.

Use Email Tests to confirm that a user is configured in the Microsoft 365 environment. Enter the email or UPN for the user, and a dialog box displays the results of the test.

Upgrade Brightspace Course Connector
Log into the ShuffleExchange platform.
From the environment selector in the upper right corner of the screen, select the environment to upgrade.
On the left navigation pane, click Settings and then click Connect.
A Microsoft 365 global administrator must grant consent to install the new Brightspace Teams Course Connector application.
Once the application is installed, click Save.
Repeat the above upgrade steps for each environment in your ShuffleExchange account.
Once all upgrades are complete, a Microsoft 365 administrator can safely uninstall the following:ShuffleTeamsApp (the previous version of the Course Connector application).The previously created Microsoft 365 service user.
Note during this step: The user should have permissions to give tenant wide consent to the Brightspace Course Connector application. The Microsoft documentation (Grant tenant-wide admin consent to an application - Azure AD | Microsoft Docs) indicates: Granting tenant-wide admin consent requires you to sign in as a user that is authorized to consent on behalf of the organization. This includes Global Administrator and Privileged Role Administrator, and, for some applications, Application Administrator and Cloud Application Administrator. A user can also be authorized to grant tenant-wide consent if they are assigned a custom directory role that includes the permission to grant permissions to applications.
When authorizing as an admin you are providing permissions to the Graph API for:
Create teams
Add and remove members from all teams
Read and change all Teams settings
Read tabs in Microsoft Teams.
Create tabs in Microsoft Teams.
Create groups
Read directory data
Sign in and read user profile
Add the Brightspace Course Connector widget for Microsoft Teams to your course homepage
From your course homepage, click Course Admin > Homepages.
Click to select the homepage you want to edit.
In the Widgets area, click Add Widgets.
Select Microsoft Teams and click Add.
Click Save and Close.
Troubleshooting recommendations
The Brightspace-Microsoft Teams Course Connector (MTCC) integration allows users to connect their Brightspace instance with Microsoft Teams, enabling seamless collaboration and communication between the two platforms. However, there may be instances where the integration fails to connect successfully. This documentation section provides troubleshooting steps to help you resolve any issues you encounter during the setup process.
If you encounter any of the following images while trying to connect the MTCC widget, please refer to the troubleshooting steps below.

Figure: The error message when a team cannot be created.

Figure: An error message with steps to resolve the issue.

Figure: Error message for a failed connection.
Troubleshooting steps
Ensure Proper Setup: Before troubleshooting any issues with the (MTCC) integration, it is essential to ensure that you have followed the setup steps accurately. To confirm this, go through the following checklist:Double-check Credentials and Permissions: Confirm that you have entered the correct credentials and have the necessary permissions to connect Brightspace with Microsoft Teams.Make sure you have the appropriate access rights granted by your organization. If you are unsure about your permissions, consult with your organization's IT administrator or Microsoft administrator for verification.
Review App Setup: The configuration settings for the MTCC play a crucial role in the successful integration with Microsoft Teams. It is essential to review and verify the following settings:API Key: Ensure that you have entered the correct API key during the setup process. A minor typo or incorrectly-entered character in the API key can hinder the Course Connector from configuring correctly. Refer to the API key provided by your Brightspace administrator and confirm its accuracy.Organization URL: Verify that the organization URL entered for the MTCC is accurate. Any discrepancies or incorrect URLs will prevent the integration from establishing a connection. Make sure to enter the full URL of your organization's Brightspace instance.Configuration Settings: Review all other required information and configuration settings for the MTCC. Ensure that you have entered them correctly according to the guidelines provided during the setup process. Check for any typos or errors in these settings that may impede the integration.
Restart the Setup Process: If you have verified the above steps and are still experiencing issues with the MTCC integration, restarting the setup process might help resolve the problem. Follow these steps to restart the setup process:Disconnect the Integration: Within the Microsoft Teams interface, navigate to the Apps section and locate the Brightspace Course Connector. Disconnect the integration from Microsoft Teams by removing it from the list of installed apps.Restart the Setup: Access the Brightspace administrator interface and initiate the setup process for the MTCC again. Follow the provided instructions carefully, ensuring that you enter the correct information and complete all steps accurately.Test the Integration: Once you have finished the setup process, it is important to test the integration to ensure it is configured properly. To do this, navigate to the Test Tools tab on the ShuffleExchange admin site. Look for the blue Test Valence button and click on it to verify that the connection has been successfully established. If you encounter a message stating 'Trouble! Valence credentials are not valid, please reconfigure,' the tool is indicating that there is an error within the configuration setup phase. In such cases, you should review the configuration settings to ensure the credentials are entered correctly. If the issue persists even after double-checking the configuration, it is recommended to seek further assistance from technical support. They will be able to provide expert guidance and help troubleshoot the problem effectively.




--------------------------------------------------


Set up Ouriginal Plagiarism Checker

About Ouriginal Plagiarism Checker
Ouriginal (formerly URKUND) is a plagiarism detection integration that generates reports for submissions made to assignments. When the documents arrive at Ouriginal, they are analyzed against the content of three source areas: the internet, published material and learner material. 
Ouriginal provides instructors and learners with a significance score to show what percentage of a document is drawn from other sources, as well as access to Ouriginal's site for a full report on the submission.
Contact your D2L Account Manager to request Ouriginal contact details, the LTI Secret, and LTI Key to set up the Ouriginal integration. The default key value is 'urkund' for all clients. Direct all sales, support, and implementation questions to Ouriginal: https://www.ouriginal.com/contact-sales/.
Set up a remote plugin for Ouriginal Plagiarism Checker
You must create a remote plugin for Ouriginal  so that quicklinks can be added to course navbars. Administrators or instructors can add the quicklink after creation of the remote plugin is complete.
From the Admin Tools menu, click Remote Plugins.
Click New Remote Plugin, and from the Plugin Type menu, select Navbar, and set the Target to Same Frame.
Enter a name for your remote plugin.
Enter https://ltilaunch.brightspace.com/launch as the Launch Point URL.
Enter the LTI Key.
Enter the LTI Secret provided to you by Ouriginal. Note: The credentials are exclusive to each URL. If you have a Production and Test site then you will need explicit credentials for each provided by Ouriginal.
In the OAuth Signature Method field, specify HMAC-SHA1 as the cryptographic hash function. HMAC-SHA256 is the default value. 
To set which course offerings have access to use this remote plugin, click Add Org Units. By default the link is only available on the org home page.
Search for the course offering or department you would like to grant access, check the box next to the name, and click Insert.
Confirm the details for the launch point URL, LTI Key, and LTI Secret are correct, and click Save.
Note: Check under Admin Tools > External Learning Tools > Tool Providers to ensure there is only a single entry for ltilaunch.brightspace.com. If duplicates are present (where the Name within matches the RemotePlugin created above) then delete all but one and ensure (a) to reset the security key and (b) to select all security option checkboxes.
Set up IMS role mappings for Ouriginal Plagiarism Checker
In order for instructors, learners, and administrators to use the Ouriginal Plagiarism Checker integration, you must map the appropriate user roles to IMS roles.
From the Admin Tools menu, click IMS Configuration. 
Map the Administrator role to the Administrator IMS role.
Determine which other roles will be using this integration and map those to the corresponding IMS roles.
Click Save.
Ouriginal Plagiarism Checker permissions
In the Administrator View of Ouriginal, the following permissions determine which roles have access to the integration:
See Student Page - Allows access to the learner view of Ouriginal.
See Instructor Page - Allows access to the instructor view of Ouriginal.
View Significant Stats - Makes the significance score information visible; this displays what percentage of a document's content is shared with other sources.
View Report - Allows access to the Ouriginal site to view a full plagiarism report.
Manage Assignments - Allows a user to turn on and off plagiarism detection for assignments.
To set up Ouriginal Plagiarism Checker permissions
The Ouriginal  permissions determine what level of access to the integration is granted to your users.
Access a course that has the Plagiarism Checker quicklink available and click the link in the navbar.
Click View Administrator Page.
Grant the desired permissions to the Learner, Instructor, and Administrator roles.
Click Save.
Note: D2L recommends granting Administrators all available permissions. Instructors require See Instructor Page, View Significant Stats, View Report, and Manage Assignments. Learners require See Learner Page. Depending on the amount of information you would like Learners to have access to, you can also grant the View Significant Stats and View Report permissions.

The d2l.3rdParty.Urkund.SendRealStudentEmail (Org) configuration variable determines whether to send a learner's external email address or a system generated email address to Ouriginal . When enabled, it sends a valid learner email address. It's turned off by default. Sending valid email addresses to Ouriginal  enhances troubleshooting workflows as it enables faster learner identification.
Add Ouriginal  Plagiarism Checker quicklink to a navbar
For instructors and learners to access the Ouriginal  Plagiarism Checker integration, you must add a quicklink to course navbars. Administrators have the ability to add the quicklink to the default Organization level navbar which is shared with all course offerings. Once you add the quicklink to the default navbar, it will immediately be visible in all courses with the default navbar enabled.
On the Organization level navbar, click Course Admin.
Click Navigation and Themes.
 Select the default navbar to edit.
In the Links area, click Add Links.
Search for the name of the remote plugin you created for the Ouriginal integration.
Check the box next to the plugin's name and click Add.
Click Save and Close.
Note: The quicklink can be added to individual course navbars if you prefer not to include it on your Organization's default navbar.
Turn on Ouriginal Plagiarism Checker

From the   Admin Tools menu, select Organization Tools.

Switch the Ouriginal Integration toggle to On.




--------------------------------------------------


ReadSpeaker docReader

ReadSpeaker is a company that provides text-to-speech solutions on the web. Their solutions provide users with alternative methods of consuming text-based content, such as through listening to it directly or downloading it as sound files without the need to download and install additional software.
The ReadSpeaker docReader integration for Brightspace provides audio rendering of supported document types in the Content tool. 
D2L also supports a ReadSpeaker integration solution that automatically enables ReadSpeaker online text-to-speech technology for HTML content in Brightspace. Any user can hear their HTML course content spoken aloud or download it as an MP3 using only their internet browser. Users can also highlight and play back a subset of the content. 
Key features of ReadSpeaker docReader
Once you turn on and configure the ReadSpeaker docReader integration for your organization, learners can easily access this feature inside a Content topic via the Open with docReader button or the topic's context menu. The docReader viewer integrates seamlessly within Content. 
The ReadSpeaker docReader integration offers audio playback of the following document types: 
EPUB (.epub)
Microsoft Excel (.xls, .xlsx)
Microsoft PowerPoint (.pps, .ppt, .pptx)
Microsoft Word (.doc, .docx)
OpenOffice/OpenDocument Presentation (.odp)
OpenOffice/OpenDocument Spreadsheet (.ods)
OpenOffice/OpenDocument Text (.odt)
Portable Document Format (.pdf)
Rich Text Format (.rtf)
Note Ensure that any text you require ReadSpeaker to narrate is contained within the <body> tags of the HTML file. Any text that is externally referenced by the HTML file (through JavaScript, for example) will appear as expected in BrightSpace, but will not be narrated by the ReadSpeaker integration.
Administering ReadSpeaker docReader
Organizations must have a ReadSpeaker account to access ReadSpeaker docReader. Contact your client account manager if you need assistance acquiring access to ReadSpeaker technology, and enabling the integration for your instance. 
Once you have the ReadSpeaker docReader integration installed, you can turn on access to it for your organization using Organization Tools in Brightspace. You can view and set configuration variables for docReader using the Config Variable Browser tool.
Note: Ensure that any text you require ReadSpeaker to narrate is contained within the <body> tags of the HTML file. Any text that is externally referenced by the HTML file (through JavaScript, for example) appears as expected in BrightSpace, but is not narrated by the ReadSpeaker integration.
Turn on and configure ReadSpeaker docReader in Brightspace
Do one of the following: If you want to turn on the ReadSpeaker docReader for an org, from the  Admin Tools menu, click Organization Tools.If you want to turn on the Readspeaker docReader for a specific course, click Course Admin. 
In the Tool Availability list, turn on ReadSpeaker docReader Integration.
From the Admin Tools menu, click Config Variable Browser.
Search for docReader variables and set the following configurations:
Click d2l.3rdParty.ReadSpeakerDocReader.CustomerId and enter the customer ID provided by ReadSpeaker.
Click d2l.3rdParty.ReadSpeakerDocReader.DocReaderUrl and enter the docReader URL provided by ReadSpeaker.




--------------------------------------------------


ReadSpeaker for HTML content

The ReadSpeaker HTML content integration solution automatically enables ReadSpeaker online text-to-speech technology for HTML content in Brightspace. Any learner can hear their HTML course content spoken aloud or download it as an MP3 using only their internet browser. Learners can also highlight and play back a subset of the content. The integration is available to learners in Content, Quizzes, and Assignments.
Key features of ReadSpeaker HTML content integration
Once you turn on and configure the ReadSpeaker HTML content integration for your organization, learners can easily access this feature inside a Content tool page using the Listen button. ReadSpeaker is also available to learners in Quizzes and Assignments.
The ReadSpeaker HTML content integration:
Automatically enables HTML pages in the Content tool to allow all page content or learner-selected content to be spoken aloud or downloaded as an MP3. 
Automatically enables instructions, descriptions, and rubric information in Quizzes and Assignments to be spoken aloud or downloaded as an MP3.Note: This feature is dependent on ReadSpeaker 3.6 or higher
Allows you to turn on and turn off the ReadSpeaker integration for individual courses.
Detects and prevents conflicts with previous ReadSpeaker-enabled content.
Content listening options for learners
When learners navigate course content, a Listen button is available at the top of the content page: 

Figure: The ReadSpeaker display controls

Figure: The ReadSpeaker display advanced controls
Learners can click the Listen button and then, using the advanced controls on the ReadSpeaker player, do one of the following:
Click the  Download mp3 icon to download the complete page text as an MP3 for later listening. ReadSpeaker presents the terms of use policy users must agree to before the download starts.
Play the page content, and pause playback at any time. If a learner selects a subset of content within a page that is ReadSpeaker-enabled, when the learner clicks Listen only the selected text plays back.
ReadSpeaker is also available in Quizzes and Assignments. When learners access a quiz, ReadSpeaker can read both the Description and Quiz Details. When learners access an assignment the Instructions and Rubrics can be read by ReadSpeaker.
All playback uses the voice and language configured for the course through the d2l.3rdParty.ReadSpeaker.SpeakingVoice configuration variable.
Note: Ensure that any text you require ReadSpeaker to narrate is contained within the <body> tags of the HTML file. Any text that is externally referenced by the HTML file (through JavaScript, for example) appears as expected in Brightspace, but is not narrated by the ReadSpeaker integration.
Administering the ReadSpeaker HTML content integration
Organizations must have a ReadSpeaker account to access the ReadSpeaker HTML content integration. Contact your client account manager if you need assistance acquiring access to ReadSpeaker technology, and enabling the integration for your Brightspace instance. 
After you have installed the ReadSpeaker HTML content integration, you can provide access for your organization using Organization Tools. You must also view and set configuration variables for ReadSpeaker using the Config Variable Browser tool.
From the  Admin Tools menu, click Config Variable Browser.
Search for ReadSpeaker variables and set the following configurations:Note: ReadSpeaker webReader can be integrated across the Brightspace platform or on a course-by-course basis.
Click d2l.3rdParty.ReadSpeaker.CustomerId and enter the customer ID provided by ReadSpeaker.Click d2l.3rdParty.ReadSpeaker.ReadspeakerUrl and enter the ReadSpeaker URL that the integration interacts with. Use the default of https://app.readspeaker.com/cgi-bin/rsent unless instructed otherwise by D2L or ReadSpeaker technical staff. Click d2l.3rdparty.ReadSpeaker.LanguageParameter and verify the language is set as expected. The default is en-us (American English).
From the  Admin Tools menu, click Organization Tools.In the Tool Availability list, turn on ReadSpeaker.
Note: It is also possible to turn on ReadSpeaker for individual courses using the Course Admin tool. The same version of ReadSpeaker is available to an entire instance; it is not possible to use different versions in different org units.
The expected behavior of ReadSpeaker in your Brightspace environment is as follows:
If the ReadSpeaker WebReader tool is turned off, ReadSpeaker is turned off regardless of the d2l.3rdParty.ReadSpeaker.Enabled configuration variable.
If the ReadSpeaker WebReader tool is turned on, the value of the d2l.3rdParty.ReadSpeaker.Enabled configuration variable determines the behavior: If the instance value is set to ON, and the Org Unit value is ON for a specific org unit, ReadSpeaker WebReader is enabled for that specific org unit.If the instance value is set to ON, and an org unit does not have a specific value set, ReadSpeaker WebReader is enabled for that org unit.If the instance value is set to Off, and the Org Unit Value is on for a specific org unit, ReadSpeaker WebReader is enabled for that org unit.
 



--------------------------------------------------


About the Respondus LockDown Browser

About the Respondus LockDown Browser
The LockDown Browser is a custom browser that deters cheating by locking down the Quizzes tool in Brightspace. Locking down quizzes prevents learners from visiting other websites, accessing other applications, capturing screen content, and printing content displayed by the browser. For more information on the Respondus LockDown Browser, visit their Feature information page, or watch the Overview video on the Respondus  YouTube channel. A link to download the LockDown Browser is visible on the Start Quiz page of any quiz that requires the use of LockDown Browser.
To enable the LockDown browser for your instance of Brightspace, turn on the Respondus.LockDownBrowser configuration variables listed in the 3rd Party configuration variables topic.
Note: The Brightspace Self-Assessment tool is also a dependency for Respondus integration. Ensure that you have the Self-Assessment tool enabled in Brightspace Org Tools. 
Before you begin
Using Respondus requires you to complete set up tasks on the Respondus servers and in the Respondus dashboard in your Brightspace Instance. 
Ensure that you have access to the login page for the Administrator Area of the Respondus web site. This is the location where you that ensure your institution is correctly set up on the Respondus side before implementing in D2L. Your D2L account team can assist you in setting up the Brightspace instance with Respondus LockDown Browser.
Setting up Respondus in Brightspace
When properly configured, Respondus appears in the LockDown Browser tab of the Quizzes tool. You must complete the following steps to enable the LockDown Browser tab and make it visible. Refer to additional information in the Respondus LockDown Browser Admin Guide (available on the Respondus website) or the 3rd Party configuration variables content in Brightspace Community.
Setting Configuration Variables
From the Admin Tools menu, click Configuration Variable Browser. 
Ensure that the following variables are set to ON for the Org Unit.Note:  All child org units of the types you select inherit the parent values you apply.d2l.3rdParty.Respondus.HasLockDownBrowser d2l.3rdParty.Respondus.LockDownBrowserDownloadURLd2l.Tools.ClassList.DisplayUserName
Note: The username does not need to be displayed to learners; that is controlled by a separate permission. 
Setting up Instructor Roles and Permissions
In the  Filter by Tool list, navigate to Users, and then click Apply Filter.
Apply the following permissions: For View User Enrollments, click to select Organization and Course Offering.For Search for 'Student', click to select Organization and Course Offering. 
Click Save.
In the Filter by Tool menu, navigate to External Learning Tools and then click Apply Filter.
Apply the following permission:For Launch External Learning Tool Links, click to select Course Offering.
In the Filter by Tool menu, navigate to User Information Policy and then click Apply Filter.
Apply the following permissions:For See First Names, click to select Course Offering.For See Last Names, click to select Course Offering.For See Usernames, click to select Course Offering.
Click Save.
In the Filter by Tool menu, navigate to Course Management Console and then click Apply Filter.
Apply the following permission:For See Course Info, click to select Course Offering.
Click Save.
In the Filter by Tool menu, navigate to Quizzes and then click Apply Filter.
Apply the following permissions:For Add/Remove Questions from Quizzes, click to select Course Offering.For Create Quizzes, click to select Course Offering.For Delete and Restore Quizzes, click to select Course Offering.For Edit Quiz Properties click to select Course Offering.For Preview Quizzes click to select Course Offering.
Click Save.
In the Filter by Tool menu,navigate to Survey and then click Apply Filter.
Apply the following permissions:For Add/Remove Questions from Surveys, click to select Course Offering.For Can Create Surveys, click to select Course Offering.For Delete Surveys, click to select Course Offering.For Edit Survey Properties, click to select Course Offering.For Preview Surveys,  click to select Course Offering.
Click Save.
In the Filter by Tool menu, navigate to Self Assessments and then click Apply Filter.
Apply the following permissions:For Add/Remove Questions from Self Assessments, click to select Course Offering.For Create Self Assessments, click to select Course Offering.For Delete Self Assessments, click to select Course Offering.For Edit Self Assessment Properties, click to select Course Offering.For Preview Self Assessments,  click to select Course Offering.
Click Save.
In the Filter by Tool menu, navigate to Grades and then click Apply Filter.
Apply the following permission: For See the Grades tool,  click to select Course Offering.
Click Save and Close.
Turn on Respondus and related tools
In Admin Tools, navigate to Organization Related > Manage Extensibility.
Ensure that there is a checkmark beside Respondus.Figure: The highlighted checkmark indicates that Respondus v4.0 is enabled.
In Admin Tools,navigate to Organization Related > Organization Tools. 
Ensure that the toggle in the Availability column is turned on for Self Assessments and Survey.
 
Turning on Respondus LockDown Browser in Quizzes
After you have installed your Brightspace instance of Respondus LockDown Browser and integrated with Brightspace, you need to ensure that your instructors can see the Respondus LockDown Browser dashboard in the Quizzes tool. 
Note: Instructors can enable or disable Respondus for a quiz if the Respondus LockDown dashboard is turned on.
The LockDown Browser tab visibility is set using two configuration variables. Ensure that: 
d2l.3rdParty.Respondus.DashboardLTILinkId is properly configured for your instance. For more information about the link ID, refer to the Respondus LockDown Browser External Learning Tool information in the Respondus LockDown Browser Administrator Guide.
d2l.3rdParty.Respondus.HasLockDownBrowser is set to ON.
How can I tell if the Respondus LockDown dashboard is turned on?
On your Brightspace homepage, select a course. On the course homepage, click Quizzes or click More and select Quizzes from the list. If you see the LockDown Browser tab, the dashboard is turned on.

Figure: The presence of the LockDown Browser tab in the Quiz tool indicates that the LockDown Browser is turned on.



--------------------------------------------------


Setting up Turnitin

About Turnitin
Turnitin is a cloud-based solution with capabilities in originality checking and online grading that saves instructors time and provides personalized feedback for learners. Turnitin consists of a Similarity Report feature integrated with  Assignment submissions to identify potential cases of plagiarism by automatically comparing submissions to an online database of original content. There is also an Originality Reports which highlight key areas, show a breakdown of matching sources, and provide direct links to the matching content.
Turnitin also offers an add-on online grading and feedback feature integrated into your existing Brightspace assessment workflow. Instructors can add comments, inline text, and highlight sections in file submissions, directly from the Assignments tool. Then, Learners can view the online feedback in User Progress under Grades or Assignments, or in the Grades, Content, or Assignments tools. Consult with your Brightspace sales representative to purchase these add-on capabilities. 
Note: The use of Turnitin combined with the special access features in the Assignments tool is not supported. If you set a due date for a user with special access that is different than the due date you set in the Turnitin configuration for the assignment, the Turnitin due date does not change.
Setting up your Turnitin integration
There are a few steps you must complete in Turnitin before you can set up Brightspace to use it. To assist you in understanding the workflow that is required outside Brightspace, review the high level steps below. For specific instructions on how to complete these steps, refer to the Turnitin help; specifically Configure your LTI integration in Turnitin. 
Log into the Turnitin website using your Turnitin account.
In the Administrator view, do one of the following:If your integration appears to be configured, click the integration. If your integration is not configured, click the integration and complete the configuration process for the LTI API. Make note of the Shared Key.
Make note of the information in the Shared Key (required) field, which are necessary to complete the setup in Brightspace.
Save your configuration and return to Brightspace.
Enable Turnitin configuration variables
The following configuration variables have impact on using Turnitin with Brightspace. Some are necessary to use Turnitin, and others are required to use the extended features of Turnitin, such as exemptions, grademark, or the grammar checker. 
d2l.3rdParty.Turnitin.GrademarkAutoTransferDefault set to on.
d2l.3rdParty.Turnitin.HasGrademark set to on.
d2l.3rdParty.Turnitin.HasPlagiarismPrevention set to on.
d2l.3rdParty.Turnitin.LTI.AccountID set to include the Turnitin account ID for the org unit with which you want to integrate.Note: The account ID is available in the Account ID column of your Turnitin administrator screen. 
d2l.3rdParty.Turnitin.LTI.PaperViewRequestEmail set to a valid email address.
d2l.3rdParty.Turnitin.LTI.PaperViewRequestUserId used to improve the migration process from Turnitin V1 to Turnitin V2. 
d2l.3rdParty.Turnitin.LTI.SharedKey added to both Value fields for the org unit with which you want to integrate. Note: The Shared Key was is available from the configuration settings on the Turnitin website as noted in the Setting up your Turnitin Integration procedure, above. When editing this field, you must enter the key twice to confirm the value in the masked field.
d2l.3rdParty.Turnitin.LTI.URL set to one of the following URLs for the org unit with which you want to integrate: If you are in the UK: https://api.turnitinuk.com/api/lti/1p0/assignment If you are anywhere else in the world https://api.turnitin.com/api/lti/1p0/assignment
For more information, see 3rd Party configuration variables.
Note: If you do not have the add-on grading or grammar functionality on your Turnitin license, the variables for those features do not work, regardless of the setting. If you are switching from Legacy API to LTI, these configuration settings are automatically set for you. 
To improve the migration process from version 1 to version 2 of Turnitin, the d2l.3rdParty.Turnitin.LTI.PaperViewRequestUserId configuration variable accepts the input of a UserId for a user in Brightspace. This variable expects the input of a valid Brightspace UserId for a user with a valid email address. That email address is used when creating a new course / assignment within Turnitin. Therefore, when a Paper View Request is created for those new assignments, they are sent to the email address of that user.
D2L recommends enrolling that user in a cascading role to ensure that user has access to all available courses that may use Turnitin. This role does not require any specific permissions. Once you setup the new Turnitin variable, instructors can use new assignments or copied folders that use Turnitin version 2.
Set up IMS role mappings for Turnitin
In order for instructors and learners to use the Turnitin integration, you must map user roles to IMS roles.
From the Admin Tools menu, click IMS Configuration. 
Map the Learner role to the Learner IMS role, and the Instructor role to the Instructor IMS role.
Click Save. 
After learner roles are mapped, their submissions are sent to Turnitin after being uploaded to an assignment. If you allow students to view their Originality Reports, they can click the icon links to Turnitin on the Submission History and View Feedback pages.
Note: Users with roles that are not mapped to the IMS Configuration Instructor Role receive a warning on the Turnitin tab when editing assignments. To change this language term to include additional information about who to contact if users get this error, in Admin Tools > Language Management, select US English and then search for txtTurnitinNotEnabledForRole. Enter the text you want users to see in the Custom Value field and click Save.
Troubleshooting: Learners are unable to click on Originality Percentage
Learners can select their originality report score to view a report on the Turnitin site if the assignment is configured to allow access. Incorrect IMS Mappings or assignment  configurations can prevent users from accessing this information.
From the Admin Tools menu, select IMS Configurations.
Ensure the Brightspace learner role is mapped to the IMS learner role.
Edit the assignment and select the Turnitin tab.
Ensure that the checkbox to Allow learners to see Turnitin similarity scores in their submission folder is selected.
Enable Turnitin exemption for individual users
You can exempt individual users from having their assignments checked by Turnitin. By default, Turnitin exemption is turned off for your organization. 
Do one of the following:
In the Config Variable Browser, set the value of d2l.3rdParty.Turnitin.AllowExemption to on to enable Turnitin exemption of individual users for all courses in your organization.
On the Config Variable Browser page for the d2l.3rdParty.Turnitin.AllowExemption configuration variable, click Add Value and either enter or select an Org Unit ID. From the Value drop-down menu, select on. This enables Turnitin exemption of individual users for a specific course.
Configure Turnitin to update grade information in Brightspace
If an assignment has been evaluated using Turnitin's Online Grading® tool, that information can be sent to the Grade book in Brightspace.
Complete evaluation of assignment submissions using Turnitin Online Grading.
Return to the Assignments tool in Brightspace and select the assignment you evaluated using Online Grading.
Click Evaluate beside a learner's submission, and locate the Turnitin Online Grading score.
Click Use this score, and then Publish.
Understanding date management in Turnitin
When using the Originality Reports in Turnitin, it is important that you understand the implications of your date settings on your assignment submission folders. Both D2L and Turnitin maintain their own set of Start and Due dates for assignment submissions, which can cause confusion as to how dates work. 
When a folder is initially created, instructors can include dates for the submission folder in D2L; however, when an instructor later creates a Turnitin assignment, D2L gives the instruction the option to provide the D2L dates or let Turnitin default to their own dates. D2L is not required to send dates, but since Turnitin relies on them, it is important that something is provided instead of a null value. Even with this recommendation, though, there are scenarios where D2L has no dates to provide. In some cases, assignment submission folders do not require dates, and many administrators prefer that there are no dates. Due to the technical requirements of Turnitin; however, D2L must help manage the dates if none are provided. The following table describes how D2L handles the defaults when no dates are provided by the instructor.
D2L start date set
D2L end date set
Turnitin start date value
Turnitin end date value
No
No
Current date
1 week plus 24 hours
Yes
No
D2L start date
2 weeks from the start date plus 24 hours
No
Yes
Current date
D2L end date plus 24 hours
Yes
Yes
D2L Start date
D2L end date plus 24 hours
These defaults ensure that Turnitin users do not encounter errors when attempting to create Turnitin-enabled folders as a result of the missing date values. Additionally, 24 hours is often appended on the due date to accommodate the queue-based system of Turnitin. This buffer ensures that assignments that are submitted very close to the due date (but not late) are not penalized because they were caught in a queue. 
There may also be scenarios where the due dates do not provide sufficient time, for example, if an instructor sets up assignment submission folders in September with the expectation that the students will not submit assignments until November. In that case, the following logic applies:D2L checks the Assignment Submission due date. If an assignment due date exists, the due date is assigned to Turnitin as the default
If no due date exists, D2L looks to the course end date. If a course end date exists, the course end date is assigned to Turnitin as the default
If no end date exists for the course, the default is set to 6 months. 
Additional information
For additional information, visit the Turnitin User Guides and Support site.



--------------------------------------------------


Top Hat Classroom

Top Hat Classroom  provides easy-to-use tools to engage your classroom, adopt and author next generation interactive textbooks, create assignments on the fly and securely administer tests. 
 Top Hat Classroom is available for purchase through D2L, for use in Brightspace. 
Top Hat Classroom is available as an LTI 1.1 integration as an add-on product to Brightspace Core. Two tiers are available: Top Hat Classroom Basic which has no cost, and Top Hat Classroom Pro, which is available as part of an annual subscription. Your institution can request this integration by contacting your D2L account representative. Note that Top Hat Classroom is currently available in English only and hosted in the regions of US and Canada.
Integrate Top Hat with Brightspace
Before you begin: Ensure your organization has completed the purchase of Top Hat and you have the appropriate permissions to set up LTI integrations in Brightspace. 

 LTI Setup Instructions for D2L Administrators


LTI Setup for D2L Instructors

 
 



--------------------------------------------------


Set your IMS role and Org Unit Type configuration

Role Mappings is a list of IMS Global standard roles that describe the Brightspace user. There are two types of IMS Global standard roles:
The Institution role refers to the users role at the organization level. 
The Context role refers to the users role in the org unit where the activity is being performed (in general this would be the Course Offering).
To set your IMS role and Org Unit Type configuration
From the Admin Tools menu, click IMS Configuration.
On the Roles tab, click +Edit Role Mapping to map each Institution Role and Context Role to the Brightspace Role. 
Select the check boxes for the Institution Role or Context Role. Note: You can map multiple  IMS roles to the Brightspace Role if needed. Do not remove any existing mappings.
Click Save.
On the Org Unit Types tab, select the check boxes to map the CourseOffering org unit type to the Course Offering type. Review the remainder of the org unit type mappings to ensure they meet the needs of your organization.
Click Save.
Video: Set up Virtual Classroom and Video Assignments




--------------------------------------------------


Required Brightspace permissions

Instructors and administrators must have the following Brightspace permissions set at the Course Offering level:
Launch External Learning Tool Links
Create Quicklinks from available External Learning Tools links
Create External Learning Tool Links from available External Learning Tool Providers
Delete External Learning Tool Links
Administrators must have the Manage IMS Configuration permission.
Learners must have the Launch External Learning Tool Links permission.



--------------------------------------------------


Review the Bongo LTI tool provider settings

From the Admin Tools menu, click External Learning Tools.
On the Manage Tool Providers tab, click the tool provider entry. Take note of the URL for use in later steps.
In the OAuth Signature Method field, specify HMAC-SHA1 as the cryptographic hash function. HMAC-SHA256 is the default value. 
Review the Visibility setting. Select the Allow users to view this link check box. 
Review the Security Settings section. 
The following settings are required:Send tool consumer information to tool providerSend context information to tool providerSend course information to tool providerSend LTI user ID and LTI role list to tool providerSend user name to tool providerSend user email to tool providerSend system Org Defined ID to tool providerSend link title to tool providerSend link description to tool provider
Set the scope of sharing by completing the following actions:If you are using the integration as a pilot, click Add Org Units, and select the specific org units you want in the pilot. Click Insert.If you are using the integration for your entire organization, click Add Org Units, and select your organization and all descendants. Click Insert.
Click Save and Close.




--------------------------------------------------


Create a plugin for Virtual Classroom or Video Assignments

Create a navbar remote plugin or a quicklink remote plugin for Virtual Classroom or Video Assignments. 
To create a navbar remote plugin for Virtual Classroom or Video Assignments
You must create two separate plugins for Virtual Classroom and Video Assignments features.
From the Admin Tools menu, click Remote Plugins > New Remote Plugin.
From the Plugin Type drop-down menu, select Navbar.
In the Name field, enter the name that you want to appear on the navbar for your integration. For example, Video Assignments or Virtual Classroom.
In the Launch Point URL field, enter the URL from the Tool Provider instance and do the following:To create the Virtual Classroom plugin, add /connect?action=virtual_classroom to the end of the URL.For example, https://na.bongo.com/lti/sample/connect?action=virtual_classroom.To create the Video Assignments plugin, add /connect?action=video_assignment to the end of the URL.For example, https://na.bongo.com/lti/sample/connect?action=video_assignment.
Leave the LTI Key and LTI Secret fields blank to use the key and secret specified in the tool provider entry.Note: In the OAuth Signature Method field, specify HMAC-SHA1 as the cryptographic hash function. HMAC-SHA256 is the default value.
To specify a small icon, in the Icon URL field, do either of the following:If you are creating a plugin for Virtual Classroom, enter https://s.brightspace.com/lib/nav-icons/1.0.0/virtual-classroom.svgIf you are creating a plugin for Video Assignments, enter https://s.brightspace.com/lib/nav-icons/1.0.0/video-assignment.svg
To specify a large icon, in the  Icon URL field, do either of the following:If you are creating a plugin for Virtual Classroom, enter https://s.brightspace.com/lib/nav-icons/1.0.0/virtual-classroom.svgIf you are creating a plugin for Video Assignments, enter https://s.brightspace.com/lib/nav-icons/1.0.0/video-assignment.svgNote: Although navbar remote plugins include fields for large and small icons, the navbar supports one icon size. For your navbar, choose the icon size that best suits the user experience for your organization.
Click Add Org Units and select the same sharing criteria you used when reviewing the tool provider entry. Click Insert.
Click Save.
To create a quicklink remote plugin for Virtual Classroom or Video Assignments
You must create two separate plugins for Virtual Classroom and Video Assignments features.
From the Admin Tools menu, click Remote Plugins > New Remote Plugin.
From the Plugin Type drop-down menu, select Quicklink.
In the Name field, enter the name that you want to appear on the navbar for your integration.
In the Launch Point URL field, enter the URL from the Tool Provider instance and do the following:To create the Virtual Classroom plugin, add /connect?action=ql_virtual_classroom to the end of the URL.For example, https://na.bongo.com/lti/sample/connect?action=ql_virtual_classroom.To create the Video Assignments plugin, add /connect?action=ql_video_assignment to the end of the URL.For example, https://na.bongo.com/lti/sample/connect?action=ql_video_assignment.
Leave the LTI Key and LTI Secret fields blank to use the key and secret specified in the tool provider entry.Note: In the OAuth Signature Method field, specify HMAC-SHA1 as the cryptographic hash function. HMAC-SHA256 is the default value.
To specify a small icon, in the Icon URL field, do either of the following:If you are creating a plugin for Virtual Classroom, enter https://s.brightspace.com/lib/nav-icons/1.0.0/virtual-classroom.svgIf you are creating a plugin for Video Assignments, enter https://s.brightspace.com/lib/nav-icons/1.0.0/video-assignment.svg
To specify a large icon, in the Icon URL field, do either of the following:If you are creating a plugin for Virtual Classroom, enter https://s.brightspace.com/lib/nav-icons/1.0.0/virtual-classroom.svgIf you are creating a plugin for Video Assignments, enter https://s.brightspace.com/lib/nav-icons/1.0.0/video-assignment.svgNote: Although quicklink remote plugins include fields for large and small icons, the navbar supports one icon size. For your navbar, choose the icon size that best suits the user experience for your organization.
Click Add Org Units and select the same sharing criteria you used when reviewing the tool provider entry. Click Insert.
Click Save.
Video: Create the navbar and quicklink remote plugins for Virtual Classrooms

            Video: Create navbar and quicklink remote plugins





--------------------------------------------------


Update and test the External Learning Tools links

To ensure the remote plugins and tool provider are properly setup, you can preview the navbar remote plugins you created. If the tools launch, your setup is complete. If an error appears, review your configurations.
From the Admin Tools menu, click External Learning Tools.
On the Manage External Learning Tool Links tab, click to edit each of the links that match the URL you used to set up your remote plugins. If you deployed all 4 plugins, there are 4 links.
Click Edit Links.
               In the Signature section, ensure Sign messages with key/secret with and Tool consumer key/secret are enabled.
In the Security Settings section, click Use tool provider security settings.
Click Save and Close.
On the Manage External Learning Tool Links tab, click the drop-down list for the URL you used to set up your navbar remote plugins.
Click Preview.




--------------------------------------------------


Add Virtual Classroom or Video Assignments to the navbar

To add Virtual Classroom or Video Assignments to the navbar
For instructors to access Virtual Classroom and Video Assignments, you must add the tools to the navbar. If you are conducting a pilot of the integration, you might only want to add it to certain courses. If you are doing a full deployment, you might want to add it to your default navbars.
From the Admin Tools menu, click Navigation & Themes.
Click the name of the navbar that you want to add the link to.
In the section of the navbar you want to add the link to, click Add Links.
Search for the navbar link you created in the remote plugin setup.
Select the navbar link you want to add.
Click Add.
Video: Add the Virtual Remote Plugin to the navbar




--------------------------------------------------


Glossary of Terms

A new Glossary of Terms is coming soon.



--------------------------------------------------


iOS Native Application

The iOS Native Application for Virtual Classroom allows users to join meetings from iOS devices. A native app is required because browsers on iOS do not currently support WebRTC sufficiently for Virtual Classrooms use. The app supports participant-use only, and does not  contain presenter capabilities. The app is currently available in English only.
Participant features include:
View (Presentation, Whiteboard, Shared Desktop, and Webcams)
Share (Webcam and Audio)
Chat (Participate in Public and Private) 
The participant experience currently does not support File Downloads, Polling or Breakout Rooms.
Currently, Presenter Activities (Desktop Sharing, Presentation, Whiteboard) are unsupported.
To download the iOS native application:
On an iOS device, navigate to the meeting launch page for a particular Virtual Classroom in order to join a meeting.
Do one of the following:
If you have not already downloaded the app, choose the download link on the Meeting welcome page. Alternatively, the app can be downloaded directly from the Apple App Store by searching for Bongo Virtual Classroom.
If you already have the application, starting the meeting automatically starts the app.




--------------------------------------------------


Documentation changes for integrations

Looking for what's new in Integrations topics? The following list provides links to all integrations help topics that have been newly created or updated. For more information about Brightspace features, refer to our Release Note Updates.
February 2024/20.24.2
Updated the LTI Advantage - Developer FAQ topic with additional General FAQs.
Updated the About Turnitin topic to clarify setup information and include more information about understanding date management. 
Updated the steps of the Register Brightspace with Microsoft Azure section in the Overview of Microsoft Office 365 topic. 
Updated the Security settings  for LTI Advantage (1.3) topic to include more information about LIS Course Section Sourcedid.
Updated the Assignments and grades services extension with LTI 1.3 topic to include information about link placements and grades, HTML Editor and Deep Linking; maximum score.
Updated the Tool Registration, Deployment, and Links topic to include more information about Deep Linking Insert Stuff.
Renamed the Use Deep Linking topic to Deep linking extension with LTI 1.3.
Removed the obsolete Deep linking extension with LTI 1.3 topic.
January 2024/20.24.1
Added the D2L Link permissions topic.
Added the About D2L Link topic.
Added the Using the D2L Link Admin Dashboard topic
Added the View the D2L Link Recipe Job Reports topic.
Updated the Assignments and grades services extension with LTI 1.3 topic to include the Understanding the behavior of Grades with AGS section. 
Updated many Google Workspace documentation topics to update workflows and add clarity.




--------------------------------------------------

